
LEDTapeMonitor-github.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000459c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08004760  08004760  00014760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004780  08004780  00020194  2**0
                  CONTENTS
  4 .ARM          00000008  08004780  08004780  00014780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004788  08004788  00020194  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004788  08004788  00014788  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800478c  0800478c  0001478c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000194  20000000  08004790  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d58  20000194  08004924  00020194  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000eec  08004924  00020eec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020194  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ebed  00000000  00000000  000201c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000021f7  00000000  00000000  0002edb1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ee0  00000000  00000000  00030fa8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000dc8  00000000  00000000  00031e88  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022294  00000000  00000000  00032c50  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b9f8  00000000  00000000  00054ee4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d0bf3  00000000  00000000  000608dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001314cf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003fc0  00000000  00000000  0013154c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000194 	.word	0x20000194
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08004748 	.word	0x08004748

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000198 	.word	0x20000198
 8000200:	08004748 	.word	0x08004748

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b972 	b.w	8000500 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	4688      	mov	r8, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14b      	bne.n	80002da <__udivmoddi4+0xa6>
 8000242:	428a      	cmp	r2, r1
 8000244:	4615      	mov	r5, r2
 8000246:	d967      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0720 	rsb	r7, r2, #32
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	fa20 f707 	lsr.w	r7, r0, r7
 800025a:	4095      	lsls	r5, r2
 800025c:	ea47 0803 	orr.w	r8, r7, r3
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbb8 f7fe 	udiv	r7, r8, lr
 800026c:	fa1f fc85 	uxth.w	ip, r5
 8000270:	fb0e 8817 	mls	r8, lr, r7, r8
 8000274:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000278:	fb07 f10c 	mul.w	r1, r7, ip
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18eb      	adds	r3, r5, r3
 8000282:	f107 30ff 	add.w	r0, r7, #4294967295
 8000286:	f080 811b 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8118 	bls.w	80004c0 <__udivmoddi4+0x28c>
 8000290:	3f02      	subs	r7, #2
 8000292:	442b      	add	r3, r5
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0fe 	udiv	r0, r3, lr
 800029c:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a8:	45a4      	cmp	ip, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	192c      	adds	r4, r5, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b2:	f080 8107 	bcs.w	80004c4 <__udivmoddi4+0x290>
 80002b6:	45a4      	cmp	ip, r4
 80002b8:	f240 8104 	bls.w	80004c4 <__udivmoddi4+0x290>
 80002bc:	3802      	subs	r0, #2
 80002be:	442c      	add	r4, r5
 80002c0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c4:	eba4 040c 	sub.w	r4, r4, ip
 80002c8:	2700      	movs	r7, #0
 80002ca:	b11e      	cbz	r6, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c6 4300 	strd	r4, r3, [r6]
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0xbe>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80eb 	beq.w	80004ba <__udivmoddi4+0x286>
 80002e4:	2700      	movs	r7, #0
 80002e6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ea:	4638      	mov	r0, r7
 80002ec:	4639      	mov	r1, r7
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	fab3 f783 	clz	r7, r3
 80002f6:	2f00      	cmp	r7, #0
 80002f8:	d147      	bne.n	800038a <__udivmoddi4+0x156>
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xd0>
 80002fe:	4282      	cmp	r2, r0
 8000300:	f200 80fa 	bhi.w	80004f8 <__udivmoddi4+0x2c4>
 8000304:	1a84      	subs	r4, r0, r2
 8000306:	eb61 0303 	sbc.w	r3, r1, r3
 800030a:	2001      	movs	r0, #1
 800030c:	4698      	mov	r8, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d0e0      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000312:	e9c6 4800 	strd	r4, r8, [r6]
 8000316:	e7dd      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000318:	b902      	cbnz	r2, 800031c <__udivmoddi4+0xe8>
 800031a:	deff      	udf	#255	; 0xff
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	2a00      	cmp	r2, #0
 8000322:	f040 808f 	bne.w	8000444 <__udivmoddi4+0x210>
 8000326:	1b49      	subs	r1, r1, r5
 8000328:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800032c:	fa1f f885 	uxth.w	r8, r5
 8000330:	2701      	movs	r7, #1
 8000332:	fbb1 fcfe 	udiv	ip, r1, lr
 8000336:	0c23      	lsrs	r3, r4, #16
 8000338:	fb0e 111c 	mls	r1, lr, ip, r1
 800033c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000340:	fb08 f10c 	mul.w	r1, r8, ip
 8000344:	4299      	cmp	r1, r3
 8000346:	d907      	bls.n	8000358 <__udivmoddi4+0x124>
 8000348:	18eb      	adds	r3, r5, r3
 800034a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4299      	cmp	r1, r3
 8000352:	f200 80cd 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 8000356:	4684      	mov	ip, r0
 8000358:	1a59      	subs	r1, r3, r1
 800035a:	b2a3      	uxth	r3, r4
 800035c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000360:	fb0e 1410 	mls	r4, lr, r0, r1
 8000364:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000368:	fb08 f800 	mul.w	r8, r8, r0
 800036c:	45a0      	cmp	r8, r4
 800036e:	d907      	bls.n	8000380 <__udivmoddi4+0x14c>
 8000370:	192c      	adds	r4, r5, r4
 8000372:	f100 33ff 	add.w	r3, r0, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x14a>
 8000378:	45a0      	cmp	r8, r4
 800037a:	f200 80b6 	bhi.w	80004ea <__udivmoddi4+0x2b6>
 800037e:	4618      	mov	r0, r3
 8000380:	eba4 0408 	sub.w	r4, r4, r8
 8000384:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000388:	e79f      	b.n	80002ca <__udivmoddi4+0x96>
 800038a:	f1c7 0c20 	rsb	ip, r7, #32
 800038e:	40bb      	lsls	r3, r7
 8000390:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000394:	ea4e 0e03 	orr.w	lr, lr, r3
 8000398:	fa01 f407 	lsl.w	r4, r1, r7
 800039c:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a0:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a8:	4325      	orrs	r5, r4
 80003aa:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ae:	0c2c      	lsrs	r4, r5, #16
 80003b0:	fb08 3319 	mls	r3, r8, r9, r3
 80003b4:	fa1f fa8e 	uxth.w	sl, lr
 80003b8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003bc:	fb09 f40a 	mul.w	r4, r9, sl
 80003c0:	429c      	cmp	r4, r3
 80003c2:	fa02 f207 	lsl.w	r2, r2, r7
 80003c6:	fa00 f107 	lsl.w	r1, r0, r7
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1e 0303 	adds.w	r3, lr, r3
 80003d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d4:	f080 8087 	bcs.w	80004e6 <__udivmoddi4+0x2b2>
 80003d8:	429c      	cmp	r4, r3
 80003da:	f240 8084 	bls.w	80004e6 <__udivmoddi4+0x2b2>
 80003de:	f1a9 0902 	sub.w	r9, r9, #2
 80003e2:	4473      	add	r3, lr
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	b2ad      	uxth	r5, r5
 80003e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ec:	fb08 3310 	mls	r3, r8, r0, r3
 80003f0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f8:	45a2      	cmp	sl, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1e 0404 	adds.w	r4, lr, r4
 8000400:	f100 33ff 	add.w	r3, r0, #4294967295
 8000404:	d26b      	bcs.n	80004de <__udivmoddi4+0x2aa>
 8000406:	45a2      	cmp	sl, r4
 8000408:	d969      	bls.n	80004de <__udivmoddi4+0x2aa>
 800040a:	3802      	subs	r0, #2
 800040c:	4474      	add	r4, lr
 800040e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000412:	fba0 8902 	umull	r8, r9, r0, r2
 8000416:	eba4 040a 	sub.w	r4, r4, sl
 800041a:	454c      	cmp	r4, r9
 800041c:	46c2      	mov	sl, r8
 800041e:	464b      	mov	r3, r9
 8000420:	d354      	bcc.n	80004cc <__udivmoddi4+0x298>
 8000422:	d051      	beq.n	80004c8 <__udivmoddi4+0x294>
 8000424:	2e00      	cmp	r6, #0
 8000426:	d069      	beq.n	80004fc <__udivmoddi4+0x2c8>
 8000428:	ebb1 050a 	subs.w	r5, r1, sl
 800042c:	eb64 0403 	sbc.w	r4, r4, r3
 8000430:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000434:	40fd      	lsrs	r5, r7
 8000436:	40fc      	lsrs	r4, r7
 8000438:	ea4c 0505 	orr.w	r5, ip, r5
 800043c:	e9c6 5400 	strd	r5, r4, [r6]
 8000440:	2700      	movs	r7, #0
 8000442:	e747      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f703 	lsr.w	r7, r0, r3
 800044c:	4095      	lsls	r5, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	fa21 f303 	lsr.w	r3, r1, r3
 8000456:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045a:	4338      	orrs	r0, r7
 800045c:	0c01      	lsrs	r1, r0, #16
 800045e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000462:	fa1f f885 	uxth.w	r8, r5
 8000466:	fb0e 3317 	mls	r3, lr, r7, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb07 f308 	mul.w	r3, r7, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x256>
 800047a:	1869      	adds	r1, r5, r1
 800047c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000480:	d22f      	bcs.n	80004e2 <__udivmoddi4+0x2ae>
 8000482:	428b      	cmp	r3, r1
 8000484:	d92d      	bls.n	80004e2 <__udivmoddi4+0x2ae>
 8000486:	3f02      	subs	r7, #2
 8000488:	4429      	add	r1, r5
 800048a:	1acb      	subs	r3, r1, r3
 800048c:	b281      	uxth	r1, r0
 800048e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000492:	fb0e 3310 	mls	r3, lr, r0, r3
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb00 f308 	mul.w	r3, r0, r8
 800049e:	428b      	cmp	r3, r1
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x27e>
 80004a2:	1869      	adds	r1, r5, r1
 80004a4:	f100 3cff 	add.w	ip, r0, #4294967295
 80004a8:	d217      	bcs.n	80004da <__udivmoddi4+0x2a6>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d915      	bls.n	80004da <__udivmoddi4+0x2a6>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4429      	add	r1, r5
 80004b2:	1ac9      	subs	r1, r1, r3
 80004b4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b8:	e73b      	b.n	8000332 <__udivmoddi4+0xfe>
 80004ba:	4637      	mov	r7, r6
 80004bc:	4630      	mov	r0, r6
 80004be:	e709      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004c0:	4607      	mov	r7, r0
 80004c2:	e6e7      	b.n	8000294 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fb      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c8:	4541      	cmp	r1, r8
 80004ca:	d2ab      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004cc:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d0:	eb69 020e 	sbc.w	r2, r9, lr
 80004d4:	3801      	subs	r0, #1
 80004d6:	4613      	mov	r3, r2
 80004d8:	e7a4      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004da:	4660      	mov	r0, ip
 80004dc:	e7e9      	b.n	80004b2 <__udivmoddi4+0x27e>
 80004de:	4618      	mov	r0, r3
 80004e0:	e795      	b.n	800040e <__udivmoddi4+0x1da>
 80004e2:	4667      	mov	r7, ip
 80004e4:	e7d1      	b.n	800048a <__udivmoddi4+0x256>
 80004e6:	4681      	mov	r9, r0
 80004e8:	e77c      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ea:	3802      	subs	r0, #2
 80004ec:	442c      	add	r4, r5
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0x14c>
 80004f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f4:	442b      	add	r3, r5
 80004f6:	e72f      	b.n	8000358 <__udivmoddi4+0x124>
 80004f8:	4638      	mov	r0, r7
 80004fa:	e708      	b.n	800030e <__udivmoddi4+0xda>
 80004fc:	4637      	mov	r7, r6
 80004fe:	e6e9      	b.n	80002d4 <__udivmoddi4+0xa0>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000508:	4b0e      	ldr	r3, [pc, #56]	; (8000544 <HAL_Init+0x40>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4a0d      	ldr	r2, [pc, #52]	; (8000544 <HAL_Init+0x40>)
 800050e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000512:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000514:	4b0b      	ldr	r3, [pc, #44]	; (8000544 <HAL_Init+0x40>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	4a0a      	ldr	r2, [pc, #40]	; (8000544 <HAL_Init+0x40>)
 800051a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800051e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000520:	4b08      	ldr	r3, [pc, #32]	; (8000544 <HAL_Init+0x40>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a07      	ldr	r2, [pc, #28]	; (8000544 <HAL_Init+0x40>)
 8000526:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800052a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800052c:	2003      	movs	r0, #3
 800052e:	f000 f94d 	bl	80007cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000532:	2000      	movs	r0, #0
 8000534:	f000 f808 	bl	8000548 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000538:	f002 fd7e 	bl	8003038 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800053c:	2300      	movs	r3, #0
}
 800053e:	4618      	mov	r0, r3
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	40023c00 	.word	0x40023c00

08000548 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000550:	4b12      	ldr	r3, [pc, #72]	; (800059c <HAL_InitTick+0x54>)
 8000552:	681a      	ldr	r2, [r3, #0]
 8000554:	4b12      	ldr	r3, [pc, #72]	; (80005a0 <HAL_InitTick+0x58>)
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	4619      	mov	r1, r3
 800055a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800055e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000562:	fbb2 f3f3 	udiv	r3, r2, r3
 8000566:	4618      	mov	r0, r3
 8000568:	f000 f965 	bl	8000836 <HAL_SYSTICK_Config>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000572:	2301      	movs	r3, #1
 8000574:	e00e      	b.n	8000594 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	2b0f      	cmp	r3, #15
 800057a:	d80a      	bhi.n	8000592 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800057c:	2200      	movs	r2, #0
 800057e:	6879      	ldr	r1, [r7, #4]
 8000580:	f04f 30ff 	mov.w	r0, #4294967295
 8000584:	f000 f92d 	bl	80007e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000588:	4a06      	ldr	r2, [pc, #24]	; (80005a4 <HAL_InitTick+0x5c>)
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800058e:	2300      	movs	r3, #0
 8000590:	e000      	b.n	8000594 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000592:	2301      	movs	r3, #1
}
 8000594:	4618      	mov	r0, r3
 8000596:	3708      	adds	r7, #8
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	20000008 	.word	0x20000008
 80005a0:	20000004 	.word	0x20000004
 80005a4:	20000000 	.word	0x20000000

080005a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005ac:	4b06      	ldr	r3, [pc, #24]	; (80005c8 <HAL_IncTick+0x20>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	461a      	mov	r2, r3
 80005b2:	4b06      	ldr	r3, [pc, #24]	; (80005cc <HAL_IncTick+0x24>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	4413      	add	r3, r2
 80005b8:	4a04      	ldr	r2, [pc, #16]	; (80005cc <HAL_IncTick+0x24>)
 80005ba:	6013      	str	r3, [r2, #0]
}
 80005bc:	bf00      	nop
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	20000004 	.word	0x20000004
 80005cc:	20000cf4 	.word	0x20000cf4

080005d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  return uwTick;
 80005d4:	4b03      	ldr	r3, [pc, #12]	; (80005e4 <HAL_GetTick+0x14>)
 80005d6:	681b      	ldr	r3, [r3, #0]
}
 80005d8:	4618      	mov	r0, r3
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	20000cf4 	.word	0x20000cf4

080005e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005f0:	f7ff ffee 	bl	80005d0 <HAL_GetTick>
 80005f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000600:	d005      	beq.n	800060e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000602:	4b09      	ldr	r3, [pc, #36]	; (8000628 <HAL_Delay+0x40>)
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	461a      	mov	r2, r3
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	4413      	add	r3, r2
 800060c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800060e:	bf00      	nop
 8000610:	f7ff ffde 	bl	80005d0 <HAL_GetTick>
 8000614:	4602      	mov	r2, r0
 8000616:	68bb      	ldr	r3, [r7, #8]
 8000618:	1ad3      	subs	r3, r2, r3
 800061a:	68fa      	ldr	r2, [r7, #12]
 800061c:	429a      	cmp	r2, r3
 800061e:	d8f7      	bhi.n	8000610 <HAL_Delay+0x28>
  {
  }
}
 8000620:	bf00      	nop
 8000622:	3710      	adds	r7, #16
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	20000004 	.word	0x20000004

0800062c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800062c:	b480      	push	{r7}
 800062e:	b085      	sub	sp, #20
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	f003 0307 	and.w	r3, r3, #7
 800063a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800063c:	4b0c      	ldr	r3, [pc, #48]	; (8000670 <__NVIC_SetPriorityGrouping+0x44>)
 800063e:	68db      	ldr	r3, [r3, #12]
 8000640:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000642:	68ba      	ldr	r2, [r7, #8]
 8000644:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000648:	4013      	ands	r3, r2
 800064a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000650:	68bb      	ldr	r3, [r7, #8]
 8000652:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000654:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000658:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800065c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800065e:	4a04      	ldr	r2, [pc, #16]	; (8000670 <__NVIC_SetPriorityGrouping+0x44>)
 8000660:	68bb      	ldr	r3, [r7, #8]
 8000662:	60d3      	str	r3, [r2, #12]
}
 8000664:	bf00      	nop
 8000666:	3714      	adds	r7, #20
 8000668:	46bd      	mov	sp, r7
 800066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066e:	4770      	bx	lr
 8000670:	e000ed00 	.word	0xe000ed00

08000674 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000678:	4b04      	ldr	r3, [pc, #16]	; (800068c <__NVIC_GetPriorityGrouping+0x18>)
 800067a:	68db      	ldr	r3, [r3, #12]
 800067c:	0a1b      	lsrs	r3, r3, #8
 800067e:	f003 0307 	and.w	r3, r3, #7
}
 8000682:	4618      	mov	r0, r3
 8000684:	46bd      	mov	sp, r7
 8000686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068a:	4770      	bx	lr
 800068c:	e000ed00 	.word	0xe000ed00

08000690 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800069a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	db0b      	blt.n	80006ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006a2:	79fb      	ldrb	r3, [r7, #7]
 80006a4:	f003 021f 	and.w	r2, r3, #31
 80006a8:	4907      	ldr	r1, [pc, #28]	; (80006c8 <__NVIC_EnableIRQ+0x38>)
 80006aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ae:	095b      	lsrs	r3, r3, #5
 80006b0:	2001      	movs	r0, #1
 80006b2:	fa00 f202 	lsl.w	r2, r0, r2
 80006b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006ba:	bf00      	nop
 80006bc:	370c      	adds	r7, #12
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr
 80006c6:	bf00      	nop
 80006c8:	e000e100 	.word	0xe000e100

080006cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	4603      	mov	r3, r0
 80006d4:	6039      	str	r1, [r7, #0]
 80006d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	db0a      	blt.n	80006f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006e0:	683b      	ldr	r3, [r7, #0]
 80006e2:	b2da      	uxtb	r2, r3
 80006e4:	490c      	ldr	r1, [pc, #48]	; (8000718 <__NVIC_SetPriority+0x4c>)
 80006e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ea:	0112      	lsls	r2, r2, #4
 80006ec:	b2d2      	uxtb	r2, r2
 80006ee:	440b      	add	r3, r1
 80006f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006f4:	e00a      	b.n	800070c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f6:	683b      	ldr	r3, [r7, #0]
 80006f8:	b2da      	uxtb	r2, r3
 80006fa:	4908      	ldr	r1, [pc, #32]	; (800071c <__NVIC_SetPriority+0x50>)
 80006fc:	79fb      	ldrb	r3, [r7, #7]
 80006fe:	f003 030f 	and.w	r3, r3, #15
 8000702:	3b04      	subs	r3, #4
 8000704:	0112      	lsls	r2, r2, #4
 8000706:	b2d2      	uxtb	r2, r2
 8000708:	440b      	add	r3, r1
 800070a:	761a      	strb	r2, [r3, #24]
}
 800070c:	bf00      	nop
 800070e:	370c      	adds	r7, #12
 8000710:	46bd      	mov	sp, r7
 8000712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000716:	4770      	bx	lr
 8000718:	e000e100 	.word	0xe000e100
 800071c:	e000ed00 	.word	0xe000ed00

08000720 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000720:	b480      	push	{r7}
 8000722:	b089      	sub	sp, #36	; 0x24
 8000724:	af00      	add	r7, sp, #0
 8000726:	60f8      	str	r0, [r7, #12]
 8000728:	60b9      	str	r1, [r7, #8]
 800072a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	f003 0307 	and.w	r3, r3, #7
 8000732:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000734:	69fb      	ldr	r3, [r7, #28]
 8000736:	f1c3 0307 	rsb	r3, r3, #7
 800073a:	2b04      	cmp	r3, #4
 800073c:	bf28      	it	cs
 800073e:	2304      	movcs	r3, #4
 8000740:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000742:	69fb      	ldr	r3, [r7, #28]
 8000744:	3304      	adds	r3, #4
 8000746:	2b06      	cmp	r3, #6
 8000748:	d902      	bls.n	8000750 <NVIC_EncodePriority+0x30>
 800074a:	69fb      	ldr	r3, [r7, #28]
 800074c:	3b03      	subs	r3, #3
 800074e:	e000      	b.n	8000752 <NVIC_EncodePriority+0x32>
 8000750:	2300      	movs	r3, #0
 8000752:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000754:	f04f 32ff 	mov.w	r2, #4294967295
 8000758:	69bb      	ldr	r3, [r7, #24]
 800075a:	fa02 f303 	lsl.w	r3, r2, r3
 800075e:	43da      	mvns	r2, r3
 8000760:	68bb      	ldr	r3, [r7, #8]
 8000762:	401a      	ands	r2, r3
 8000764:	697b      	ldr	r3, [r7, #20]
 8000766:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000768:	f04f 31ff 	mov.w	r1, #4294967295
 800076c:	697b      	ldr	r3, [r7, #20]
 800076e:	fa01 f303 	lsl.w	r3, r1, r3
 8000772:	43d9      	mvns	r1, r3
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000778:	4313      	orrs	r3, r2
         );
}
 800077a:	4618      	mov	r0, r3
 800077c:	3724      	adds	r7, #36	; 0x24
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr
	...

08000788 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	3b01      	subs	r3, #1
 8000794:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000798:	d301      	bcc.n	800079e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800079a:	2301      	movs	r3, #1
 800079c:	e00f      	b.n	80007be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800079e:	4a0a      	ldr	r2, [pc, #40]	; (80007c8 <SysTick_Config+0x40>)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	3b01      	subs	r3, #1
 80007a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007a6:	210f      	movs	r1, #15
 80007a8:	f04f 30ff 	mov.w	r0, #4294967295
 80007ac:	f7ff ff8e 	bl	80006cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007b0:	4b05      	ldr	r3, [pc, #20]	; (80007c8 <SysTick_Config+0x40>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007b6:	4b04      	ldr	r3, [pc, #16]	; (80007c8 <SysTick_Config+0x40>)
 80007b8:	2207      	movs	r2, #7
 80007ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007bc:	2300      	movs	r3, #0
}
 80007be:	4618      	mov	r0, r3
 80007c0:	3708      	adds	r7, #8
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	e000e010 	.word	0xe000e010

080007cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007d4:	6878      	ldr	r0, [r7, #4]
 80007d6:	f7ff ff29 	bl	800062c <__NVIC_SetPriorityGrouping>
}
 80007da:	bf00      	nop
 80007dc:	3708      	adds	r7, #8
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}

080007e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007e2:	b580      	push	{r7, lr}
 80007e4:	b086      	sub	sp, #24
 80007e6:	af00      	add	r7, sp, #0
 80007e8:	4603      	mov	r3, r0
 80007ea:	60b9      	str	r1, [r7, #8]
 80007ec:	607a      	str	r2, [r7, #4]
 80007ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007f0:	2300      	movs	r3, #0
 80007f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007f4:	f7ff ff3e 	bl	8000674 <__NVIC_GetPriorityGrouping>
 80007f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007fa:	687a      	ldr	r2, [r7, #4]
 80007fc:	68b9      	ldr	r1, [r7, #8]
 80007fe:	6978      	ldr	r0, [r7, #20]
 8000800:	f7ff ff8e 	bl	8000720 <NVIC_EncodePriority>
 8000804:	4602      	mov	r2, r0
 8000806:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800080a:	4611      	mov	r1, r2
 800080c:	4618      	mov	r0, r3
 800080e:	f7ff ff5d 	bl	80006cc <__NVIC_SetPriority>
}
 8000812:	bf00      	nop
 8000814:	3718      	adds	r7, #24
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}

0800081a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800081a:	b580      	push	{r7, lr}
 800081c:	b082      	sub	sp, #8
 800081e:	af00      	add	r7, sp, #0
 8000820:	4603      	mov	r3, r0
 8000822:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000824:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000828:	4618      	mov	r0, r3
 800082a:	f7ff ff31 	bl	8000690 <__NVIC_EnableIRQ>
}
 800082e:	bf00      	nop
 8000830:	3708      	adds	r7, #8
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}

08000836 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000836:	b580      	push	{r7, lr}
 8000838:	b082      	sub	sp, #8
 800083a:	af00      	add	r7, sp, #0
 800083c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800083e:	6878      	ldr	r0, [r7, #4]
 8000840:	f7ff ffa2 	bl	8000788 <SysTick_Config>
 8000844:	4603      	mov	r3, r0
}
 8000846:	4618      	mov	r0, r3
 8000848:	3708      	adds	r7, #8
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
	...

08000850 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b086      	sub	sp, #24
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000858:	2300      	movs	r3, #0
 800085a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800085c:	f7ff feb8 	bl	80005d0 <HAL_GetTick>
 8000860:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d101      	bne.n	800086c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000868:	2301      	movs	r3, #1
 800086a:	e099      	b.n	80009a0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	2200      	movs	r2, #0
 8000870:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	2202      	movs	r2, #2
 8000878:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	681a      	ldr	r2, [r3, #0]
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	f022 0201 	bic.w	r2, r2, #1
 800088a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800088c:	e00f      	b.n	80008ae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800088e:	f7ff fe9f 	bl	80005d0 <HAL_GetTick>
 8000892:	4602      	mov	r2, r0
 8000894:	693b      	ldr	r3, [r7, #16]
 8000896:	1ad3      	subs	r3, r2, r3
 8000898:	2b05      	cmp	r3, #5
 800089a:	d908      	bls.n	80008ae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	2220      	movs	r2, #32
 80008a0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	2203      	movs	r2, #3
 80008a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80008aa:	2303      	movs	r3, #3
 80008ac:	e078      	b.n	80009a0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	f003 0301 	and.w	r3, r3, #1
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d1e8      	bne.n	800088e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80008c4:	697a      	ldr	r2, [r7, #20]
 80008c6:	4b38      	ldr	r3, [pc, #224]	; (80009a8 <HAL_DMA_Init+0x158>)
 80008c8:	4013      	ands	r3, r2
 80008ca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	685a      	ldr	r2, [r3, #4]
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	689b      	ldr	r3, [r3, #8]
 80008d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80008da:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	691b      	ldr	r3, [r3, #16]
 80008e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	699b      	ldr	r3, [r3, #24]
 80008ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80008f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	6a1b      	ldr	r3, [r3, #32]
 80008f8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80008fa:	697a      	ldr	r2, [r7, #20]
 80008fc:	4313      	orrs	r3, r2
 80008fe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000904:	2b04      	cmp	r3, #4
 8000906:	d107      	bne.n	8000918 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000910:	4313      	orrs	r3, r2
 8000912:	697a      	ldr	r2, [r7, #20]
 8000914:	4313      	orrs	r3, r2
 8000916:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	697a      	ldr	r2, [r7, #20]
 800091e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	695b      	ldr	r3, [r3, #20]
 8000926:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000928:	697b      	ldr	r3, [r7, #20]
 800092a:	f023 0307 	bic.w	r3, r3, #7
 800092e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000934:	697a      	ldr	r2, [r7, #20]
 8000936:	4313      	orrs	r3, r2
 8000938:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800093e:	2b04      	cmp	r3, #4
 8000940:	d117      	bne.n	8000972 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000946:	697a      	ldr	r2, [r7, #20]
 8000948:	4313      	orrs	r3, r2
 800094a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000950:	2b00      	cmp	r3, #0
 8000952:	d00e      	beq.n	8000972 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000954:	6878      	ldr	r0, [r7, #4]
 8000956:	f000 fa77 	bl	8000e48 <DMA_CheckFifoParam>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d008      	beq.n	8000972 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	2240      	movs	r2, #64	; 0x40
 8000964:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	2201      	movs	r2, #1
 800096a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800096e:	2301      	movs	r3, #1
 8000970:	e016      	b.n	80009a0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	697a      	ldr	r2, [r7, #20]
 8000978:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800097a:	6878      	ldr	r0, [r7, #4]
 800097c:	f000 fa2e 	bl	8000ddc <DMA_CalcBaseAndBitshift>
 8000980:	4603      	mov	r3, r0
 8000982:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000988:	223f      	movs	r2, #63	; 0x3f
 800098a:	409a      	lsls	r2, r3
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	2200      	movs	r2, #0
 8000994:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	2201      	movs	r2, #1
 800099a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800099e:	2300      	movs	r3, #0
}
 80009a0:	4618      	mov	r0, r3
 80009a2:	3718      	adds	r7, #24
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	f010803f 	.word	0xf010803f

080009ac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b086      	sub	sp, #24
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	60f8      	str	r0, [r7, #12]
 80009b4:	60b9      	str	r1, [r7, #8]
 80009b6:	607a      	str	r2, [r7, #4]
 80009b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80009ba:	2300      	movs	r3, #0
 80009bc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009c2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80009ca:	2b01      	cmp	r3, #1
 80009cc:	d101      	bne.n	80009d2 <HAL_DMA_Start_IT+0x26>
 80009ce:	2302      	movs	r3, #2
 80009d0:	e048      	b.n	8000a64 <HAL_DMA_Start_IT+0xb8>
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	2201      	movs	r2, #1
 80009d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80009e0:	b2db      	uxtb	r3, r3
 80009e2:	2b01      	cmp	r3, #1
 80009e4:	d137      	bne.n	8000a56 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	2202      	movs	r2, #2
 80009ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	2200      	movs	r2, #0
 80009f2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	687a      	ldr	r2, [r7, #4]
 80009f8:	68b9      	ldr	r1, [r7, #8]
 80009fa:	68f8      	ldr	r0, [r7, #12]
 80009fc:	f000 f9c0 	bl	8000d80 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a04:	223f      	movs	r2, #63	; 0x3f
 8000a06:	409a      	lsls	r2, r3
 8000a08:	693b      	ldr	r3, [r7, #16]
 8000a0a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	681a      	ldr	r2, [r3, #0]
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	f042 0216 	orr.w	r2, r2, #22
 8000a1a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	695a      	ldr	r2, [r3, #20]
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000a2a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d007      	beq.n	8000a44 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	681a      	ldr	r2, [r3, #0]
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	f042 0208 	orr.w	r2, r2, #8
 8000a42:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	681a      	ldr	r2, [r3, #0]
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	f042 0201 	orr.w	r2, r2, #1
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	e005      	b.n	8000a62 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	2200      	movs	r2, #0
 8000a5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8000a5e:	2302      	movs	r3, #2
 8000a60:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8000a62:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a64:	4618      	mov	r0, r3
 8000a66:	3718      	adds	r7, #24
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}

08000a6c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b086      	sub	sp, #24
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8000a74:	2300      	movs	r3, #0
 8000a76:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000a78:	4b92      	ldr	r3, [pc, #584]	; (8000cc4 <HAL_DMA_IRQHandler+0x258>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a92      	ldr	r2, [pc, #584]	; (8000cc8 <HAL_DMA_IRQHandler+0x25c>)
 8000a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8000a82:	0a9b      	lsrs	r3, r3, #10
 8000a84:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a8a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8000a8c:	693b      	ldr	r3, [r7, #16]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a96:	2208      	movs	r2, #8
 8000a98:	409a      	lsls	r2, r3
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	4013      	ands	r3, r2
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d01a      	beq.n	8000ad8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	f003 0304 	and.w	r3, r3, #4
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d013      	beq.n	8000ad8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	681a      	ldr	r2, [r3, #0]
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	f022 0204 	bic.w	r2, r2, #4
 8000abe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ac4:	2208      	movs	r2, #8
 8000ac6:	409a      	lsls	r2, r3
 8000ac8:	693b      	ldr	r3, [r7, #16]
 8000aca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ad0:	f043 0201 	orr.w	r2, r3, #1
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000adc:	2201      	movs	r2, #1
 8000ade:	409a      	lsls	r2, r3
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	4013      	ands	r3, r2
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d012      	beq.n	8000b0e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	695b      	ldr	r3, [r3, #20]
 8000aee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d00b      	beq.n	8000b0e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000afa:	2201      	movs	r2, #1
 8000afc:	409a      	lsls	r2, r3
 8000afe:	693b      	ldr	r3, [r7, #16]
 8000b00:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b06:	f043 0202 	orr.w	r2, r3, #2
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b12:	2204      	movs	r2, #4
 8000b14:	409a      	lsls	r2, r3
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	4013      	ands	r3, r2
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d012      	beq.n	8000b44 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	f003 0302 	and.w	r3, r3, #2
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d00b      	beq.n	8000b44 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b30:	2204      	movs	r2, #4
 8000b32:	409a      	lsls	r2, r3
 8000b34:	693b      	ldr	r3, [r7, #16]
 8000b36:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b3c:	f043 0204 	orr.w	r2, r3, #4
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b48:	2210      	movs	r2, #16
 8000b4a:	409a      	lsls	r2, r3
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	4013      	ands	r3, r2
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d043      	beq.n	8000bdc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	f003 0308 	and.w	r3, r3, #8
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d03c      	beq.n	8000bdc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b66:	2210      	movs	r2, #16
 8000b68:	409a      	lsls	r2, r3
 8000b6a:	693b      	ldr	r3, [r7, #16]
 8000b6c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d018      	beq.n	8000bae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d108      	bne.n	8000b9c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d024      	beq.n	8000bdc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b96:	6878      	ldr	r0, [r7, #4]
 8000b98:	4798      	blx	r3
 8000b9a:	e01f      	b.n	8000bdc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d01b      	beq.n	8000bdc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ba8:	6878      	ldr	r0, [r7, #4]
 8000baa:	4798      	blx	r3
 8000bac:	e016      	b.n	8000bdc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d107      	bne.n	8000bcc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	681a      	ldr	r2, [r3, #0]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	f022 0208 	bic.w	r2, r2, #8
 8000bca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d003      	beq.n	8000bdc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd8:	6878      	ldr	r0, [r7, #4]
 8000bda:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000be0:	2220      	movs	r2, #32
 8000be2:	409a      	lsls	r2, r3
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	4013      	ands	r3, r2
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	f000 808e 	beq.w	8000d0a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	f003 0310 	and.w	r3, r3, #16
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	f000 8086 	beq.w	8000d0a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c02:	2220      	movs	r2, #32
 8000c04:	409a      	lsls	r2, r3
 8000c06:	693b      	ldr	r3, [r7, #16]
 8000c08:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000c10:	b2db      	uxtb	r3, r3
 8000c12:	2b05      	cmp	r3, #5
 8000c14:	d136      	bne.n	8000c84 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	681a      	ldr	r2, [r3, #0]
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	f022 0216 	bic.w	r2, r2, #22
 8000c24:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	695a      	ldr	r2, [r3, #20]
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000c34:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d103      	bne.n	8000c46 <HAL_DMA_IRQHandler+0x1da>
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d007      	beq.n	8000c56 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	681a      	ldr	r2, [r3, #0]
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f022 0208 	bic.w	r2, r2, #8
 8000c54:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c5a:	223f      	movs	r2, #63	; 0x3f
 8000c5c:	409a      	lsls	r2, r3
 8000c5e:	693b      	ldr	r3, [r7, #16]
 8000c60:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	2200      	movs	r2, #0
 8000c66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d07d      	beq.n	8000d76 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000c7e:	6878      	ldr	r0, [r7, #4]
 8000c80:	4798      	blx	r3
        }
        return;
 8000c82:	e078      	b.n	8000d76 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d01c      	beq.n	8000ccc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d108      	bne.n	8000cb2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d030      	beq.n	8000d0a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cac:	6878      	ldr	r0, [r7, #4]
 8000cae:	4798      	blx	r3
 8000cb0:	e02b      	b.n	8000d0a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d027      	beq.n	8000d0a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cbe:	6878      	ldr	r0, [r7, #4]
 8000cc0:	4798      	blx	r3
 8000cc2:	e022      	b.n	8000d0a <HAL_DMA_IRQHandler+0x29e>
 8000cc4:	20000008 	.word	0x20000008
 8000cc8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d10f      	bne.n	8000cfa <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	681a      	ldr	r2, [r3, #0]
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	f022 0210 	bic.w	r2, r2, #16
 8000ce8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	2200      	movs	r2, #0
 8000cee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d003      	beq.n	8000d0a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d06:	6878      	ldr	r0, [r7, #4]
 8000d08:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d032      	beq.n	8000d78 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d16:	f003 0301 	and.w	r3, r3, #1
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d022      	beq.n	8000d64 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	2205      	movs	r2, #5
 8000d22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	681a      	ldr	r2, [r3, #0]
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f022 0201 	bic.w	r2, r2, #1
 8000d34:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8000d36:	68bb      	ldr	r3, [r7, #8]
 8000d38:	3301      	adds	r3, #1
 8000d3a:	60bb      	str	r3, [r7, #8]
 8000d3c:	697a      	ldr	r2, [r7, #20]
 8000d3e:	429a      	cmp	r2, r3
 8000d40:	d307      	bcc.n	8000d52 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f003 0301 	and.w	r3, r3, #1
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d1f2      	bne.n	8000d36 <HAL_DMA_IRQHandler+0x2ca>
 8000d50:	e000      	b.n	8000d54 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8000d52:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	2200      	movs	r2, #0
 8000d58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2201      	movs	r2, #1
 8000d60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d005      	beq.n	8000d78 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d70:	6878      	ldr	r0, [r7, #4]
 8000d72:	4798      	blx	r3
 8000d74:	e000      	b.n	8000d78 <HAL_DMA_IRQHandler+0x30c>
        return;
 8000d76:	bf00      	nop
    }
  }
}
 8000d78:	3718      	adds	r7, #24
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop

08000d80 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b085      	sub	sp, #20
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	60f8      	str	r0, [r7, #12]
 8000d88:	60b9      	str	r1, [r7, #8]
 8000d8a:	607a      	str	r2, [r7, #4]
 8000d8c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000d9c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	683a      	ldr	r2, [r7, #0]
 8000da4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	689b      	ldr	r3, [r3, #8]
 8000daa:	2b40      	cmp	r3, #64	; 0x40
 8000dac:	d108      	bne.n	8000dc0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	687a      	ldr	r2, [r7, #4]
 8000db4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	68ba      	ldr	r2, [r7, #8]
 8000dbc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8000dbe:	e007      	b.n	8000dd0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	68ba      	ldr	r2, [r7, #8]
 8000dc6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	687a      	ldr	r2, [r7, #4]
 8000dce:	60da      	str	r2, [r3, #12]
}
 8000dd0:	bf00      	nop
 8000dd2:	3714      	adds	r7, #20
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr

08000ddc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b085      	sub	sp, #20
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	3b10      	subs	r3, #16
 8000dec:	4a14      	ldr	r2, [pc, #80]	; (8000e40 <DMA_CalcBaseAndBitshift+0x64>)
 8000dee:	fba2 2303 	umull	r2, r3, r2, r3
 8000df2:	091b      	lsrs	r3, r3, #4
 8000df4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000df6:	4a13      	ldr	r2, [pc, #76]	; (8000e44 <DMA_CalcBaseAndBitshift+0x68>)
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	4413      	add	r3, r2
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	461a      	mov	r2, r3
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	2b03      	cmp	r3, #3
 8000e08:	d909      	bls.n	8000e1e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000e12:	f023 0303 	bic.w	r3, r3, #3
 8000e16:	1d1a      	adds	r2, r3, #4
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	659a      	str	r2, [r3, #88]	; 0x58
 8000e1c:	e007      	b.n	8000e2e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000e26:	f023 0303 	bic.w	r3, r3, #3
 8000e2a:	687a      	ldr	r2, [r7, #4]
 8000e2c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3714      	adds	r7, #20
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	aaaaaaab 	.word	0xaaaaaaab
 8000e44:	08004760 	.word	0x08004760

08000e48 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b085      	sub	sp, #20
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e50:	2300      	movs	r3, #0
 8000e52:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e58:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	699b      	ldr	r3, [r3, #24]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d11f      	bne.n	8000ea2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8000e62:	68bb      	ldr	r3, [r7, #8]
 8000e64:	2b03      	cmp	r3, #3
 8000e66:	d855      	bhi.n	8000f14 <DMA_CheckFifoParam+0xcc>
 8000e68:	a201      	add	r2, pc, #4	; (adr r2, 8000e70 <DMA_CheckFifoParam+0x28>)
 8000e6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e6e:	bf00      	nop
 8000e70:	08000e81 	.word	0x08000e81
 8000e74:	08000e93 	.word	0x08000e93
 8000e78:	08000e81 	.word	0x08000e81
 8000e7c:	08000f15 	.word	0x08000f15
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d045      	beq.n	8000f18 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000e90:	e042      	b.n	8000f18 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e96:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000e9a:	d13f      	bne.n	8000f1c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000ea0:	e03c      	b.n	8000f1c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	699b      	ldr	r3, [r3, #24]
 8000ea6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000eaa:	d121      	bne.n	8000ef0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	2b03      	cmp	r3, #3
 8000eb0:	d836      	bhi.n	8000f20 <DMA_CheckFifoParam+0xd8>
 8000eb2:	a201      	add	r2, pc, #4	; (adr r2, 8000eb8 <DMA_CheckFifoParam+0x70>)
 8000eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000eb8:	08000ec9 	.word	0x08000ec9
 8000ebc:	08000ecf 	.word	0x08000ecf
 8000ec0:	08000ec9 	.word	0x08000ec9
 8000ec4:	08000ee1 	.word	0x08000ee1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	73fb      	strb	r3, [r7, #15]
      break;
 8000ecc:	e02f      	b.n	8000f2e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ed2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d024      	beq.n	8000f24 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8000eda:	2301      	movs	r3, #1
 8000edc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000ede:	e021      	b.n	8000f24 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ee4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000ee8:	d11e      	bne.n	8000f28 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8000eea:	2301      	movs	r3, #1
 8000eec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8000eee:	e01b      	b.n	8000f28 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	2b02      	cmp	r3, #2
 8000ef4:	d902      	bls.n	8000efc <DMA_CheckFifoParam+0xb4>
 8000ef6:	2b03      	cmp	r3, #3
 8000ef8:	d003      	beq.n	8000f02 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8000efa:	e018      	b.n	8000f2e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8000efc:	2301      	movs	r3, #1
 8000efe:	73fb      	strb	r3, [r7, #15]
      break;
 8000f00:	e015      	b.n	8000f2e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f06:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d00e      	beq.n	8000f2c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	73fb      	strb	r3, [r7, #15]
      break;
 8000f12:	e00b      	b.n	8000f2c <DMA_CheckFifoParam+0xe4>
      break;
 8000f14:	bf00      	nop
 8000f16:	e00a      	b.n	8000f2e <DMA_CheckFifoParam+0xe6>
      break;
 8000f18:	bf00      	nop
 8000f1a:	e008      	b.n	8000f2e <DMA_CheckFifoParam+0xe6>
      break;
 8000f1c:	bf00      	nop
 8000f1e:	e006      	b.n	8000f2e <DMA_CheckFifoParam+0xe6>
      break;
 8000f20:	bf00      	nop
 8000f22:	e004      	b.n	8000f2e <DMA_CheckFifoParam+0xe6>
      break;
 8000f24:	bf00      	nop
 8000f26:	e002      	b.n	8000f2e <DMA_CheckFifoParam+0xe6>
      break;   
 8000f28:	bf00      	nop
 8000f2a:	e000      	b.n	8000f2e <DMA_CheckFifoParam+0xe6>
      break;
 8000f2c:	bf00      	nop
    }
  } 
  
  return status; 
 8000f2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	3714      	adds	r7, #20
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr

08000f3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b089      	sub	sp, #36	; 0x24
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f46:	2300      	movs	r3, #0
 8000f48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f52:	2300      	movs	r3, #0
 8000f54:	61fb      	str	r3, [r7, #28]
 8000f56:	e165      	b.n	8001224 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f58:	2201      	movs	r2, #1
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	697a      	ldr	r2, [r7, #20]
 8000f68:	4013      	ands	r3, r2
 8000f6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f6c:	693a      	ldr	r2, [r7, #16]
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	429a      	cmp	r2, r3
 8000f72:	f040 8154 	bne.w	800121e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	2b02      	cmp	r3, #2
 8000f7c:	d003      	beq.n	8000f86 <HAL_GPIO_Init+0x4a>
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	2b12      	cmp	r3, #18
 8000f84:	d123      	bne.n	8000fce <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	08da      	lsrs	r2, r3, #3
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	3208      	adds	r2, #8
 8000f8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f94:	69fb      	ldr	r3, [r7, #28]
 8000f96:	f003 0307 	and.w	r3, r3, #7
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	220f      	movs	r2, #15
 8000f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa2:	43db      	mvns	r3, r3
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	691a      	ldr	r2, [r3, #16]
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	f003 0307 	and.w	r3, r3, #7
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fba:	69ba      	ldr	r2, [r7, #24]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fc0:	69fb      	ldr	r3, [r7, #28]
 8000fc2:	08da      	lsrs	r2, r3, #3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	3208      	adds	r2, #8
 8000fc8:	69b9      	ldr	r1, [r7, #24]
 8000fca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	2203      	movs	r2, #3
 8000fda:	fa02 f303 	lsl.w	r3, r2, r3
 8000fde:	43db      	mvns	r3, r3
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	f003 0203 	and.w	r2, r3, #3
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	005b      	lsls	r3, r3, #1
 8000ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff6:	69ba      	ldr	r2, [r7, #24]
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	69ba      	ldr	r2, [r7, #24]
 8001000:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	2b01      	cmp	r3, #1
 8001008:	d00b      	beq.n	8001022 <HAL_GPIO_Init+0xe6>
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	2b02      	cmp	r3, #2
 8001010:	d007      	beq.n	8001022 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001016:	2b11      	cmp	r3, #17
 8001018:	d003      	beq.n	8001022 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	2b12      	cmp	r3, #18
 8001020:	d130      	bne.n	8001084 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	689b      	ldr	r3, [r3, #8]
 8001026:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	005b      	lsls	r3, r3, #1
 800102c:	2203      	movs	r2, #3
 800102e:	fa02 f303 	lsl.w	r3, r2, r3
 8001032:	43db      	mvns	r3, r3
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	4013      	ands	r3, r2
 8001038:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	68da      	ldr	r2, [r3, #12]
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	005b      	lsls	r3, r3, #1
 8001042:	fa02 f303 	lsl.w	r3, r2, r3
 8001046:	69ba      	ldr	r2, [r7, #24]
 8001048:	4313      	orrs	r3, r2
 800104a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	69ba      	ldr	r2, [r7, #24]
 8001050:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001058:	2201      	movs	r2, #1
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	43db      	mvns	r3, r3
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	4013      	ands	r3, r2
 8001066:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	091b      	lsrs	r3, r3, #4
 800106e:	f003 0201 	and.w	r2, r3, #1
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	4313      	orrs	r3, r2
 800107c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	005b      	lsls	r3, r3, #1
 800108e:	2203      	movs	r2, #3
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	43db      	mvns	r3, r3
 8001096:	69ba      	ldr	r2, [r7, #24]
 8001098:	4013      	ands	r3, r2
 800109a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	689a      	ldr	r2, [r3, #8]
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	fa02 f303 	lsl.w	r3, r2, r3
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	4313      	orrs	r3, r2
 80010ac:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010bc:	2b00      	cmp	r3, #0
 80010be:	f000 80ae 	beq.w	800121e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010c2:	2300      	movs	r3, #0
 80010c4:	60fb      	str	r3, [r7, #12]
 80010c6:	4b5c      	ldr	r3, [pc, #368]	; (8001238 <HAL_GPIO_Init+0x2fc>)
 80010c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ca:	4a5b      	ldr	r2, [pc, #364]	; (8001238 <HAL_GPIO_Init+0x2fc>)
 80010cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010d0:	6453      	str	r3, [r2, #68]	; 0x44
 80010d2:	4b59      	ldr	r3, [pc, #356]	; (8001238 <HAL_GPIO_Init+0x2fc>)
 80010d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010da:	60fb      	str	r3, [r7, #12]
 80010dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010de:	4a57      	ldr	r2, [pc, #348]	; (800123c <HAL_GPIO_Init+0x300>)
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	089b      	lsrs	r3, r3, #2
 80010e4:	3302      	adds	r3, #2
 80010e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010ec:	69fb      	ldr	r3, [r7, #28]
 80010ee:	f003 0303 	and.w	r3, r3, #3
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	220f      	movs	r2, #15
 80010f6:	fa02 f303 	lsl.w	r3, r2, r3
 80010fa:	43db      	mvns	r3, r3
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	4013      	ands	r3, r2
 8001100:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4a4e      	ldr	r2, [pc, #312]	; (8001240 <HAL_GPIO_Init+0x304>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d025      	beq.n	8001156 <HAL_GPIO_Init+0x21a>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4a4d      	ldr	r2, [pc, #308]	; (8001244 <HAL_GPIO_Init+0x308>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d01f      	beq.n	8001152 <HAL_GPIO_Init+0x216>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4a4c      	ldr	r2, [pc, #304]	; (8001248 <HAL_GPIO_Init+0x30c>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d019      	beq.n	800114e <HAL_GPIO_Init+0x212>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4a4b      	ldr	r2, [pc, #300]	; (800124c <HAL_GPIO_Init+0x310>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d013      	beq.n	800114a <HAL_GPIO_Init+0x20e>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4a4a      	ldr	r2, [pc, #296]	; (8001250 <HAL_GPIO_Init+0x314>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d00d      	beq.n	8001146 <HAL_GPIO_Init+0x20a>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4a49      	ldr	r2, [pc, #292]	; (8001254 <HAL_GPIO_Init+0x318>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d007      	beq.n	8001142 <HAL_GPIO_Init+0x206>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4a48      	ldr	r2, [pc, #288]	; (8001258 <HAL_GPIO_Init+0x31c>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d101      	bne.n	800113e <HAL_GPIO_Init+0x202>
 800113a:	2306      	movs	r3, #6
 800113c:	e00c      	b.n	8001158 <HAL_GPIO_Init+0x21c>
 800113e:	2307      	movs	r3, #7
 8001140:	e00a      	b.n	8001158 <HAL_GPIO_Init+0x21c>
 8001142:	2305      	movs	r3, #5
 8001144:	e008      	b.n	8001158 <HAL_GPIO_Init+0x21c>
 8001146:	2304      	movs	r3, #4
 8001148:	e006      	b.n	8001158 <HAL_GPIO_Init+0x21c>
 800114a:	2303      	movs	r3, #3
 800114c:	e004      	b.n	8001158 <HAL_GPIO_Init+0x21c>
 800114e:	2302      	movs	r3, #2
 8001150:	e002      	b.n	8001158 <HAL_GPIO_Init+0x21c>
 8001152:	2301      	movs	r3, #1
 8001154:	e000      	b.n	8001158 <HAL_GPIO_Init+0x21c>
 8001156:	2300      	movs	r3, #0
 8001158:	69fa      	ldr	r2, [r7, #28]
 800115a:	f002 0203 	and.w	r2, r2, #3
 800115e:	0092      	lsls	r2, r2, #2
 8001160:	4093      	lsls	r3, r2
 8001162:	69ba      	ldr	r2, [r7, #24]
 8001164:	4313      	orrs	r3, r2
 8001166:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001168:	4934      	ldr	r1, [pc, #208]	; (800123c <HAL_GPIO_Init+0x300>)
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	089b      	lsrs	r3, r3, #2
 800116e:	3302      	adds	r3, #2
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001176:	4b39      	ldr	r3, [pc, #228]	; (800125c <HAL_GPIO_Init+0x320>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	43db      	mvns	r3, r3
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	4013      	ands	r3, r2
 8001184:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800118e:	2b00      	cmp	r3, #0
 8001190:	d003      	beq.n	800119a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001192:	69ba      	ldr	r2, [r7, #24]
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	4313      	orrs	r3, r2
 8001198:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800119a:	4a30      	ldr	r2, [pc, #192]	; (800125c <HAL_GPIO_Init+0x320>)
 800119c:	69bb      	ldr	r3, [r7, #24]
 800119e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80011a0:	4b2e      	ldr	r3, [pc, #184]	; (800125c <HAL_GPIO_Init+0x320>)
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	43db      	mvns	r3, r3
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	4013      	ands	r3, r2
 80011ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d003      	beq.n	80011c4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	4313      	orrs	r3, r2
 80011c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011c4:	4a25      	ldr	r2, [pc, #148]	; (800125c <HAL_GPIO_Init+0x320>)
 80011c6:	69bb      	ldr	r3, [r7, #24]
 80011c8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011ca:	4b24      	ldr	r3, [pc, #144]	; (800125c <HAL_GPIO_Init+0x320>)
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	43db      	mvns	r3, r3
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	4013      	ands	r3, r2
 80011d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d003      	beq.n	80011ee <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011ee:	4a1b      	ldr	r2, [pc, #108]	; (800125c <HAL_GPIO_Init+0x320>)
 80011f0:	69bb      	ldr	r3, [r7, #24]
 80011f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011f4:	4b19      	ldr	r3, [pc, #100]	; (800125c <HAL_GPIO_Init+0x320>)
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	43db      	mvns	r3, r3
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	4013      	ands	r3, r2
 8001202:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800120c:	2b00      	cmp	r3, #0
 800120e:	d003      	beq.n	8001218 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	4313      	orrs	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001218:	4a10      	ldr	r2, [pc, #64]	; (800125c <HAL_GPIO_Init+0x320>)
 800121a:	69bb      	ldr	r3, [r7, #24]
 800121c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	3301      	adds	r3, #1
 8001222:	61fb      	str	r3, [r7, #28]
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	2b0f      	cmp	r3, #15
 8001228:	f67f ae96 	bls.w	8000f58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800122c:	bf00      	nop
 800122e:	3724      	adds	r7, #36	; 0x24
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr
 8001238:	40023800 	.word	0x40023800
 800123c:	40013800 	.word	0x40013800
 8001240:	40020000 	.word	0x40020000
 8001244:	40020400 	.word	0x40020400
 8001248:	40020800 	.word	0x40020800
 800124c:	40020c00 	.word	0x40020c00
 8001250:	40021000 	.word	0x40021000
 8001254:	40021400 	.word	0x40021400
 8001258:	40021800 	.word	0x40021800
 800125c:	40013c00 	.word	0x40013c00

08001260 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001260:	b480      	push	{r7}
 8001262:	b085      	sub	sp, #20
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	460b      	mov	r3, r1
 800126a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	691a      	ldr	r2, [r3, #16]
 8001270:	887b      	ldrh	r3, [r7, #2]
 8001272:	4013      	ands	r3, r2
 8001274:	2b00      	cmp	r3, #0
 8001276:	d002      	beq.n	800127e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001278:	2301      	movs	r3, #1
 800127a:	73fb      	strb	r3, [r7, #15]
 800127c:	e001      	b.n	8001282 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800127e:	2300      	movs	r3, #0
 8001280:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001282:	7bfb      	ldrb	r3, [r7, #15]
}
 8001284:	4618      	mov	r0, r3
 8001286:	3714      	adds	r7, #20
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr

08001290 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	460b      	mov	r3, r1
 800129a:	807b      	strh	r3, [r7, #2]
 800129c:	4613      	mov	r3, r2
 800129e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012a0:	787b      	ldrb	r3, [r7, #1]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d003      	beq.n	80012ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012a6:	887a      	ldrh	r2, [r7, #2]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012ac:	e003      	b.n	80012b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012ae:	887b      	ldrh	r3, [r7, #2]
 80012b0:	041a      	lsls	r2, r3, #16
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	619a      	str	r2, [r3, #24]
}
 80012b6:	bf00      	nop
 80012b8:	370c      	adds	r7, #12
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
	...

080012c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d101      	bne.n	80012d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80012d4:	2301      	movs	r3, #1
 80012d6:	e0ca      	b.n	800146e <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80012d8:	4b67      	ldr	r3, [pc, #412]	; (8001478 <HAL_RCC_ClockConfig+0x1b4>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f003 030f 	and.w	r3, r3, #15
 80012e0:	683a      	ldr	r2, [r7, #0]
 80012e2:	429a      	cmp	r2, r3
 80012e4:	d90c      	bls.n	8001300 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012e6:	4b64      	ldr	r3, [pc, #400]	; (8001478 <HAL_RCC_ClockConfig+0x1b4>)
 80012e8:	683a      	ldr	r2, [r7, #0]
 80012ea:	b2d2      	uxtb	r2, r2
 80012ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80012ee:	4b62      	ldr	r3, [pc, #392]	; (8001478 <HAL_RCC_ClockConfig+0x1b4>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f003 030f 	and.w	r3, r3, #15
 80012f6:	683a      	ldr	r2, [r7, #0]
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d001      	beq.n	8001300 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80012fc:	2301      	movs	r3, #1
 80012fe:	e0b6      	b.n	800146e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f003 0302 	and.w	r3, r3, #2
 8001308:	2b00      	cmp	r3, #0
 800130a:	d020      	beq.n	800134e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f003 0304 	and.w	r3, r3, #4
 8001314:	2b00      	cmp	r3, #0
 8001316:	d005      	beq.n	8001324 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001318:	4b58      	ldr	r3, [pc, #352]	; (800147c <HAL_RCC_ClockConfig+0x1b8>)
 800131a:	689b      	ldr	r3, [r3, #8]
 800131c:	4a57      	ldr	r2, [pc, #348]	; (800147c <HAL_RCC_ClockConfig+0x1b8>)
 800131e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001322:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f003 0308 	and.w	r3, r3, #8
 800132c:	2b00      	cmp	r3, #0
 800132e:	d005      	beq.n	800133c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001330:	4b52      	ldr	r3, [pc, #328]	; (800147c <HAL_RCC_ClockConfig+0x1b8>)
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	4a51      	ldr	r2, [pc, #324]	; (800147c <HAL_RCC_ClockConfig+0x1b8>)
 8001336:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800133a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800133c:	4b4f      	ldr	r3, [pc, #316]	; (800147c <HAL_RCC_ClockConfig+0x1b8>)
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	689b      	ldr	r3, [r3, #8]
 8001348:	494c      	ldr	r1, [pc, #304]	; (800147c <HAL_RCC_ClockConfig+0x1b8>)
 800134a:	4313      	orrs	r3, r2
 800134c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f003 0301 	and.w	r3, r3, #1
 8001356:	2b00      	cmp	r3, #0
 8001358:	d044      	beq.n	80013e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	2b01      	cmp	r3, #1
 8001360:	d107      	bne.n	8001372 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001362:	4b46      	ldr	r3, [pc, #280]	; (800147c <HAL_RCC_ClockConfig+0x1b8>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800136a:	2b00      	cmp	r3, #0
 800136c:	d119      	bne.n	80013a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	e07d      	b.n	800146e <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	2b02      	cmp	r3, #2
 8001378:	d003      	beq.n	8001382 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800137e:	2b03      	cmp	r3, #3
 8001380:	d107      	bne.n	8001392 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001382:	4b3e      	ldr	r3, [pc, #248]	; (800147c <HAL_RCC_ClockConfig+0x1b8>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800138a:	2b00      	cmp	r3, #0
 800138c:	d109      	bne.n	80013a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e06d      	b.n	800146e <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001392:	4b3a      	ldr	r3, [pc, #232]	; (800147c <HAL_RCC_ClockConfig+0x1b8>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f003 0302 	and.w	r3, r3, #2
 800139a:	2b00      	cmp	r3, #0
 800139c:	d101      	bne.n	80013a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	e065      	b.n	800146e <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013a2:	4b36      	ldr	r3, [pc, #216]	; (800147c <HAL_RCC_ClockConfig+0x1b8>)
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	f023 0203 	bic.w	r2, r3, #3
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	4933      	ldr	r1, [pc, #204]	; (800147c <HAL_RCC_ClockConfig+0x1b8>)
 80013b0:	4313      	orrs	r3, r2
 80013b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80013b4:	f7ff f90c 	bl	80005d0 <HAL_GetTick>
 80013b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013ba:	e00a      	b.n	80013d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013bc:	f7ff f908 	bl	80005d0 <HAL_GetTick>
 80013c0:	4602      	mov	r2, r0
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d901      	bls.n	80013d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80013ce:	2303      	movs	r3, #3
 80013d0:	e04d      	b.n	800146e <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013d2:	4b2a      	ldr	r3, [pc, #168]	; (800147c <HAL_RCC_ClockConfig+0x1b8>)
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	f003 020c 	and.w	r2, r3, #12
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	429a      	cmp	r2, r3
 80013e2:	d1eb      	bne.n	80013bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80013e4:	4b24      	ldr	r3, [pc, #144]	; (8001478 <HAL_RCC_ClockConfig+0x1b4>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f003 030f 	and.w	r3, r3, #15
 80013ec:	683a      	ldr	r2, [r7, #0]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d20c      	bcs.n	800140c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013f2:	4b21      	ldr	r3, [pc, #132]	; (8001478 <HAL_RCC_ClockConfig+0x1b4>)
 80013f4:	683a      	ldr	r2, [r7, #0]
 80013f6:	b2d2      	uxtb	r2, r2
 80013f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013fa:	4b1f      	ldr	r3, [pc, #124]	; (8001478 <HAL_RCC_ClockConfig+0x1b4>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f003 030f 	and.w	r3, r3, #15
 8001402:	683a      	ldr	r2, [r7, #0]
 8001404:	429a      	cmp	r2, r3
 8001406:	d001      	beq.n	800140c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	e030      	b.n	800146e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f003 0304 	and.w	r3, r3, #4
 8001414:	2b00      	cmp	r3, #0
 8001416:	d008      	beq.n	800142a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001418:	4b18      	ldr	r3, [pc, #96]	; (800147c <HAL_RCC_ClockConfig+0x1b8>)
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	4915      	ldr	r1, [pc, #84]	; (800147c <HAL_RCC_ClockConfig+0x1b8>)
 8001426:	4313      	orrs	r3, r2
 8001428:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f003 0308 	and.w	r3, r3, #8
 8001432:	2b00      	cmp	r3, #0
 8001434:	d009      	beq.n	800144a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001436:	4b11      	ldr	r3, [pc, #68]	; (800147c <HAL_RCC_ClockConfig+0x1b8>)
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	691b      	ldr	r3, [r3, #16]
 8001442:	00db      	lsls	r3, r3, #3
 8001444:	490d      	ldr	r1, [pc, #52]	; (800147c <HAL_RCC_ClockConfig+0x1b8>)
 8001446:	4313      	orrs	r3, r2
 8001448:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800144a:	f000 f851 	bl	80014f0 <HAL_RCC_GetSysClockFreq>
 800144e:	4601      	mov	r1, r0
 8001450:	4b0a      	ldr	r3, [pc, #40]	; (800147c <HAL_RCC_ClockConfig+0x1b8>)
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	091b      	lsrs	r3, r3, #4
 8001456:	f003 030f 	and.w	r3, r3, #15
 800145a:	4a09      	ldr	r2, [pc, #36]	; (8001480 <HAL_RCC_ClockConfig+0x1bc>)
 800145c:	5cd3      	ldrb	r3, [r2, r3]
 800145e:	fa21 f303 	lsr.w	r3, r1, r3
 8001462:	4a08      	ldr	r2, [pc, #32]	; (8001484 <HAL_RCC_ClockConfig+0x1c0>)
 8001464:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8001466:	2000      	movs	r0, #0
 8001468:	f7ff f86e 	bl	8000548 <HAL_InitTick>

  return HAL_OK;
 800146c:	2300      	movs	r3, #0
}
 800146e:	4618      	mov	r0, r3
 8001470:	3710      	adds	r7, #16
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	40023c00 	.word	0x40023c00
 800147c:	40023800 	.word	0x40023800
 8001480:	08004768 	.word	0x08004768
 8001484:	20000008 	.word	0x20000008

08001488 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800148c:	4b03      	ldr	r3, [pc, #12]	; (800149c <HAL_RCC_GetHCLKFreq+0x14>)
 800148e:	681b      	ldr	r3, [r3, #0]
}
 8001490:	4618      	mov	r0, r3
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	20000008 	.word	0x20000008

080014a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80014a4:	f7ff fff0 	bl	8001488 <HAL_RCC_GetHCLKFreq>
 80014a8:	4601      	mov	r1, r0
 80014aa:	4b05      	ldr	r3, [pc, #20]	; (80014c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	0a9b      	lsrs	r3, r3, #10
 80014b0:	f003 0307 	and.w	r3, r3, #7
 80014b4:	4a03      	ldr	r2, [pc, #12]	; (80014c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80014b6:	5cd3      	ldrb	r3, [r2, r3]
 80014b8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80014bc:	4618      	mov	r0, r3
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	40023800 	.word	0x40023800
 80014c4:	08004778 	.word	0x08004778

080014c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80014cc:	f7ff ffdc 	bl	8001488 <HAL_RCC_GetHCLKFreq>
 80014d0:	4601      	mov	r1, r0
 80014d2:	4b05      	ldr	r3, [pc, #20]	; (80014e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	0b5b      	lsrs	r3, r3, #13
 80014d8:	f003 0307 	and.w	r3, r3, #7
 80014dc:	4a03      	ldr	r2, [pc, #12]	; (80014ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80014de:	5cd3      	ldrb	r3, [r2, r3]
 80014e0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	40023800 	.word	0x40023800
 80014ec:	08004778 	.word	0x08004778

080014f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014f2:	b087      	sub	sp, #28
 80014f4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80014f6:	2300      	movs	r3, #0
 80014f8:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 80014fa:	2300      	movs	r3, #0
 80014fc:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 80014fe:	2300      	movs	r3, #0
 8001500:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8001502:	2300      	movs	r3, #0
 8001504:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001506:	2300      	movs	r3, #0
 8001508:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800150a:	4bc6      	ldr	r3, [pc, #792]	; (8001824 <HAL_RCC_GetSysClockFreq+0x334>)
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	f003 030c 	and.w	r3, r3, #12
 8001512:	2b0c      	cmp	r3, #12
 8001514:	f200 817e 	bhi.w	8001814 <HAL_RCC_GetSysClockFreq+0x324>
 8001518:	a201      	add	r2, pc, #4	; (adr r2, 8001520 <HAL_RCC_GetSysClockFreq+0x30>)
 800151a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800151e:	bf00      	nop
 8001520:	08001555 	.word	0x08001555
 8001524:	08001815 	.word	0x08001815
 8001528:	08001815 	.word	0x08001815
 800152c:	08001815 	.word	0x08001815
 8001530:	0800155b 	.word	0x0800155b
 8001534:	08001815 	.word	0x08001815
 8001538:	08001815 	.word	0x08001815
 800153c:	08001815 	.word	0x08001815
 8001540:	08001561 	.word	0x08001561
 8001544:	08001815 	.word	0x08001815
 8001548:	08001815 	.word	0x08001815
 800154c:	08001815 	.word	0x08001815
 8001550:	080016bd 	.word	0x080016bd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001554:	4bb4      	ldr	r3, [pc, #720]	; (8001828 <HAL_RCC_GetSysClockFreq+0x338>)
 8001556:	613b      	str	r3, [r7, #16]
       break;
 8001558:	e15f      	b.n	800181a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800155a:	4bb4      	ldr	r3, [pc, #720]	; (800182c <HAL_RCC_GetSysClockFreq+0x33c>)
 800155c:	613b      	str	r3, [r7, #16]
      break;
 800155e:	e15c      	b.n	800181a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001560:	4bb0      	ldr	r3, [pc, #704]	; (8001824 <HAL_RCC_GetSysClockFreq+0x334>)
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001568:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800156a:	4bae      	ldr	r3, [pc, #696]	; (8001824 <HAL_RCC_GetSysClockFreq+0x334>)
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001572:	2b00      	cmp	r3, #0
 8001574:	d04a      	beq.n	800160c <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001576:	4bab      	ldr	r3, [pc, #684]	; (8001824 <HAL_RCC_GetSysClockFreq+0x334>)
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	099b      	lsrs	r3, r3, #6
 800157c:	f04f 0400 	mov.w	r4, #0
 8001580:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001584:	f04f 0200 	mov.w	r2, #0
 8001588:	ea03 0501 	and.w	r5, r3, r1
 800158c:	ea04 0602 	and.w	r6, r4, r2
 8001590:	4629      	mov	r1, r5
 8001592:	4632      	mov	r2, r6
 8001594:	f04f 0300 	mov.w	r3, #0
 8001598:	f04f 0400 	mov.w	r4, #0
 800159c:	0154      	lsls	r4, r2, #5
 800159e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80015a2:	014b      	lsls	r3, r1, #5
 80015a4:	4619      	mov	r1, r3
 80015a6:	4622      	mov	r2, r4
 80015a8:	1b49      	subs	r1, r1, r5
 80015aa:	eb62 0206 	sbc.w	r2, r2, r6
 80015ae:	f04f 0300 	mov.w	r3, #0
 80015b2:	f04f 0400 	mov.w	r4, #0
 80015b6:	0194      	lsls	r4, r2, #6
 80015b8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80015bc:	018b      	lsls	r3, r1, #6
 80015be:	1a5b      	subs	r3, r3, r1
 80015c0:	eb64 0402 	sbc.w	r4, r4, r2
 80015c4:	f04f 0100 	mov.w	r1, #0
 80015c8:	f04f 0200 	mov.w	r2, #0
 80015cc:	00e2      	lsls	r2, r4, #3
 80015ce:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80015d2:	00d9      	lsls	r1, r3, #3
 80015d4:	460b      	mov	r3, r1
 80015d6:	4614      	mov	r4, r2
 80015d8:	195b      	adds	r3, r3, r5
 80015da:	eb44 0406 	adc.w	r4, r4, r6
 80015de:	f04f 0100 	mov.w	r1, #0
 80015e2:	f04f 0200 	mov.w	r2, #0
 80015e6:	0262      	lsls	r2, r4, #9
 80015e8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80015ec:	0259      	lsls	r1, r3, #9
 80015ee:	460b      	mov	r3, r1
 80015f0:	4614      	mov	r4, r2
 80015f2:	4618      	mov	r0, r3
 80015f4:	4621      	mov	r1, r4
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	f04f 0400 	mov.w	r4, #0
 80015fc:	461a      	mov	r2, r3
 80015fe:	4623      	mov	r3, r4
 8001600:	f7fe fe00 	bl	8000204 <__aeabi_uldivmod>
 8001604:	4603      	mov	r3, r0
 8001606:	460c      	mov	r4, r1
 8001608:	617b      	str	r3, [r7, #20]
 800160a:	e049      	b.n	80016a0 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800160c:	4b85      	ldr	r3, [pc, #532]	; (8001824 <HAL_RCC_GetSysClockFreq+0x334>)
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	099b      	lsrs	r3, r3, #6
 8001612:	f04f 0400 	mov.w	r4, #0
 8001616:	f240 11ff 	movw	r1, #511	; 0x1ff
 800161a:	f04f 0200 	mov.w	r2, #0
 800161e:	ea03 0501 	and.w	r5, r3, r1
 8001622:	ea04 0602 	and.w	r6, r4, r2
 8001626:	4629      	mov	r1, r5
 8001628:	4632      	mov	r2, r6
 800162a:	f04f 0300 	mov.w	r3, #0
 800162e:	f04f 0400 	mov.w	r4, #0
 8001632:	0154      	lsls	r4, r2, #5
 8001634:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001638:	014b      	lsls	r3, r1, #5
 800163a:	4619      	mov	r1, r3
 800163c:	4622      	mov	r2, r4
 800163e:	1b49      	subs	r1, r1, r5
 8001640:	eb62 0206 	sbc.w	r2, r2, r6
 8001644:	f04f 0300 	mov.w	r3, #0
 8001648:	f04f 0400 	mov.w	r4, #0
 800164c:	0194      	lsls	r4, r2, #6
 800164e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001652:	018b      	lsls	r3, r1, #6
 8001654:	1a5b      	subs	r3, r3, r1
 8001656:	eb64 0402 	sbc.w	r4, r4, r2
 800165a:	f04f 0100 	mov.w	r1, #0
 800165e:	f04f 0200 	mov.w	r2, #0
 8001662:	00e2      	lsls	r2, r4, #3
 8001664:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001668:	00d9      	lsls	r1, r3, #3
 800166a:	460b      	mov	r3, r1
 800166c:	4614      	mov	r4, r2
 800166e:	195b      	adds	r3, r3, r5
 8001670:	eb44 0406 	adc.w	r4, r4, r6
 8001674:	f04f 0100 	mov.w	r1, #0
 8001678:	f04f 0200 	mov.w	r2, #0
 800167c:	02a2      	lsls	r2, r4, #10
 800167e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001682:	0299      	lsls	r1, r3, #10
 8001684:	460b      	mov	r3, r1
 8001686:	4614      	mov	r4, r2
 8001688:	4618      	mov	r0, r3
 800168a:	4621      	mov	r1, r4
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	f04f 0400 	mov.w	r4, #0
 8001692:	461a      	mov	r2, r3
 8001694:	4623      	mov	r3, r4
 8001696:	f7fe fdb5 	bl	8000204 <__aeabi_uldivmod>
 800169a:	4603      	mov	r3, r0
 800169c:	460c      	mov	r4, r1
 800169e:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80016a0:	4b60      	ldr	r3, [pc, #384]	; (8001824 <HAL_RCC_GetSysClockFreq+0x334>)
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	0c1b      	lsrs	r3, r3, #16
 80016a6:	f003 0303 	and.w	r3, r3, #3
 80016aa:	3301      	adds	r3, #1
 80016ac:	005b      	lsls	r3, r3, #1
 80016ae:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80016b0:	697a      	ldr	r2, [r7, #20]
 80016b2:	68bb      	ldr	r3, [r7, #8]
 80016b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80016b8:	613b      	str	r3, [r7, #16]
      break;
 80016ba:	e0ae      	b.n	800181a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80016bc:	4b59      	ldr	r3, [pc, #356]	; (8001824 <HAL_RCC_GetSysClockFreq+0x334>)
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80016c4:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80016c6:	4b57      	ldr	r3, [pc, #348]	; (8001824 <HAL_RCC_GetSysClockFreq+0x334>)
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d04a      	beq.n	8001768 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016d2:	4b54      	ldr	r3, [pc, #336]	; (8001824 <HAL_RCC_GetSysClockFreq+0x334>)
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	099b      	lsrs	r3, r3, #6
 80016d8:	f04f 0400 	mov.w	r4, #0
 80016dc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80016e0:	f04f 0200 	mov.w	r2, #0
 80016e4:	ea03 0501 	and.w	r5, r3, r1
 80016e8:	ea04 0602 	and.w	r6, r4, r2
 80016ec:	4629      	mov	r1, r5
 80016ee:	4632      	mov	r2, r6
 80016f0:	f04f 0300 	mov.w	r3, #0
 80016f4:	f04f 0400 	mov.w	r4, #0
 80016f8:	0154      	lsls	r4, r2, #5
 80016fa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80016fe:	014b      	lsls	r3, r1, #5
 8001700:	4619      	mov	r1, r3
 8001702:	4622      	mov	r2, r4
 8001704:	1b49      	subs	r1, r1, r5
 8001706:	eb62 0206 	sbc.w	r2, r2, r6
 800170a:	f04f 0300 	mov.w	r3, #0
 800170e:	f04f 0400 	mov.w	r4, #0
 8001712:	0194      	lsls	r4, r2, #6
 8001714:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001718:	018b      	lsls	r3, r1, #6
 800171a:	1a5b      	subs	r3, r3, r1
 800171c:	eb64 0402 	sbc.w	r4, r4, r2
 8001720:	f04f 0100 	mov.w	r1, #0
 8001724:	f04f 0200 	mov.w	r2, #0
 8001728:	00e2      	lsls	r2, r4, #3
 800172a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800172e:	00d9      	lsls	r1, r3, #3
 8001730:	460b      	mov	r3, r1
 8001732:	4614      	mov	r4, r2
 8001734:	195b      	adds	r3, r3, r5
 8001736:	eb44 0406 	adc.w	r4, r4, r6
 800173a:	f04f 0100 	mov.w	r1, #0
 800173e:	f04f 0200 	mov.w	r2, #0
 8001742:	0262      	lsls	r2, r4, #9
 8001744:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001748:	0259      	lsls	r1, r3, #9
 800174a:	460b      	mov	r3, r1
 800174c:	4614      	mov	r4, r2
 800174e:	4618      	mov	r0, r3
 8001750:	4621      	mov	r1, r4
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	f04f 0400 	mov.w	r4, #0
 8001758:	461a      	mov	r2, r3
 800175a:	4623      	mov	r3, r4
 800175c:	f7fe fd52 	bl	8000204 <__aeabi_uldivmod>
 8001760:	4603      	mov	r3, r0
 8001762:	460c      	mov	r4, r1
 8001764:	617b      	str	r3, [r7, #20]
 8001766:	e049      	b.n	80017fc <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001768:	4b2e      	ldr	r3, [pc, #184]	; (8001824 <HAL_RCC_GetSysClockFreq+0x334>)
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	099b      	lsrs	r3, r3, #6
 800176e:	f04f 0400 	mov.w	r4, #0
 8001772:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001776:	f04f 0200 	mov.w	r2, #0
 800177a:	ea03 0501 	and.w	r5, r3, r1
 800177e:	ea04 0602 	and.w	r6, r4, r2
 8001782:	4629      	mov	r1, r5
 8001784:	4632      	mov	r2, r6
 8001786:	f04f 0300 	mov.w	r3, #0
 800178a:	f04f 0400 	mov.w	r4, #0
 800178e:	0154      	lsls	r4, r2, #5
 8001790:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001794:	014b      	lsls	r3, r1, #5
 8001796:	4619      	mov	r1, r3
 8001798:	4622      	mov	r2, r4
 800179a:	1b49      	subs	r1, r1, r5
 800179c:	eb62 0206 	sbc.w	r2, r2, r6
 80017a0:	f04f 0300 	mov.w	r3, #0
 80017a4:	f04f 0400 	mov.w	r4, #0
 80017a8:	0194      	lsls	r4, r2, #6
 80017aa:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80017ae:	018b      	lsls	r3, r1, #6
 80017b0:	1a5b      	subs	r3, r3, r1
 80017b2:	eb64 0402 	sbc.w	r4, r4, r2
 80017b6:	f04f 0100 	mov.w	r1, #0
 80017ba:	f04f 0200 	mov.w	r2, #0
 80017be:	00e2      	lsls	r2, r4, #3
 80017c0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80017c4:	00d9      	lsls	r1, r3, #3
 80017c6:	460b      	mov	r3, r1
 80017c8:	4614      	mov	r4, r2
 80017ca:	195b      	adds	r3, r3, r5
 80017cc:	eb44 0406 	adc.w	r4, r4, r6
 80017d0:	f04f 0100 	mov.w	r1, #0
 80017d4:	f04f 0200 	mov.w	r2, #0
 80017d8:	02a2      	lsls	r2, r4, #10
 80017da:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80017de:	0299      	lsls	r1, r3, #10
 80017e0:	460b      	mov	r3, r1
 80017e2:	4614      	mov	r4, r2
 80017e4:	4618      	mov	r0, r3
 80017e6:	4621      	mov	r1, r4
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	f04f 0400 	mov.w	r4, #0
 80017ee:	461a      	mov	r2, r3
 80017f0:	4623      	mov	r3, r4
 80017f2:	f7fe fd07 	bl	8000204 <__aeabi_uldivmod>
 80017f6:	4603      	mov	r3, r0
 80017f8:	460c      	mov	r4, r1
 80017fa:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80017fc:	4b09      	ldr	r3, [pc, #36]	; (8001824 <HAL_RCC_GetSysClockFreq+0x334>)
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	0f1b      	lsrs	r3, r3, #28
 8001802:	f003 0307 	and.w	r3, r3, #7
 8001806:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8001808:	697a      	ldr	r2, [r7, #20]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001810:	613b      	str	r3, [r7, #16]
      break;
 8001812:	e002      	b.n	800181a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001814:	4b04      	ldr	r3, [pc, #16]	; (8001828 <HAL_RCC_GetSysClockFreq+0x338>)
 8001816:	613b      	str	r3, [r7, #16]
      break;
 8001818:	bf00      	nop
    }
  }
  return sysclockfreq;
 800181a:	693b      	ldr	r3, [r7, #16]
}
 800181c:	4618      	mov	r0, r3
 800181e:	371c      	adds	r7, #28
 8001820:	46bd      	mov	sp, r7
 8001822:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001824:	40023800 	.word	0x40023800
 8001828:	00f42400 	.word	0x00f42400
 800182c:	007a1200 	.word	0x007a1200

08001830 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b086      	sub	sp, #24
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001838:	2300      	movs	r3, #0
 800183a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 0301 	and.w	r3, r3, #1
 8001844:	2b00      	cmp	r3, #0
 8001846:	f000 8083 	beq.w	8001950 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800184a:	4b95      	ldr	r3, [pc, #596]	; (8001aa0 <HAL_RCC_OscConfig+0x270>)
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	f003 030c 	and.w	r3, r3, #12
 8001852:	2b04      	cmp	r3, #4
 8001854:	d019      	beq.n	800188a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001856:	4b92      	ldr	r3, [pc, #584]	; (8001aa0 <HAL_RCC_OscConfig+0x270>)
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800185e:	2b08      	cmp	r3, #8
 8001860:	d106      	bne.n	8001870 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001862:	4b8f      	ldr	r3, [pc, #572]	; (8001aa0 <HAL_RCC_OscConfig+0x270>)
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800186a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800186e:	d00c      	beq.n	800188a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001870:	4b8b      	ldr	r3, [pc, #556]	; (8001aa0 <HAL_RCC_OscConfig+0x270>)
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001878:	2b0c      	cmp	r3, #12
 800187a:	d112      	bne.n	80018a2 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800187c:	4b88      	ldr	r3, [pc, #544]	; (8001aa0 <HAL_RCC_OscConfig+0x270>)
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001884:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001888:	d10b      	bne.n	80018a2 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800188a:	4b85      	ldr	r3, [pc, #532]	; (8001aa0 <HAL_RCC_OscConfig+0x270>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d05b      	beq.n	800194e <HAL_RCC_OscConfig+0x11e>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d157      	bne.n	800194e <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e216      	b.n	8001cd0 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018aa:	d106      	bne.n	80018ba <HAL_RCC_OscConfig+0x8a>
 80018ac:	4b7c      	ldr	r3, [pc, #496]	; (8001aa0 <HAL_RCC_OscConfig+0x270>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a7b      	ldr	r2, [pc, #492]	; (8001aa0 <HAL_RCC_OscConfig+0x270>)
 80018b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018b6:	6013      	str	r3, [r2, #0]
 80018b8:	e01d      	b.n	80018f6 <HAL_RCC_OscConfig+0xc6>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018c2:	d10c      	bne.n	80018de <HAL_RCC_OscConfig+0xae>
 80018c4:	4b76      	ldr	r3, [pc, #472]	; (8001aa0 <HAL_RCC_OscConfig+0x270>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a75      	ldr	r2, [pc, #468]	; (8001aa0 <HAL_RCC_OscConfig+0x270>)
 80018ca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018ce:	6013      	str	r3, [r2, #0]
 80018d0:	4b73      	ldr	r3, [pc, #460]	; (8001aa0 <HAL_RCC_OscConfig+0x270>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a72      	ldr	r2, [pc, #456]	; (8001aa0 <HAL_RCC_OscConfig+0x270>)
 80018d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018da:	6013      	str	r3, [r2, #0]
 80018dc:	e00b      	b.n	80018f6 <HAL_RCC_OscConfig+0xc6>
 80018de:	4b70      	ldr	r3, [pc, #448]	; (8001aa0 <HAL_RCC_OscConfig+0x270>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a6f      	ldr	r2, [pc, #444]	; (8001aa0 <HAL_RCC_OscConfig+0x270>)
 80018e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018e8:	6013      	str	r3, [r2, #0]
 80018ea:	4b6d      	ldr	r3, [pc, #436]	; (8001aa0 <HAL_RCC_OscConfig+0x270>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a6c      	ldr	r2, [pc, #432]	; (8001aa0 <HAL_RCC_OscConfig+0x270>)
 80018f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018f4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d013      	beq.n	8001926 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018fe:	f7fe fe67 	bl	80005d0 <HAL_GetTick>
 8001902:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001904:	e008      	b.n	8001918 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001906:	f7fe fe63 	bl	80005d0 <HAL_GetTick>
 800190a:	4602      	mov	r2, r0
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	1ad3      	subs	r3, r2, r3
 8001910:	2b64      	cmp	r3, #100	; 0x64
 8001912:	d901      	bls.n	8001918 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001914:	2303      	movs	r3, #3
 8001916:	e1db      	b.n	8001cd0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001918:	4b61      	ldr	r3, [pc, #388]	; (8001aa0 <HAL_RCC_OscConfig+0x270>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001920:	2b00      	cmp	r3, #0
 8001922:	d0f0      	beq.n	8001906 <HAL_RCC_OscConfig+0xd6>
 8001924:	e014      	b.n	8001950 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001926:	f7fe fe53 	bl	80005d0 <HAL_GetTick>
 800192a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800192c:	e008      	b.n	8001940 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800192e:	f7fe fe4f 	bl	80005d0 <HAL_GetTick>
 8001932:	4602      	mov	r2, r0
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	2b64      	cmp	r3, #100	; 0x64
 800193a:	d901      	bls.n	8001940 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 800193c:	2303      	movs	r3, #3
 800193e:	e1c7      	b.n	8001cd0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001940:	4b57      	ldr	r3, [pc, #348]	; (8001aa0 <HAL_RCC_OscConfig+0x270>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001948:	2b00      	cmp	r3, #0
 800194a:	d1f0      	bne.n	800192e <HAL_RCC_OscConfig+0xfe>
 800194c:	e000      	b.n	8001950 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800194e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 0302 	and.w	r3, r3, #2
 8001958:	2b00      	cmp	r3, #0
 800195a:	d06f      	beq.n	8001a3c <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800195c:	4b50      	ldr	r3, [pc, #320]	; (8001aa0 <HAL_RCC_OscConfig+0x270>)
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	f003 030c 	and.w	r3, r3, #12
 8001964:	2b00      	cmp	r3, #0
 8001966:	d017      	beq.n	8001998 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001968:	4b4d      	ldr	r3, [pc, #308]	; (8001aa0 <HAL_RCC_OscConfig+0x270>)
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001970:	2b08      	cmp	r3, #8
 8001972:	d105      	bne.n	8001980 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001974:	4b4a      	ldr	r3, [pc, #296]	; (8001aa0 <HAL_RCC_OscConfig+0x270>)
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800197c:	2b00      	cmp	r3, #0
 800197e:	d00b      	beq.n	8001998 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001980:	4b47      	ldr	r3, [pc, #284]	; (8001aa0 <HAL_RCC_OscConfig+0x270>)
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001988:	2b0c      	cmp	r3, #12
 800198a:	d11c      	bne.n	80019c6 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800198c:	4b44      	ldr	r3, [pc, #272]	; (8001aa0 <HAL_RCC_OscConfig+0x270>)
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001994:	2b00      	cmp	r3, #0
 8001996:	d116      	bne.n	80019c6 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001998:	4b41      	ldr	r3, [pc, #260]	; (8001aa0 <HAL_RCC_OscConfig+0x270>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 0302 	and.w	r3, r3, #2
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d005      	beq.n	80019b0 <HAL_RCC_OscConfig+0x180>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d001      	beq.n	80019b0 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e18f      	b.n	8001cd0 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019b0:	4b3b      	ldr	r3, [pc, #236]	; (8001aa0 <HAL_RCC_OscConfig+0x270>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	691b      	ldr	r3, [r3, #16]
 80019bc:	00db      	lsls	r3, r3, #3
 80019be:	4938      	ldr	r1, [pc, #224]	; (8001aa0 <HAL_RCC_OscConfig+0x270>)
 80019c0:	4313      	orrs	r3, r2
 80019c2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019c4:	e03a      	b.n	8001a3c <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	68db      	ldr	r3, [r3, #12]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d020      	beq.n	8001a10 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019ce:	4b35      	ldr	r3, [pc, #212]	; (8001aa4 <HAL_RCC_OscConfig+0x274>)
 80019d0:	2201      	movs	r2, #1
 80019d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019d4:	f7fe fdfc 	bl	80005d0 <HAL_GetTick>
 80019d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019da:	e008      	b.n	80019ee <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019dc:	f7fe fdf8 	bl	80005d0 <HAL_GetTick>
 80019e0:	4602      	mov	r2, r0
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d901      	bls.n	80019ee <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e170      	b.n	8001cd0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019ee:	4b2c      	ldr	r3, [pc, #176]	; (8001aa0 <HAL_RCC_OscConfig+0x270>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0302 	and.w	r3, r3, #2
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d0f0      	beq.n	80019dc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019fa:	4b29      	ldr	r3, [pc, #164]	; (8001aa0 <HAL_RCC_OscConfig+0x270>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	691b      	ldr	r3, [r3, #16]
 8001a06:	00db      	lsls	r3, r3, #3
 8001a08:	4925      	ldr	r1, [pc, #148]	; (8001aa0 <HAL_RCC_OscConfig+0x270>)
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	600b      	str	r3, [r1, #0]
 8001a0e:	e015      	b.n	8001a3c <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a10:	4b24      	ldr	r3, [pc, #144]	; (8001aa4 <HAL_RCC_OscConfig+0x274>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a16:	f7fe fddb 	bl	80005d0 <HAL_GetTick>
 8001a1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a1c:	e008      	b.n	8001a30 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a1e:	f7fe fdd7 	bl	80005d0 <HAL_GetTick>
 8001a22:	4602      	mov	r2, r0
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	2b02      	cmp	r3, #2
 8001a2a:	d901      	bls.n	8001a30 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001a2c:	2303      	movs	r3, #3
 8001a2e:	e14f      	b.n	8001cd0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a30:	4b1b      	ldr	r3, [pc, #108]	; (8001aa0 <HAL_RCC_OscConfig+0x270>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 0302 	and.w	r3, r3, #2
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d1f0      	bne.n	8001a1e <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 0308 	and.w	r3, r3, #8
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d037      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	695b      	ldr	r3, [r3, #20]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d016      	beq.n	8001a7e <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a50:	4b15      	ldr	r3, [pc, #84]	; (8001aa8 <HAL_RCC_OscConfig+0x278>)
 8001a52:	2201      	movs	r2, #1
 8001a54:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a56:	f7fe fdbb 	bl	80005d0 <HAL_GetTick>
 8001a5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a5c:	e008      	b.n	8001a70 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a5e:	f7fe fdb7 	bl	80005d0 <HAL_GetTick>
 8001a62:	4602      	mov	r2, r0
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	2b02      	cmp	r3, #2
 8001a6a:	d901      	bls.n	8001a70 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	e12f      	b.n	8001cd0 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a70:	4b0b      	ldr	r3, [pc, #44]	; (8001aa0 <HAL_RCC_OscConfig+0x270>)
 8001a72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a74:	f003 0302 	and.w	r3, r3, #2
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d0f0      	beq.n	8001a5e <HAL_RCC_OscConfig+0x22e>
 8001a7c:	e01c      	b.n	8001ab8 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a7e:	4b0a      	ldr	r3, [pc, #40]	; (8001aa8 <HAL_RCC_OscConfig+0x278>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a84:	f7fe fda4 	bl	80005d0 <HAL_GetTick>
 8001a88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a8a:	e00f      	b.n	8001aac <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a8c:	f7fe fda0 	bl	80005d0 <HAL_GetTick>
 8001a90:	4602      	mov	r2, r0
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	d908      	bls.n	8001aac <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	e118      	b.n	8001cd0 <HAL_RCC_OscConfig+0x4a0>
 8001a9e:	bf00      	nop
 8001aa0:	40023800 	.word	0x40023800
 8001aa4:	42470000 	.word	0x42470000
 8001aa8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001aac:	4b8a      	ldr	r3, [pc, #552]	; (8001cd8 <HAL_RCC_OscConfig+0x4a8>)
 8001aae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ab0:	f003 0302 	and.w	r3, r3, #2
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d1e9      	bne.n	8001a8c <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 0304 	and.w	r3, r3, #4
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	f000 8097 	beq.w	8001bf4 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001aca:	4b83      	ldr	r3, [pc, #524]	; (8001cd8 <HAL_RCC_OscConfig+0x4a8>)
 8001acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ace:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d10f      	bne.n	8001af6 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	60fb      	str	r3, [r7, #12]
 8001ada:	4b7f      	ldr	r3, [pc, #508]	; (8001cd8 <HAL_RCC_OscConfig+0x4a8>)
 8001adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ade:	4a7e      	ldr	r2, [pc, #504]	; (8001cd8 <HAL_RCC_OscConfig+0x4a8>)
 8001ae0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ae4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ae6:	4b7c      	ldr	r3, [pc, #496]	; (8001cd8 <HAL_RCC_OscConfig+0x4a8>)
 8001ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aee:	60fb      	str	r3, [r7, #12]
 8001af0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001af2:	2301      	movs	r3, #1
 8001af4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001af6:	4b79      	ldr	r3, [pc, #484]	; (8001cdc <HAL_RCC_OscConfig+0x4ac>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d118      	bne.n	8001b34 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b02:	4b76      	ldr	r3, [pc, #472]	; (8001cdc <HAL_RCC_OscConfig+0x4ac>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a75      	ldr	r2, [pc, #468]	; (8001cdc <HAL_RCC_OscConfig+0x4ac>)
 8001b08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b0e:	f7fe fd5f 	bl	80005d0 <HAL_GetTick>
 8001b12:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b14:	e008      	b.n	8001b28 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b16:	f7fe fd5b 	bl	80005d0 <HAL_GetTick>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d901      	bls.n	8001b28 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001b24:	2303      	movs	r3, #3
 8001b26:	e0d3      	b.n	8001cd0 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b28:	4b6c      	ldr	r3, [pc, #432]	; (8001cdc <HAL_RCC_OscConfig+0x4ac>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d0f0      	beq.n	8001b16 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d106      	bne.n	8001b4a <HAL_RCC_OscConfig+0x31a>
 8001b3c:	4b66      	ldr	r3, [pc, #408]	; (8001cd8 <HAL_RCC_OscConfig+0x4a8>)
 8001b3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b40:	4a65      	ldr	r2, [pc, #404]	; (8001cd8 <HAL_RCC_OscConfig+0x4a8>)
 8001b42:	f043 0301 	orr.w	r3, r3, #1
 8001b46:	6713      	str	r3, [r2, #112]	; 0x70
 8001b48:	e01c      	b.n	8001b84 <HAL_RCC_OscConfig+0x354>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	2b05      	cmp	r3, #5
 8001b50:	d10c      	bne.n	8001b6c <HAL_RCC_OscConfig+0x33c>
 8001b52:	4b61      	ldr	r3, [pc, #388]	; (8001cd8 <HAL_RCC_OscConfig+0x4a8>)
 8001b54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b56:	4a60      	ldr	r2, [pc, #384]	; (8001cd8 <HAL_RCC_OscConfig+0x4a8>)
 8001b58:	f043 0304 	orr.w	r3, r3, #4
 8001b5c:	6713      	str	r3, [r2, #112]	; 0x70
 8001b5e:	4b5e      	ldr	r3, [pc, #376]	; (8001cd8 <HAL_RCC_OscConfig+0x4a8>)
 8001b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b62:	4a5d      	ldr	r2, [pc, #372]	; (8001cd8 <HAL_RCC_OscConfig+0x4a8>)
 8001b64:	f043 0301 	orr.w	r3, r3, #1
 8001b68:	6713      	str	r3, [r2, #112]	; 0x70
 8001b6a:	e00b      	b.n	8001b84 <HAL_RCC_OscConfig+0x354>
 8001b6c:	4b5a      	ldr	r3, [pc, #360]	; (8001cd8 <HAL_RCC_OscConfig+0x4a8>)
 8001b6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b70:	4a59      	ldr	r2, [pc, #356]	; (8001cd8 <HAL_RCC_OscConfig+0x4a8>)
 8001b72:	f023 0301 	bic.w	r3, r3, #1
 8001b76:	6713      	str	r3, [r2, #112]	; 0x70
 8001b78:	4b57      	ldr	r3, [pc, #348]	; (8001cd8 <HAL_RCC_OscConfig+0x4a8>)
 8001b7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b7c:	4a56      	ldr	r2, [pc, #344]	; (8001cd8 <HAL_RCC_OscConfig+0x4a8>)
 8001b7e:	f023 0304 	bic.w	r3, r3, #4
 8001b82:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d015      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b8c:	f7fe fd20 	bl	80005d0 <HAL_GetTick>
 8001b90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b92:	e00a      	b.n	8001baa <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b94:	f7fe fd1c 	bl	80005d0 <HAL_GetTick>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d901      	bls.n	8001baa <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e092      	b.n	8001cd0 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001baa:	4b4b      	ldr	r3, [pc, #300]	; (8001cd8 <HAL_RCC_OscConfig+0x4a8>)
 8001bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bae:	f003 0302 	and.w	r3, r3, #2
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d0ee      	beq.n	8001b94 <HAL_RCC_OscConfig+0x364>
 8001bb6:	e014      	b.n	8001be2 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bb8:	f7fe fd0a 	bl	80005d0 <HAL_GetTick>
 8001bbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bbe:	e00a      	b.n	8001bd6 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bc0:	f7fe fd06 	bl	80005d0 <HAL_GetTick>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d901      	bls.n	8001bd6 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e07c      	b.n	8001cd0 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bd6:	4b40      	ldr	r3, [pc, #256]	; (8001cd8 <HAL_RCC_OscConfig+0x4a8>)
 8001bd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bda:	f003 0302 	and.w	r3, r3, #2
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d1ee      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001be2:	7dfb      	ldrb	r3, [r7, #23]
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d105      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001be8:	4b3b      	ldr	r3, [pc, #236]	; (8001cd8 <HAL_RCC_OscConfig+0x4a8>)
 8001bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bec:	4a3a      	ldr	r2, [pc, #232]	; (8001cd8 <HAL_RCC_OscConfig+0x4a8>)
 8001bee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bf2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	699b      	ldr	r3, [r3, #24]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d068      	beq.n	8001cce <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001bfc:	4b36      	ldr	r3, [pc, #216]	; (8001cd8 <HAL_RCC_OscConfig+0x4a8>)
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	f003 030c 	and.w	r3, r3, #12
 8001c04:	2b08      	cmp	r3, #8
 8001c06:	d060      	beq.n	8001cca <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	699b      	ldr	r3, [r3, #24]
 8001c0c:	2b02      	cmp	r3, #2
 8001c0e:	d145      	bne.n	8001c9c <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c10:	4b33      	ldr	r3, [pc, #204]	; (8001ce0 <HAL_RCC_OscConfig+0x4b0>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c16:	f7fe fcdb 	bl	80005d0 <HAL_GetTick>
 8001c1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c1c:	e008      	b.n	8001c30 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c1e:	f7fe fcd7 	bl	80005d0 <HAL_GetTick>
 8001c22:	4602      	mov	r2, r0
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	2b02      	cmp	r3, #2
 8001c2a:	d901      	bls.n	8001c30 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	e04f      	b.n	8001cd0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c30:	4b29      	ldr	r3, [pc, #164]	; (8001cd8 <HAL_RCC_OscConfig+0x4a8>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d1f0      	bne.n	8001c1e <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	69da      	ldr	r2, [r3, #28]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6a1b      	ldr	r3, [r3, #32]
 8001c44:	431a      	orrs	r2, r3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c4a:	019b      	lsls	r3, r3, #6
 8001c4c:	431a      	orrs	r2, r3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c52:	085b      	lsrs	r3, r3, #1
 8001c54:	3b01      	subs	r3, #1
 8001c56:	041b      	lsls	r3, r3, #16
 8001c58:	431a      	orrs	r2, r3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c5e:	061b      	lsls	r3, r3, #24
 8001c60:	431a      	orrs	r2, r3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c66:	071b      	lsls	r3, r3, #28
 8001c68:	491b      	ldr	r1, [pc, #108]	; (8001cd8 <HAL_RCC_OscConfig+0x4a8>)
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c6e:	4b1c      	ldr	r3, [pc, #112]	; (8001ce0 <HAL_RCC_OscConfig+0x4b0>)
 8001c70:	2201      	movs	r2, #1
 8001c72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c74:	f7fe fcac 	bl	80005d0 <HAL_GetTick>
 8001c78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c7a:	e008      	b.n	8001c8e <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c7c:	f7fe fca8 	bl	80005d0 <HAL_GetTick>
 8001c80:	4602      	mov	r2, r0
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d901      	bls.n	8001c8e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e020      	b.n	8001cd0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c8e:	4b12      	ldr	r3, [pc, #72]	; (8001cd8 <HAL_RCC_OscConfig+0x4a8>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d0f0      	beq.n	8001c7c <HAL_RCC_OscConfig+0x44c>
 8001c9a:	e018      	b.n	8001cce <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c9c:	4b10      	ldr	r3, [pc, #64]	; (8001ce0 <HAL_RCC_OscConfig+0x4b0>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca2:	f7fe fc95 	bl	80005d0 <HAL_GetTick>
 8001ca6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ca8:	e008      	b.n	8001cbc <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001caa:	f7fe fc91 	bl	80005d0 <HAL_GetTick>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d901      	bls.n	8001cbc <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	e009      	b.n	8001cd0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cbc:	4b06      	ldr	r3, [pc, #24]	; (8001cd8 <HAL_RCC_OscConfig+0x4a8>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d1f0      	bne.n	8001caa <HAL_RCC_OscConfig+0x47a>
 8001cc8:	e001      	b.n	8001cce <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e000      	b.n	8001cd0 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8001cce:	2300      	movs	r3, #0
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3718      	adds	r7, #24
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	40023800 	.word	0x40023800
 8001cdc:	40007000 	.word	0x40007000
 8001ce0:	42470060 	.word	0x42470060

08001ce4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d101      	bne.n	8001cf6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e056      	b.n	8001da4 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d106      	bne.n	8001d16 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	f001 f9b9 	bl	8003088 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2202      	movs	r2, #2
 8001d1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d2c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	685a      	ldr	r2, [r3, #4]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	431a      	orrs	r2, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	431a      	orrs	r2, r3
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	691b      	ldr	r3, [r3, #16]
 8001d42:	431a      	orrs	r2, r3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	695b      	ldr	r3, [r3, #20]
 8001d48:	431a      	orrs	r2, r3
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	699b      	ldr	r3, [r3, #24]
 8001d4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d52:	431a      	orrs	r2, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	69db      	ldr	r3, [r3, #28]
 8001d58:	431a      	orrs	r2, r3
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6a1b      	ldr	r3, [r3, #32]
 8001d5e:	ea42 0103 	orr.w	r1, r2, r3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	430a      	orrs	r2, r1
 8001d6c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	699b      	ldr	r3, [r3, #24]
 8001d72:	0c1b      	lsrs	r3, r3, #16
 8001d74:	f003 0104 	and.w	r1, r3, #4
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	430a      	orrs	r2, r1
 8001d82:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	69da      	ldr	r2, [r3, #28]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d92:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2200      	movs	r2, #0
 8001d98:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001da2:	2300      	movs	r3, #0
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3708      	adds	r7, #8
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}

08001dac <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b086      	sub	sp, #24
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	60f8      	str	r0, [r7, #12]
 8001db4:	60b9      	str	r1, [r7, #8]
 8001db6:	4613      	mov	r3, r2
 8001db8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d101      	bne.n	8001dcc <HAL_SPI_Transmit_DMA+0x20>
 8001dc8:	2302      	movs	r3, #2
 8001dca:	e093      	b.n	8001ef4 <HAL_SPI_Transmit_DMA+0x148>
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	2201      	movs	r2, #1
 8001dd0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d002      	beq.n	8001de6 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8001de0:	2302      	movs	r3, #2
 8001de2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001de4:	e081      	b.n	8001eea <HAL_SPI_Transmit_DMA+0x13e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d002      	beq.n	8001df2 <HAL_SPI_Transmit_DMA+0x46>
 8001dec:	88fb      	ldrh	r3, [r7, #6]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d102      	bne.n	8001df8 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001df6:	e078      	b.n	8001eea <HAL_SPI_Transmit_DMA+0x13e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	2203      	movs	r2, #3
 8001dfc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2200      	movs	r2, #0
 8001e04:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	68ba      	ldr	r2, [r7, #8]
 8001e0a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	88fa      	ldrh	r2, [r7, #6]
 8001e10:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	88fa      	ldrh	r2, [r7, #6]
 8001e16:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2200      	movs	r2, #0
 8001e22:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2200      	movs	r2, #0
 8001e28:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	2200      	movs	r2, #0
 8001e34:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e3e:	d107      	bne.n	8001e50 <HAL_SPI_Transmit_DMA+0xa4>
  {
    SPI_1LINE_TX(hspi);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001e4e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e54:	4a29      	ldr	r2, [pc, #164]	; (8001efc <HAL_SPI_Transmit_DMA+0x150>)
 8001e56:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e5c:	4a28      	ldr	r2, [pc, #160]	; (8001f00 <HAL_SPI_Transmit_DMA+0x154>)
 8001e5e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e64:	4a27      	ldr	r2, [pc, #156]	; (8001f04 <HAL_SPI_Transmit_DMA+0x158>)
 8001e66:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount))
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e78:	4619      	mov	r1, r3
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	330c      	adds	r3, #12
 8001e80:	461a      	mov	r2, r3
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e86:	b29b      	uxth	r3, r3
 8001e88:	f7fe fd90 	bl	80009ac <HAL_DMA_Start_IT>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d00c      	beq.n	8001eac <HAL_SPI_Transmit_DMA+0x100>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e96:	f043 0210 	orr.w	r2, r3, #16
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8001eaa:	e01e      	b.n	8001eea <HAL_SPI_Transmit_DMA+0x13e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eb6:	2b40      	cmp	r3, #64	; 0x40
 8001eb8:	d007      	beq.n	8001eca <HAL_SPI_Transmit_DMA+0x11e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ec8:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	685a      	ldr	r2, [r3, #4]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f042 0220 	orr.w	r2, r2, #32
 8001ed8:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	685a      	ldr	r2, [r3, #4]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f042 0202 	orr.w	r2, r2, #2
 8001ee8:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	2200      	movs	r2, #0
 8001eee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001ef2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3718      	adds	r7, #24
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	08001fed 	.word	0x08001fed
 8001f00:	08001f45 	.word	0x08001f45
 8001f04:	08002009 	.word	0x08002009

08001f08 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8001f10:	bf00      	nop
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8001f24:	bf00      	nop
 8001f26:	370c      	adds	r7, #12
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr

08001f30 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8001f38:	bf00      	nop
 8001f3a:	370c      	adds	r7, #12
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr

08001f44 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b086      	sub	sp, #24
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f50:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001f52:	f7fe fb3d 	bl	80005d0 <HAL_GetTick>
 8001f56:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f66:	d03b      	beq.n	8001fe0 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	685a      	ldr	r2, [r3, #4]
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f022 0220 	bic.w	r2, r2, #32
 8001f76:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	685a      	ldr	r2, [r3, #4]
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f022 0202 	bic.w	r2, r2, #2
 8001f86:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8001f88:	693a      	ldr	r2, [r7, #16]
 8001f8a:	2164      	movs	r1, #100	; 0x64
 8001f8c:	6978      	ldr	r0, [r7, #20]
 8001f8e:	f000 f8c5 	bl	800211c <SPI_EndRxTxTransaction>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d005      	beq.n	8001fa4 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f9c:	f043 0220 	orr.w	r2, r3, #32
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d10a      	bne.n	8001fc2 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001fac:	2300      	movs	r3, #0
 8001fae:	60fb      	str	r3, [r7, #12]
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	68db      	ldr	r3, [r3, #12]
 8001fb6:	60fb      	str	r3, [r7, #12]
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	60fb      	str	r3, [r7, #12]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d003      	beq.n	8001fe0 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8001fd8:	6978      	ldr	r0, [r7, #20]
 8001fda:	f7ff ffa9 	bl	8001f30 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8001fde:	e002      	b.n	8001fe6 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8001fe0:	6978      	ldr	r0, [r7, #20]
 8001fe2:	f7ff ff91 	bl	8001f08 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8001fe6:	3718      	adds	r7, #24
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}

08001fec <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ff8:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8001ffa:	68f8      	ldr	r0, [r7, #12]
 8001ffc:	f7ff ff8e 	bl	8001f1c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002000:	bf00      	nop
 8002002:	3710      	adds	r7, #16
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}

08002008 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b084      	sub	sp, #16
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002014:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	685a      	ldr	r2, [r3, #4]
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f022 0203 	bic.w	r2, r2, #3
 8002024:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800202a:	f043 0210 	orr.w	r2, r3, #16
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2201      	movs	r2, #1
 8002036:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800203a:	68f8      	ldr	r0, [r7, #12]
 800203c:	f7ff ff78 	bl	8001f30 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002040:	bf00      	nop
 8002042:	3710      	adds	r7, #16
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}

08002048 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0
 800204e:	60f8      	str	r0, [r7, #12]
 8002050:	60b9      	str	r1, [r7, #8]
 8002052:	603b      	str	r3, [r7, #0]
 8002054:	4613      	mov	r3, r2
 8002056:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002058:	e04c      	b.n	80020f4 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002060:	d048      	beq.n	80020f4 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002062:	f7fe fab5 	bl	80005d0 <HAL_GetTick>
 8002066:	4602      	mov	r2, r0
 8002068:	69bb      	ldr	r3, [r7, #24]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	683a      	ldr	r2, [r7, #0]
 800206e:	429a      	cmp	r2, r3
 8002070:	d902      	bls.n	8002078 <SPI_WaitFlagStateUntilTimeout+0x30>
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d13d      	bne.n	80020f4 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	685a      	ldr	r2, [r3, #4]
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002086:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002090:	d111      	bne.n	80020b6 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800209a:	d004      	beq.n	80020a6 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020a4:	d107      	bne.n	80020b6 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020b4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020be:	d10f      	bne.n	80020e0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80020ce:	601a      	str	r2, [r3, #0]
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80020de:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2201      	movs	r2, #1
 80020e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2200      	movs	r2, #0
 80020ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80020f0:	2303      	movs	r3, #3
 80020f2:	e00f      	b.n	8002114 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	689a      	ldr	r2, [r3, #8]
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	4013      	ands	r3, r2
 80020fe:	68ba      	ldr	r2, [r7, #8]
 8002100:	429a      	cmp	r2, r3
 8002102:	bf0c      	ite	eq
 8002104:	2301      	moveq	r3, #1
 8002106:	2300      	movne	r3, #0
 8002108:	b2db      	uxtb	r3, r3
 800210a:	461a      	mov	r2, r3
 800210c:	79fb      	ldrb	r3, [r7, #7]
 800210e:	429a      	cmp	r2, r3
 8002110:	d1a3      	bne.n	800205a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002112:	2300      	movs	r3, #0
}
 8002114:	4618      	mov	r0, r3
 8002116:	3710      	adds	r7, #16
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}

0800211c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b088      	sub	sp, #32
 8002120:	af02      	add	r7, sp, #8
 8002122:	60f8      	str	r0, [r7, #12]
 8002124:	60b9      	str	r1, [r7, #8]
 8002126:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002128:	4b1b      	ldr	r3, [pc, #108]	; (8002198 <SPI_EndRxTxTransaction+0x7c>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a1b      	ldr	r2, [pc, #108]	; (800219c <SPI_EndRxTxTransaction+0x80>)
 800212e:	fba2 2303 	umull	r2, r3, r2, r3
 8002132:	0d5b      	lsrs	r3, r3, #21
 8002134:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002138:	fb02 f303 	mul.w	r3, r2, r3
 800213c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002146:	d112      	bne.n	800216e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	9300      	str	r3, [sp, #0]
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	2200      	movs	r2, #0
 8002150:	2180      	movs	r1, #128	; 0x80
 8002152:	68f8      	ldr	r0, [r7, #12]
 8002154:	f7ff ff78 	bl	8002048 <SPI_WaitFlagStateUntilTimeout>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d016      	beq.n	800218c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002162:	f043 0220 	orr.w	r2, r3, #32
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e00f      	b.n	800218e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d00a      	beq.n	800218a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	3b01      	subs	r3, #1
 8002178:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002184:	2b80      	cmp	r3, #128	; 0x80
 8002186:	d0f2      	beq.n	800216e <SPI_EndRxTxTransaction+0x52>
 8002188:	e000      	b.n	800218c <SPI_EndRxTxTransaction+0x70>
        break;
 800218a:	bf00      	nop
  }

  return HAL_OK;
 800218c:	2300      	movs	r3, #0
}
 800218e:	4618      	mov	r0, r3
 8002190:	3718      	adds	r7, #24
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	20000008 	.word	0x20000008
 800219c:	165e9f81 	.word	0x165e9f81

080021a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d101      	bne.n	80021b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e01d      	b.n	80021ee <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d106      	bne.n	80021cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2200      	movs	r2, #0
 80021c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f001 f88c 	bl	80032e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2202      	movs	r2, #2
 80021d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	3304      	adds	r3, #4
 80021dc:	4619      	mov	r1, r3
 80021de:	4610      	mov	r0, r2
 80021e0:	f000 f80a 	bl	80021f8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2201      	movs	r2, #1
 80021e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80021ec:	2300      	movs	r3, #0
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
	...

080021f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b085      	sub	sp, #20
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	4a40      	ldr	r2, [pc, #256]	; (800230c <TIM_Base_SetConfig+0x114>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d013      	beq.n	8002238 <TIM_Base_SetConfig+0x40>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002216:	d00f      	beq.n	8002238 <TIM_Base_SetConfig+0x40>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	4a3d      	ldr	r2, [pc, #244]	; (8002310 <TIM_Base_SetConfig+0x118>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d00b      	beq.n	8002238 <TIM_Base_SetConfig+0x40>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	4a3c      	ldr	r2, [pc, #240]	; (8002314 <TIM_Base_SetConfig+0x11c>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d007      	beq.n	8002238 <TIM_Base_SetConfig+0x40>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	4a3b      	ldr	r2, [pc, #236]	; (8002318 <TIM_Base_SetConfig+0x120>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d003      	beq.n	8002238 <TIM_Base_SetConfig+0x40>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	4a3a      	ldr	r2, [pc, #232]	; (800231c <TIM_Base_SetConfig+0x124>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d108      	bne.n	800224a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800223e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	68fa      	ldr	r2, [r7, #12]
 8002246:	4313      	orrs	r3, r2
 8002248:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4a2f      	ldr	r2, [pc, #188]	; (800230c <TIM_Base_SetConfig+0x114>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d02b      	beq.n	80022aa <TIM_Base_SetConfig+0xb2>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002258:	d027      	beq.n	80022aa <TIM_Base_SetConfig+0xb2>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a2c      	ldr	r2, [pc, #176]	; (8002310 <TIM_Base_SetConfig+0x118>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d023      	beq.n	80022aa <TIM_Base_SetConfig+0xb2>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a2b      	ldr	r2, [pc, #172]	; (8002314 <TIM_Base_SetConfig+0x11c>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d01f      	beq.n	80022aa <TIM_Base_SetConfig+0xb2>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a2a      	ldr	r2, [pc, #168]	; (8002318 <TIM_Base_SetConfig+0x120>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d01b      	beq.n	80022aa <TIM_Base_SetConfig+0xb2>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a29      	ldr	r2, [pc, #164]	; (800231c <TIM_Base_SetConfig+0x124>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d017      	beq.n	80022aa <TIM_Base_SetConfig+0xb2>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4a28      	ldr	r2, [pc, #160]	; (8002320 <TIM_Base_SetConfig+0x128>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d013      	beq.n	80022aa <TIM_Base_SetConfig+0xb2>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a27      	ldr	r2, [pc, #156]	; (8002324 <TIM_Base_SetConfig+0x12c>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d00f      	beq.n	80022aa <TIM_Base_SetConfig+0xb2>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4a26      	ldr	r2, [pc, #152]	; (8002328 <TIM_Base_SetConfig+0x130>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d00b      	beq.n	80022aa <TIM_Base_SetConfig+0xb2>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a25      	ldr	r2, [pc, #148]	; (800232c <TIM_Base_SetConfig+0x134>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d007      	beq.n	80022aa <TIM_Base_SetConfig+0xb2>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a24      	ldr	r2, [pc, #144]	; (8002330 <TIM_Base_SetConfig+0x138>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d003      	beq.n	80022aa <TIM_Base_SetConfig+0xb2>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4a23      	ldr	r2, [pc, #140]	; (8002334 <TIM_Base_SetConfig+0x13c>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d108      	bne.n	80022bc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	68db      	ldr	r3, [r3, #12]
 80022b6:	68fa      	ldr	r2, [r7, #12]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	695b      	ldr	r3, [r3, #20]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	68fa      	ldr	r2, [r7, #12]
 80022ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	689a      	ldr	r2, [r3, #8]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	4a0a      	ldr	r2, [pc, #40]	; (800230c <TIM_Base_SetConfig+0x114>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d003      	beq.n	80022f0 <TIM_Base_SetConfig+0xf8>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	4a0c      	ldr	r2, [pc, #48]	; (800231c <TIM_Base_SetConfig+0x124>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d103      	bne.n	80022f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	691a      	ldr	r2, [r3, #16]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2201      	movs	r2, #1
 80022fc:	615a      	str	r2, [r3, #20]
}
 80022fe:	bf00      	nop
 8002300:	3714      	adds	r7, #20
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	40010000 	.word	0x40010000
 8002310:	40000400 	.word	0x40000400
 8002314:	40000800 	.word	0x40000800
 8002318:	40000c00 	.word	0x40000c00
 800231c:	40010400 	.word	0x40010400
 8002320:	40014000 	.word	0x40014000
 8002324:	40014400 	.word	0x40014400
 8002328:	40014800 	.word	0x40014800
 800232c:	40001800 	.word	0x40001800
 8002330:	40001c00 	.word	0x40001c00
 8002334:	40002000 	.word	0x40002000

08002338 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002338:	b480      	push	{r7}
 800233a:	b085      	sub	sp, #20
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002348:	2b01      	cmp	r3, #1
 800234a:	d101      	bne.n	8002350 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800234c:	2302      	movs	r3, #2
 800234e:	e032      	b.n	80023b6 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2201      	movs	r2, #1
 8002354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2202      	movs	r2, #2
 800235c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002376:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	68fa      	ldr	r2, [r7, #12]
 800237e:	4313      	orrs	r3, r2
 8002380:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002388:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	68ba      	ldr	r2, [r7, #8]
 8002390:	4313      	orrs	r3, r2
 8002392:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	68fa      	ldr	r2, [r7, #12]
 800239a:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	68ba      	ldr	r2, [r7, #8]
 80023a2:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2201      	movs	r2, #1
 80023a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2200      	movs	r2, #0
 80023b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80023b4:	2300      	movs	r3, #0
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3714      	adds	r7, #20
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr

080023c2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023c2:	b580      	push	{r7, lr}
 80023c4:	b082      	sub	sp, #8
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d101      	bne.n	80023d4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e03f      	b.n	8002454 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d106      	bne.n	80023ee <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2200      	movs	r2, #0
 80023e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	f000 ff9d 	bl	8003328 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2224      	movs	r2, #36	; 0x24
 80023f2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	68da      	ldr	r2, [r3, #12]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002404:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f000 f828 	bl	800245c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	691a      	ldr	r2, [r3, #16]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800241a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	695a      	ldr	r2, [r3, #20]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800242a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	68da      	ldr	r2, [r3, #12]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800243a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2200      	movs	r2, #0
 8002440:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2220      	movs	r2, #32
 8002446:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2220      	movs	r2, #32
 800244e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002452:	2300      	movs	r3, #0
}
 8002454:	4618      	mov	r0, r3
 8002456:	3708      	adds	r7, #8
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}

0800245c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800245c:	b5b0      	push	{r4, r5, r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	691b      	ldr	r3, [r3, #16]
 800246a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	68da      	ldr	r2, [r3, #12]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	430a      	orrs	r2, r1
 8002478:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	689a      	ldr	r2, [r3, #8]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	691b      	ldr	r3, [r3, #16]
 8002482:	431a      	orrs	r2, r3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	695b      	ldr	r3, [r3, #20]
 8002488:	431a      	orrs	r2, r3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	69db      	ldr	r3, [r3, #28]
 800248e:	4313      	orrs	r3, r2
 8002490:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800249c:	f023 030c 	bic.w	r3, r3, #12
 80024a0:	687a      	ldr	r2, [r7, #4]
 80024a2:	6812      	ldr	r2, [r2, #0]
 80024a4:	68f9      	ldr	r1, [r7, #12]
 80024a6:	430b      	orrs	r3, r1
 80024a8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	695b      	ldr	r3, [r3, #20]
 80024b0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	699a      	ldr	r2, [r3, #24]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	430a      	orrs	r2, r1
 80024be:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	69db      	ldr	r3, [r3, #28]
 80024c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024c8:	f040 80e4 	bne.w	8002694 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4aab      	ldr	r2, [pc, #684]	; (8002780 <UART_SetConfig+0x324>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d004      	beq.n	80024e0 <UART_SetConfig+0x84>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4aaa      	ldr	r2, [pc, #680]	; (8002784 <UART_SetConfig+0x328>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d16c      	bne.n	80025ba <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80024e0:	f7fe fff2 	bl	80014c8 <HAL_RCC_GetPCLK2Freq>
 80024e4:	4602      	mov	r2, r0
 80024e6:	4613      	mov	r3, r2
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	4413      	add	r3, r2
 80024ec:	009a      	lsls	r2, r3, #2
 80024ee:	441a      	add	r2, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	005b      	lsls	r3, r3, #1
 80024f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80024fa:	4aa3      	ldr	r2, [pc, #652]	; (8002788 <UART_SetConfig+0x32c>)
 80024fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002500:	095b      	lsrs	r3, r3, #5
 8002502:	011c      	lsls	r4, r3, #4
 8002504:	f7fe ffe0 	bl	80014c8 <HAL_RCC_GetPCLK2Freq>
 8002508:	4602      	mov	r2, r0
 800250a:	4613      	mov	r3, r2
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	4413      	add	r3, r2
 8002510:	009a      	lsls	r2, r3, #2
 8002512:	441a      	add	r2, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	005b      	lsls	r3, r3, #1
 800251a:	fbb2 f5f3 	udiv	r5, r2, r3
 800251e:	f7fe ffd3 	bl	80014c8 <HAL_RCC_GetPCLK2Freq>
 8002522:	4602      	mov	r2, r0
 8002524:	4613      	mov	r3, r2
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	4413      	add	r3, r2
 800252a:	009a      	lsls	r2, r3, #2
 800252c:	441a      	add	r2, r3
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	005b      	lsls	r3, r3, #1
 8002534:	fbb2 f3f3 	udiv	r3, r2, r3
 8002538:	4a93      	ldr	r2, [pc, #588]	; (8002788 <UART_SetConfig+0x32c>)
 800253a:	fba2 2303 	umull	r2, r3, r2, r3
 800253e:	095b      	lsrs	r3, r3, #5
 8002540:	2264      	movs	r2, #100	; 0x64
 8002542:	fb02 f303 	mul.w	r3, r2, r3
 8002546:	1aeb      	subs	r3, r5, r3
 8002548:	00db      	lsls	r3, r3, #3
 800254a:	3332      	adds	r3, #50	; 0x32
 800254c:	4a8e      	ldr	r2, [pc, #568]	; (8002788 <UART_SetConfig+0x32c>)
 800254e:	fba2 2303 	umull	r2, r3, r2, r3
 8002552:	095b      	lsrs	r3, r3, #5
 8002554:	005b      	lsls	r3, r3, #1
 8002556:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800255a:	441c      	add	r4, r3
 800255c:	f7fe ffb4 	bl	80014c8 <HAL_RCC_GetPCLK2Freq>
 8002560:	4602      	mov	r2, r0
 8002562:	4613      	mov	r3, r2
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	4413      	add	r3, r2
 8002568:	009a      	lsls	r2, r3, #2
 800256a:	441a      	add	r2, r3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	005b      	lsls	r3, r3, #1
 8002572:	fbb2 f5f3 	udiv	r5, r2, r3
 8002576:	f7fe ffa7 	bl	80014c8 <HAL_RCC_GetPCLK2Freq>
 800257a:	4602      	mov	r2, r0
 800257c:	4613      	mov	r3, r2
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	4413      	add	r3, r2
 8002582:	009a      	lsls	r2, r3, #2
 8002584:	441a      	add	r2, r3
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	005b      	lsls	r3, r3, #1
 800258c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002590:	4a7d      	ldr	r2, [pc, #500]	; (8002788 <UART_SetConfig+0x32c>)
 8002592:	fba2 2303 	umull	r2, r3, r2, r3
 8002596:	095b      	lsrs	r3, r3, #5
 8002598:	2264      	movs	r2, #100	; 0x64
 800259a:	fb02 f303 	mul.w	r3, r2, r3
 800259e:	1aeb      	subs	r3, r5, r3
 80025a0:	00db      	lsls	r3, r3, #3
 80025a2:	3332      	adds	r3, #50	; 0x32
 80025a4:	4a78      	ldr	r2, [pc, #480]	; (8002788 <UART_SetConfig+0x32c>)
 80025a6:	fba2 2303 	umull	r2, r3, r2, r3
 80025aa:	095b      	lsrs	r3, r3, #5
 80025ac:	f003 0207 	and.w	r2, r3, #7
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4422      	add	r2, r4
 80025b6:	609a      	str	r2, [r3, #8]
 80025b8:	e154      	b.n	8002864 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80025ba:	f7fe ff71 	bl	80014a0 <HAL_RCC_GetPCLK1Freq>
 80025be:	4602      	mov	r2, r0
 80025c0:	4613      	mov	r3, r2
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	4413      	add	r3, r2
 80025c6:	009a      	lsls	r2, r3, #2
 80025c8:	441a      	add	r2, r3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	005b      	lsls	r3, r3, #1
 80025d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80025d4:	4a6c      	ldr	r2, [pc, #432]	; (8002788 <UART_SetConfig+0x32c>)
 80025d6:	fba2 2303 	umull	r2, r3, r2, r3
 80025da:	095b      	lsrs	r3, r3, #5
 80025dc:	011c      	lsls	r4, r3, #4
 80025de:	f7fe ff5f 	bl	80014a0 <HAL_RCC_GetPCLK1Freq>
 80025e2:	4602      	mov	r2, r0
 80025e4:	4613      	mov	r3, r2
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	4413      	add	r3, r2
 80025ea:	009a      	lsls	r2, r3, #2
 80025ec:	441a      	add	r2, r3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	005b      	lsls	r3, r3, #1
 80025f4:	fbb2 f5f3 	udiv	r5, r2, r3
 80025f8:	f7fe ff52 	bl	80014a0 <HAL_RCC_GetPCLK1Freq>
 80025fc:	4602      	mov	r2, r0
 80025fe:	4613      	mov	r3, r2
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	4413      	add	r3, r2
 8002604:	009a      	lsls	r2, r3, #2
 8002606:	441a      	add	r2, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	005b      	lsls	r3, r3, #1
 800260e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002612:	4a5d      	ldr	r2, [pc, #372]	; (8002788 <UART_SetConfig+0x32c>)
 8002614:	fba2 2303 	umull	r2, r3, r2, r3
 8002618:	095b      	lsrs	r3, r3, #5
 800261a:	2264      	movs	r2, #100	; 0x64
 800261c:	fb02 f303 	mul.w	r3, r2, r3
 8002620:	1aeb      	subs	r3, r5, r3
 8002622:	00db      	lsls	r3, r3, #3
 8002624:	3332      	adds	r3, #50	; 0x32
 8002626:	4a58      	ldr	r2, [pc, #352]	; (8002788 <UART_SetConfig+0x32c>)
 8002628:	fba2 2303 	umull	r2, r3, r2, r3
 800262c:	095b      	lsrs	r3, r3, #5
 800262e:	005b      	lsls	r3, r3, #1
 8002630:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002634:	441c      	add	r4, r3
 8002636:	f7fe ff33 	bl	80014a0 <HAL_RCC_GetPCLK1Freq>
 800263a:	4602      	mov	r2, r0
 800263c:	4613      	mov	r3, r2
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	4413      	add	r3, r2
 8002642:	009a      	lsls	r2, r3, #2
 8002644:	441a      	add	r2, r3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	005b      	lsls	r3, r3, #1
 800264c:	fbb2 f5f3 	udiv	r5, r2, r3
 8002650:	f7fe ff26 	bl	80014a0 <HAL_RCC_GetPCLK1Freq>
 8002654:	4602      	mov	r2, r0
 8002656:	4613      	mov	r3, r2
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	4413      	add	r3, r2
 800265c:	009a      	lsls	r2, r3, #2
 800265e:	441a      	add	r2, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	005b      	lsls	r3, r3, #1
 8002666:	fbb2 f3f3 	udiv	r3, r2, r3
 800266a:	4a47      	ldr	r2, [pc, #284]	; (8002788 <UART_SetConfig+0x32c>)
 800266c:	fba2 2303 	umull	r2, r3, r2, r3
 8002670:	095b      	lsrs	r3, r3, #5
 8002672:	2264      	movs	r2, #100	; 0x64
 8002674:	fb02 f303 	mul.w	r3, r2, r3
 8002678:	1aeb      	subs	r3, r5, r3
 800267a:	00db      	lsls	r3, r3, #3
 800267c:	3332      	adds	r3, #50	; 0x32
 800267e:	4a42      	ldr	r2, [pc, #264]	; (8002788 <UART_SetConfig+0x32c>)
 8002680:	fba2 2303 	umull	r2, r3, r2, r3
 8002684:	095b      	lsrs	r3, r3, #5
 8002686:	f003 0207 	and.w	r2, r3, #7
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4422      	add	r2, r4
 8002690:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8002692:	e0e7      	b.n	8002864 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a39      	ldr	r2, [pc, #228]	; (8002780 <UART_SetConfig+0x324>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d004      	beq.n	80026a8 <UART_SetConfig+0x24c>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a38      	ldr	r2, [pc, #224]	; (8002784 <UART_SetConfig+0x328>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d171      	bne.n	800278c <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80026a8:	f7fe ff0e 	bl	80014c8 <HAL_RCC_GetPCLK2Freq>
 80026ac:	4602      	mov	r2, r0
 80026ae:	4613      	mov	r3, r2
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	4413      	add	r3, r2
 80026b4:	009a      	lsls	r2, r3, #2
 80026b6:	441a      	add	r2, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	fbb2 f3f3 	udiv	r3, r2, r3
 80026c2:	4a31      	ldr	r2, [pc, #196]	; (8002788 <UART_SetConfig+0x32c>)
 80026c4:	fba2 2303 	umull	r2, r3, r2, r3
 80026c8:	095b      	lsrs	r3, r3, #5
 80026ca:	011c      	lsls	r4, r3, #4
 80026cc:	f7fe fefc 	bl	80014c8 <HAL_RCC_GetPCLK2Freq>
 80026d0:	4602      	mov	r2, r0
 80026d2:	4613      	mov	r3, r2
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	4413      	add	r3, r2
 80026d8:	009a      	lsls	r2, r3, #2
 80026da:	441a      	add	r2, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	fbb2 f5f3 	udiv	r5, r2, r3
 80026e6:	f7fe feef 	bl	80014c8 <HAL_RCC_GetPCLK2Freq>
 80026ea:	4602      	mov	r2, r0
 80026ec:	4613      	mov	r3, r2
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	4413      	add	r3, r2
 80026f2:	009a      	lsls	r2, r3, #2
 80026f4:	441a      	add	r2, r3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002700:	4a21      	ldr	r2, [pc, #132]	; (8002788 <UART_SetConfig+0x32c>)
 8002702:	fba2 2303 	umull	r2, r3, r2, r3
 8002706:	095b      	lsrs	r3, r3, #5
 8002708:	2264      	movs	r2, #100	; 0x64
 800270a:	fb02 f303 	mul.w	r3, r2, r3
 800270e:	1aeb      	subs	r3, r5, r3
 8002710:	011b      	lsls	r3, r3, #4
 8002712:	3332      	adds	r3, #50	; 0x32
 8002714:	4a1c      	ldr	r2, [pc, #112]	; (8002788 <UART_SetConfig+0x32c>)
 8002716:	fba2 2303 	umull	r2, r3, r2, r3
 800271a:	095b      	lsrs	r3, r3, #5
 800271c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002720:	441c      	add	r4, r3
 8002722:	f7fe fed1 	bl	80014c8 <HAL_RCC_GetPCLK2Freq>
 8002726:	4602      	mov	r2, r0
 8002728:	4613      	mov	r3, r2
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	4413      	add	r3, r2
 800272e:	009a      	lsls	r2, r3, #2
 8002730:	441a      	add	r2, r3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	fbb2 f5f3 	udiv	r5, r2, r3
 800273c:	f7fe fec4 	bl	80014c8 <HAL_RCC_GetPCLK2Freq>
 8002740:	4602      	mov	r2, r0
 8002742:	4613      	mov	r3, r2
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	4413      	add	r3, r2
 8002748:	009a      	lsls	r2, r3, #2
 800274a:	441a      	add	r2, r3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	fbb2 f3f3 	udiv	r3, r2, r3
 8002756:	4a0c      	ldr	r2, [pc, #48]	; (8002788 <UART_SetConfig+0x32c>)
 8002758:	fba2 2303 	umull	r2, r3, r2, r3
 800275c:	095b      	lsrs	r3, r3, #5
 800275e:	2264      	movs	r2, #100	; 0x64
 8002760:	fb02 f303 	mul.w	r3, r2, r3
 8002764:	1aeb      	subs	r3, r5, r3
 8002766:	011b      	lsls	r3, r3, #4
 8002768:	3332      	adds	r3, #50	; 0x32
 800276a:	4a07      	ldr	r2, [pc, #28]	; (8002788 <UART_SetConfig+0x32c>)
 800276c:	fba2 2303 	umull	r2, r3, r2, r3
 8002770:	095b      	lsrs	r3, r3, #5
 8002772:	f003 020f 	and.w	r2, r3, #15
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4422      	add	r2, r4
 800277c:	609a      	str	r2, [r3, #8]
 800277e:	e071      	b.n	8002864 <UART_SetConfig+0x408>
 8002780:	40011000 	.word	0x40011000
 8002784:	40011400 	.word	0x40011400
 8002788:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800278c:	f7fe fe88 	bl	80014a0 <HAL_RCC_GetPCLK1Freq>
 8002790:	4602      	mov	r2, r0
 8002792:	4613      	mov	r3, r2
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	4413      	add	r3, r2
 8002798:	009a      	lsls	r2, r3, #2
 800279a:	441a      	add	r2, r3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80027a6:	4a31      	ldr	r2, [pc, #196]	; (800286c <UART_SetConfig+0x410>)
 80027a8:	fba2 2303 	umull	r2, r3, r2, r3
 80027ac:	095b      	lsrs	r3, r3, #5
 80027ae:	011c      	lsls	r4, r3, #4
 80027b0:	f7fe fe76 	bl	80014a0 <HAL_RCC_GetPCLK1Freq>
 80027b4:	4602      	mov	r2, r0
 80027b6:	4613      	mov	r3, r2
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	4413      	add	r3, r2
 80027bc:	009a      	lsls	r2, r3, #2
 80027be:	441a      	add	r2, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	fbb2 f5f3 	udiv	r5, r2, r3
 80027ca:	f7fe fe69 	bl	80014a0 <HAL_RCC_GetPCLK1Freq>
 80027ce:	4602      	mov	r2, r0
 80027d0:	4613      	mov	r3, r2
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	4413      	add	r3, r2
 80027d6:	009a      	lsls	r2, r3, #2
 80027d8:	441a      	add	r2, r3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80027e4:	4a21      	ldr	r2, [pc, #132]	; (800286c <UART_SetConfig+0x410>)
 80027e6:	fba2 2303 	umull	r2, r3, r2, r3
 80027ea:	095b      	lsrs	r3, r3, #5
 80027ec:	2264      	movs	r2, #100	; 0x64
 80027ee:	fb02 f303 	mul.w	r3, r2, r3
 80027f2:	1aeb      	subs	r3, r5, r3
 80027f4:	011b      	lsls	r3, r3, #4
 80027f6:	3332      	adds	r3, #50	; 0x32
 80027f8:	4a1c      	ldr	r2, [pc, #112]	; (800286c <UART_SetConfig+0x410>)
 80027fa:	fba2 2303 	umull	r2, r3, r2, r3
 80027fe:	095b      	lsrs	r3, r3, #5
 8002800:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002804:	441c      	add	r4, r3
 8002806:	f7fe fe4b 	bl	80014a0 <HAL_RCC_GetPCLK1Freq>
 800280a:	4602      	mov	r2, r0
 800280c:	4613      	mov	r3, r2
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	4413      	add	r3, r2
 8002812:	009a      	lsls	r2, r3, #2
 8002814:	441a      	add	r2, r3
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	fbb2 f5f3 	udiv	r5, r2, r3
 8002820:	f7fe fe3e 	bl	80014a0 <HAL_RCC_GetPCLK1Freq>
 8002824:	4602      	mov	r2, r0
 8002826:	4613      	mov	r3, r2
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	4413      	add	r3, r2
 800282c:	009a      	lsls	r2, r3, #2
 800282e:	441a      	add	r2, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	fbb2 f3f3 	udiv	r3, r2, r3
 800283a:	4a0c      	ldr	r2, [pc, #48]	; (800286c <UART_SetConfig+0x410>)
 800283c:	fba2 2303 	umull	r2, r3, r2, r3
 8002840:	095b      	lsrs	r3, r3, #5
 8002842:	2264      	movs	r2, #100	; 0x64
 8002844:	fb02 f303 	mul.w	r3, r2, r3
 8002848:	1aeb      	subs	r3, r5, r3
 800284a:	011b      	lsls	r3, r3, #4
 800284c:	3332      	adds	r3, #50	; 0x32
 800284e:	4a07      	ldr	r2, [pc, #28]	; (800286c <UART_SetConfig+0x410>)
 8002850:	fba2 2303 	umull	r2, r3, r2, r3
 8002854:	095b      	lsrs	r3, r3, #5
 8002856:	f003 020f 	and.w	r2, r3, #15
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4422      	add	r2, r4
 8002860:	609a      	str	r2, [r3, #8]
}
 8002862:	e7ff      	b.n	8002864 <UART_SetConfig+0x408>
 8002864:	bf00      	nop
 8002866:	3710      	adds	r7, #16
 8002868:	46bd      	mov	sp, r7
 800286a:	bdb0      	pop	{r4, r5, r7, pc}
 800286c:	51eb851f 	.word	0x51eb851f

08002870 <writeLED>:
#include <controlLed.h>




void writeLED(){
 8002870:	b480      	push	{r7}
 8002872:	b08b      	sub	sp, #44	; 0x2c
 8002874:	af00      	add	r7, sp, #0
	int k = 0;
 8002876:	2300      	movs	r3, #0
 8002878:	627b      	str	r3, [r7, #36]	; 0x24
	int k_flag = 0;//逆順の時は1
 800287a:	2300      	movs	r3, #0
 800287c:	623b      	str	r3, [r7, #32]
	for(int m = 0;m < 20 ; m++){
 800287e:	2300      	movs	r3, #0
 8002880:	61fb      	str	r3, [r7, #28]
 8002882:	e0fc      	b.n	8002a7e <writeLED+0x20e>
		for(int k2 = 0;k2 < 10 ; k2++){//横方向
 8002884:	2300      	movs	r3, #0
 8002886:	61bb      	str	r3, [r7, #24]
 8002888:	e0f2      	b.n	8002a70 <writeLED+0x200>
			uint8_t temp_GRB[3] = {};
 800288a:	1d3b      	adds	r3, r7, #4
 800288c:	2100      	movs	r1, #0
 800288e:	460a      	mov	r2, r1
 8002890:	801a      	strh	r2, [r3, #0]
 8002892:	460a      	mov	r2, r1
 8002894:	709a      	strb	r2, [r3, #2]
			temp_GRB[0] = (monitor[m][k] & 0x0C) * LED_LIGHT;
 8002896:	497f      	ldr	r1, [pc, #508]	; (8002a94 <writeLED+0x224>)
 8002898:	69fa      	ldr	r2, [r7, #28]
 800289a:	4613      	mov	r3, r2
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	4413      	add	r3, r2
 80028a0:	005b      	lsls	r3, r3, #1
 80028a2:	18ca      	adds	r2, r1, r3
 80028a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a6:	4413      	add	r3, r2
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	f003 030c 	and.w	r3, r3, #12
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	461a      	mov	r2, r3
 80028b2:	0092      	lsls	r2, r2, #2
 80028b4:	4413      	add	r3, r2
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	713b      	strb	r3, [r7, #4]
			temp_GRB[1] = (monitor[m][k] & 0x30) * LED_LIGHT;
 80028ba:	4976      	ldr	r1, [pc, #472]	; (8002a94 <writeLED+0x224>)
 80028bc:	69fa      	ldr	r2, [r7, #28]
 80028be:	4613      	mov	r3, r2
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	4413      	add	r3, r2
 80028c4:	005b      	lsls	r3, r3, #1
 80028c6:	18ca      	adds	r2, r1, r3
 80028c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ca:	4413      	add	r3, r2
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	461a      	mov	r2, r3
 80028d6:	0092      	lsls	r2, r2, #2
 80028d8:	4413      	add	r3, r2
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	717b      	strb	r3, [r7, #5]
			temp_GRB[2] = (monitor[m][k] & 0x03) * LED_LIGHT;
 80028de:	496d      	ldr	r1, [pc, #436]	; (8002a94 <writeLED+0x224>)
 80028e0:	69fa      	ldr	r2, [r7, #28]
 80028e2:	4613      	mov	r3, r2
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	4413      	add	r3, r2
 80028e8:	005b      	lsls	r3, r3, #1
 80028ea:	18ca      	adds	r2, r1, r3
 80028ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ee:	4413      	add	r3, r2
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	f003 0303 	and.w	r3, r3, #3
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	461a      	mov	r2, r3
 80028fa:	0092      	lsls	r2, r2, #2
 80028fc:	4413      	add	r3, r2
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	71bb      	strb	r3, [r7, #6]
			uint8_t cnt = 0;
 8002902:	2300      	movs	r3, #0
 8002904:	75fb      	strb	r3, [r7, #23]
			for(int j=0;j < 3;j++){
 8002906:	2300      	movs	r3, #0
 8002908:	613b      	str	r3, [r7, #16]
 800290a:	e08e      	b.n	8002a2a <writeLED+0x1ba>
				uint8_t temp = temp_GRB[j];
 800290c:	1d3a      	adds	r2, r7, #4
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	4413      	add	r3, r2
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	73fb      	strb	r3, [r7, #15]
				for(int i=0;i < 4;i++){
 8002916:	2300      	movs	r3, #0
 8002918:	60bb      	str	r3, [r7, #8]
 800291a:	e07f      	b.n	8002a1c <writeLED+0x1ac>
					if(temp & 0x80) spi_data[(m  * 10 + k2) * 12 + cnt] = 0x10;//1 �?数bit
 800291c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002920:	2b00      	cmp	r3, #0
 8002922:	da12      	bge.n	800294a <writeLED+0xda>
 8002924:	69fa      	ldr	r2, [r7, #28]
 8002926:	4613      	mov	r3, r2
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	4413      	add	r3, r2
 800292c:	005b      	lsls	r3, r3, #1
 800292e:	461a      	mov	r2, r3
 8002930:	69bb      	ldr	r3, [r7, #24]
 8002932:	441a      	add	r2, r3
 8002934:	4613      	mov	r3, r2
 8002936:	005b      	lsls	r3, r3, #1
 8002938:	4413      	add	r3, r2
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	461a      	mov	r2, r3
 800293e:	7dfb      	ldrb	r3, [r7, #23]
 8002940:	4413      	add	r3, r2
 8002942:	4a55      	ldr	r2, [pc, #340]	; (8002a98 <writeLED+0x228>)
 8002944:	2110      	movs	r1, #16
 8002946:	54d1      	strb	r1, [r2, r3]
 8002948:	e011      	b.n	800296e <writeLED+0xfe>
					else spi_data[(m  * 10 + k2) * 12 + cnt] = 0x70;//0
 800294a:	69fa      	ldr	r2, [r7, #28]
 800294c:	4613      	mov	r3, r2
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	4413      	add	r3, r2
 8002952:	005b      	lsls	r3, r3, #1
 8002954:	461a      	mov	r2, r3
 8002956:	69bb      	ldr	r3, [r7, #24]
 8002958:	441a      	add	r2, r3
 800295a:	4613      	mov	r3, r2
 800295c:	005b      	lsls	r3, r3, #1
 800295e:	4413      	add	r3, r2
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	461a      	mov	r2, r3
 8002964:	7dfb      	ldrb	r3, [r7, #23]
 8002966:	4413      	add	r3, r2
 8002968:	4a4b      	ldr	r2, [pc, #300]	; (8002a98 <writeLED+0x228>)
 800296a:	2170      	movs	r1, #112	; 0x70
 800296c:	54d1      	strb	r1, [r2, r3]
					if(temp & 0x40) spi_data[(m  * 10 + k2) * 12 + cnt] += 0x01;//1 偶数bit
 800296e:	7bfb      	ldrb	r3, [r7, #15]
 8002970:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002974:	2b00      	cmp	r3, #0
 8002976:	d024      	beq.n	80029c2 <writeLED+0x152>
 8002978:	69fa      	ldr	r2, [r7, #28]
 800297a:	4613      	mov	r3, r2
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	4413      	add	r3, r2
 8002980:	005b      	lsls	r3, r3, #1
 8002982:	461a      	mov	r2, r3
 8002984:	69bb      	ldr	r3, [r7, #24]
 8002986:	441a      	add	r2, r3
 8002988:	4613      	mov	r3, r2
 800298a:	005b      	lsls	r3, r3, #1
 800298c:	4413      	add	r3, r2
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	461a      	mov	r2, r3
 8002992:	7dfb      	ldrb	r3, [r7, #23]
 8002994:	4413      	add	r3, r2
 8002996:	4a40      	ldr	r2, [pc, #256]	; (8002a98 <writeLED+0x228>)
 8002998:	5cd1      	ldrb	r1, [r2, r3]
 800299a:	69fa      	ldr	r2, [r7, #28]
 800299c:	4613      	mov	r3, r2
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	4413      	add	r3, r2
 80029a2:	005b      	lsls	r3, r3, #1
 80029a4:	461a      	mov	r2, r3
 80029a6:	69bb      	ldr	r3, [r7, #24]
 80029a8:	441a      	add	r2, r3
 80029aa:	4613      	mov	r3, r2
 80029ac:	005b      	lsls	r3, r3, #1
 80029ae:	4413      	add	r3, r2
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	461a      	mov	r2, r3
 80029b4:	7dfb      	ldrb	r3, [r7, #23]
 80029b6:	4413      	add	r3, r2
 80029b8:	1c4a      	adds	r2, r1, #1
 80029ba:	b2d1      	uxtb	r1, r2
 80029bc:	4a36      	ldr	r2, [pc, #216]	; (8002a98 <writeLED+0x228>)
 80029be:	54d1      	strb	r1, [r2, r3]
 80029c0:	e023      	b.n	8002a0a <writeLED+0x19a>
					else spi_data[(m  * 10 + k2) * 12 + cnt] += 0x07;//0
 80029c2:	69fa      	ldr	r2, [r7, #28]
 80029c4:	4613      	mov	r3, r2
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	4413      	add	r3, r2
 80029ca:	005b      	lsls	r3, r3, #1
 80029cc:	461a      	mov	r2, r3
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	441a      	add	r2, r3
 80029d2:	4613      	mov	r3, r2
 80029d4:	005b      	lsls	r3, r3, #1
 80029d6:	4413      	add	r3, r2
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	461a      	mov	r2, r3
 80029dc:	7dfb      	ldrb	r3, [r7, #23]
 80029de:	4413      	add	r3, r2
 80029e0:	4a2d      	ldr	r2, [pc, #180]	; (8002a98 <writeLED+0x228>)
 80029e2:	5cd1      	ldrb	r1, [r2, r3]
 80029e4:	69fa      	ldr	r2, [r7, #28]
 80029e6:	4613      	mov	r3, r2
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	4413      	add	r3, r2
 80029ec:	005b      	lsls	r3, r3, #1
 80029ee:	461a      	mov	r2, r3
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	441a      	add	r2, r3
 80029f4:	4613      	mov	r3, r2
 80029f6:	005b      	lsls	r3, r3, #1
 80029f8:	4413      	add	r3, r2
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	461a      	mov	r2, r3
 80029fe:	7dfb      	ldrb	r3, [r7, #23]
 8002a00:	4413      	add	r3, r2
 8002a02:	1dca      	adds	r2, r1, #7
 8002a04:	b2d1      	uxtb	r1, r2
 8002a06:	4a24      	ldr	r2, [pc, #144]	; (8002a98 <writeLED+0x228>)
 8002a08:	54d1      	strb	r1, [r2, r3]

					temp = temp << 2;//2bit上にずら�?
 8002a0a:	7bfb      	ldrb	r3, [r7, #15]
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	73fb      	strb	r3, [r7, #15]
					cnt++;
 8002a10:	7dfb      	ldrb	r3, [r7, #23]
 8002a12:	3301      	adds	r3, #1
 8002a14:	75fb      	strb	r3, [r7, #23]
				for(int i=0;i < 4;i++){
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	3301      	adds	r3, #1
 8002a1a:	60bb      	str	r3, [r7, #8]
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	2b03      	cmp	r3, #3
 8002a20:	f77f af7c 	ble.w	800291c <writeLED+0xac>
			for(int j=0;j < 3;j++){
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	3301      	adds	r3, #1
 8002a28:	613b      	str	r3, [r7, #16]
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	f77f af6d 	ble.w	800290c <writeLED+0x9c>
			}



			//折り返し処理
			if(k_flag)k--;
 8002a32:	6a3b      	ldr	r3, [r7, #32]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d003      	beq.n	8002a40 <writeLED+0x1d0>
 8002a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3a:	3b01      	subs	r3, #1
 8002a3c:	627b      	str	r3, [r7, #36]	; 0x24
 8002a3e:	e002      	b.n	8002a46 <writeLED+0x1d6>
			else k++;
 8002a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a42:	3301      	adds	r3, #1
 8002a44:	627b      	str	r3, [r7, #36]	; 0x24
			if(k == 10){
 8002a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a48:	2b0a      	cmp	r3, #10
 8002a4a:	d104      	bne.n	8002a56 <writeLED+0x1e6>
				k_flag = 1;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	623b      	str	r3, [r7, #32]
				k = 9;//9の次も9
 8002a50:	2309      	movs	r3, #9
 8002a52:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 8002a54:	e010      	b.n	8002a78 <writeLED+0x208>
			}
			if(k == -1){
 8002a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a5c:	d105      	bne.n	8002a6a <writeLED+0x1fa>
				k_flag = 0;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	623b      	str	r3, [r7, #32]
				k = 0;//0の次も0
 8002a62:	2300      	movs	r3, #0
 8002a64:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 8002a66:	bf00      	nop
 8002a68:	e006      	b.n	8002a78 <writeLED+0x208>
		for(int k2 = 0;k2 < 10 ; k2++){//横方向
 8002a6a:	69bb      	ldr	r3, [r7, #24]
 8002a6c:	3301      	adds	r3, #1
 8002a6e:	61bb      	str	r3, [r7, #24]
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	2b09      	cmp	r3, #9
 8002a74:	f77f af09 	ble.w	800288a <writeLED+0x1a>
	for(int m = 0;m < 20 ; m++){
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	3301      	adds	r3, #1
 8002a7c:	61fb      	str	r3, [r7, #28]
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	2b13      	cmp	r3, #19
 8002a82:	f77f aeff 	ble.w	8002884 <writeLED+0x14>
		}
	}



}
 8002a86:	bf00      	nop
 8002a88:	372c      	adds	r7, #44	; 0x2c
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr
 8002a92:	bf00      	nop
 8002a94:	200001b4 	.word	0x200001b4
 8002a98:	2000027c 	.word	0x2000027c

08002a9c <leftButton>:

int leftButton(){
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b082      	sub	sp, #8
 8002aa0:	af00      	add	r7, sp, #0
	static uint8_t state = 0;
	int button = HAL_GPIO_ReadPin(LEFT_GPIO_Port,LEFT_Pin);
 8002aa2:	2101      	movs	r1, #1
 8002aa4:	480f      	ldr	r0, [pc, #60]	; (8002ae4 <leftButton+0x48>)
 8002aa6:	f7fe fbdb 	bl	8001260 <HAL_GPIO_ReadPin>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	607b      	str	r3, [r7, #4]
	if(!state && button){
 8002aae:	4b0e      	ldr	r3, [pc, #56]	; (8002ae8 <leftButton+0x4c>)
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d107      	bne.n	8002ac6 <leftButton+0x2a>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d004      	beq.n	8002ac6 <leftButton+0x2a>
		state = 1;
 8002abc:	4b0a      	ldr	r3, [pc, #40]	; (8002ae8 <leftButton+0x4c>)
 8002abe:	2201      	movs	r2, #1
 8002ac0:	701a      	strb	r2, [r3, #0]
		return 1;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e00a      	b.n	8002adc <leftButton+0x40>
	}
	if(state && !button) state = 0;
 8002ac6:	4b08      	ldr	r3, [pc, #32]	; (8002ae8 <leftButton+0x4c>)
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d005      	beq.n	8002ada <leftButton+0x3e>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d102      	bne.n	8002ada <leftButton+0x3e>
 8002ad4:	4b04      	ldr	r3, [pc, #16]	; (8002ae8 <leftButton+0x4c>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	701a      	strb	r2, [r3, #0]

	return 0;
 8002ada:	2300      	movs	r3, #0
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3708      	adds	r7, #8
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	40020800 	.word	0x40020800
 8002ae8:	200001b0 	.word	0x200001b0

08002aec <rightButton>:

int rightButton(){
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b082      	sub	sp, #8
 8002af0:	af00      	add	r7, sp, #0
	static uint8_t state = 0;
	int button = HAL_GPIO_ReadPin(RIGHT_GPIO_Port,RIGHT_Pin);
 8002af2:	2108      	movs	r1, #8
 8002af4:	480f      	ldr	r0, [pc, #60]	; (8002b34 <rightButton+0x48>)
 8002af6:	f7fe fbb3 	bl	8001260 <HAL_GPIO_ReadPin>
 8002afa:	4603      	mov	r3, r0
 8002afc:	607b      	str	r3, [r7, #4]
	if(!state && button){
 8002afe:	4b0e      	ldr	r3, [pc, #56]	; (8002b38 <rightButton+0x4c>)
 8002b00:	781b      	ldrb	r3, [r3, #0]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d107      	bne.n	8002b16 <rightButton+0x2a>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d004      	beq.n	8002b16 <rightButton+0x2a>
		state = 1;
 8002b0c:	4b0a      	ldr	r3, [pc, #40]	; (8002b38 <rightButton+0x4c>)
 8002b0e:	2201      	movs	r2, #1
 8002b10:	701a      	strb	r2, [r3, #0]
		return 1;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e00a      	b.n	8002b2c <rightButton+0x40>
	}
	if(state && !button) state = 0;
 8002b16:	4b08      	ldr	r3, [pc, #32]	; (8002b38 <rightButton+0x4c>)
 8002b18:	781b      	ldrb	r3, [r3, #0]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d005      	beq.n	8002b2a <rightButton+0x3e>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d102      	bne.n	8002b2a <rightButton+0x3e>
 8002b24:	4b04      	ldr	r3, [pc, #16]	; (8002b38 <rightButton+0x4c>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	701a      	strb	r2, [r3, #0]

	return 0;
 8002b2a:	2300      	movs	r3, #0
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3708      	adds	r7, #8
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	40020800 	.word	0x40020800
 8002b38:	200001b1 	.word	0x200001b1

08002b3c <upButton>:

int upButton(){
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
	static uint8_t state = 0;
	int button = HAL_GPIO_ReadPin(UP_GPIO_Port,UP_Pin);
 8002b42:	2102      	movs	r1, #2
 8002b44:	480f      	ldr	r0, [pc, #60]	; (8002b84 <upButton+0x48>)
 8002b46:	f7fe fb8b 	bl	8001260 <HAL_GPIO_ReadPin>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	607b      	str	r3, [r7, #4]
	if(!state && button){
 8002b4e:	4b0e      	ldr	r3, [pc, #56]	; (8002b88 <upButton+0x4c>)
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d107      	bne.n	8002b66 <upButton+0x2a>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d004      	beq.n	8002b66 <upButton+0x2a>
		state = 1;
 8002b5c:	4b0a      	ldr	r3, [pc, #40]	; (8002b88 <upButton+0x4c>)
 8002b5e:	2201      	movs	r2, #1
 8002b60:	701a      	strb	r2, [r3, #0]
		return 1;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e00a      	b.n	8002b7c <upButton+0x40>
	}
	if(state && !button) state = 0;
 8002b66:	4b08      	ldr	r3, [pc, #32]	; (8002b88 <upButton+0x4c>)
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d005      	beq.n	8002b7a <upButton+0x3e>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d102      	bne.n	8002b7a <upButton+0x3e>
 8002b74:	4b04      	ldr	r3, [pc, #16]	; (8002b88 <upButton+0x4c>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	701a      	strb	r2, [r3, #0]

	return 0;
 8002b7a:	2300      	movs	r3, #0
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3708      	adds	r7, #8
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	40020000 	.word	0x40020000
 8002b88:	200001b2 	.word	0x200001b2

08002b8c <downButton>:

int downButton(){
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b082      	sub	sp, #8
 8002b90:	af00      	add	r7, sp, #0
	static uint8_t state = 0;
	int button = HAL_GPIO_ReadPin(DOWN_GPIO_Port,DOWN_Pin);
 8002b92:	2180      	movs	r1, #128	; 0x80
 8002b94:	480f      	ldr	r0, [pc, #60]	; (8002bd4 <downButton+0x48>)
 8002b96:	f7fe fb63 	bl	8001260 <HAL_GPIO_ReadPin>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	607b      	str	r3, [r7, #4]
	if(!state && button){
 8002b9e:	4b0e      	ldr	r3, [pc, #56]	; (8002bd8 <downButton+0x4c>)
 8002ba0:	781b      	ldrb	r3, [r3, #0]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d107      	bne.n	8002bb6 <downButton+0x2a>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d004      	beq.n	8002bb6 <downButton+0x2a>
		state = 1;
 8002bac:	4b0a      	ldr	r3, [pc, #40]	; (8002bd8 <downButton+0x4c>)
 8002bae:	2201      	movs	r2, #1
 8002bb0:	701a      	strb	r2, [r3, #0]
		return 1;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e00a      	b.n	8002bcc <downButton+0x40>
	}
	if(state && !button) state = 0;
 8002bb6:	4b08      	ldr	r3, [pc, #32]	; (8002bd8 <downButton+0x4c>)
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d005      	beq.n	8002bca <downButton+0x3e>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d102      	bne.n	8002bca <downButton+0x3e>
 8002bc4:	4b04      	ldr	r3, [pc, #16]	; (8002bd8 <downButton+0x4c>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	701a      	strb	r2, [r3, #0]

	return 0;
 8002bca:	2300      	movs	r3, #0
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3708      	adds	r7, #8
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	40020400 	.word	0x40020400
 8002bd8:	200001b3 	.word	0x200001b3

08002bdc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002be0:	f7fd fc90 	bl	8000504 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002be4:	f000 f81c 	bl	8002c20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002be8:	f000 f97c 	bl	8002ee4 <MX_GPIO_Init>
  MX_DMA_Init();
 8002bec:	f000 f952 	bl	8002e94 <MX_DMA_Init>
  MX_SPI3_Init();
 8002bf0:	f000 f8ba 	bl	8002d68 <MX_SPI3_Init>
  MX_USART2_UART_Init();
 8002bf4:	f000 f924 	bl	8002e40 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8002bf8:	f000 f8ec 	bl	8002dd4 <MX_TIM6_Init>
  MX_SPI2_Init();
 8002bfc:	f000 f87e 	bl	8002cfc <MX_SPI2_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  playTetris();
 8002c00:	f000 fc7e 	bl	8003500 <playTetris>
	  writeLED();
 8002c04:	f7ff fe34 	bl	8002870 <writeLED>
	  HAL_SPI_Transmit_DMA(&hspi2, spi_data, 2400);
 8002c08:	f44f 6216 	mov.w	r2, #2400	; 0x960
 8002c0c:	4902      	ldr	r1, [pc, #8]	; (8002c18 <main+0x3c>)
 8002c0e:	4803      	ldr	r0, [pc, #12]	; (8002c1c <main+0x40>)
 8002c10:	f7ff f8cc 	bl	8001dac <HAL_SPI_Transmit_DMA>
	  playTetris();
 8002c14:	e7f4      	b.n	8002c00 <main+0x24>
 8002c16:	bf00      	nop
 8002c18:	2000027c 	.word	0x2000027c
 8002c1c:	20000cf8 	.word	0x20000cf8

08002c20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b094      	sub	sp, #80	; 0x50
 8002c24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c26:	f107 031c 	add.w	r3, r7, #28
 8002c2a:	2234      	movs	r2, #52	; 0x34
 8002c2c:	2100      	movs	r1, #0
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f001 fcda 	bl	80045e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c34:	f107 0308 	add.w	r3, r7, #8
 8002c38:	2200      	movs	r2, #0
 8002c3a:	601a      	str	r2, [r3, #0]
 8002c3c:	605a      	str	r2, [r3, #4]
 8002c3e:	609a      	str	r2, [r3, #8]
 8002c40:	60da      	str	r2, [r3, #12]
 8002c42:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c44:	2300      	movs	r3, #0
 8002c46:	607b      	str	r3, [r7, #4]
 8002c48:	4b2a      	ldr	r3, [pc, #168]	; (8002cf4 <SystemClock_Config+0xd4>)
 8002c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4c:	4a29      	ldr	r2, [pc, #164]	; (8002cf4 <SystemClock_Config+0xd4>)
 8002c4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c52:	6413      	str	r3, [r2, #64]	; 0x40
 8002c54:	4b27      	ldr	r3, [pc, #156]	; (8002cf4 <SystemClock_Config+0xd4>)
 8002c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c5c:	607b      	str	r3, [r7, #4]
 8002c5e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002c60:	2300      	movs	r3, #0
 8002c62:	603b      	str	r3, [r7, #0]
 8002c64:	4b24      	ldr	r3, [pc, #144]	; (8002cf8 <SystemClock_Config+0xd8>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002c6c:	4a22      	ldr	r2, [pc, #136]	; (8002cf8 <SystemClock_Config+0xd8>)
 8002c6e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c72:	6013      	str	r3, [r2, #0]
 8002c74:	4b20      	ldr	r3, [pc, #128]	; (8002cf8 <SystemClock_Config+0xd8>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002c7c:	603b      	str	r3, [r7, #0]
 8002c7e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002c80:	2302      	movs	r3, #2
 8002c82:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002c84:	2301      	movs	r3, #1
 8002c86:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002c88:	2310      	movs	r3, #16
 8002c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c8c:	2302      	movs	r3, #2
 8002c8e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002c90:	2300      	movs	r3, #0
 8002c92:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002c94:	2310      	movs	r3, #16
 8002c96:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002c98:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002c9c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002c9e:	2304      	movs	r3, #4
 8002ca0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002ca2:	2302      	movs	r3, #2
 8002ca4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002ca6:	2302      	movs	r3, #2
 8002ca8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002caa:	f107 031c 	add.w	r3, r7, #28
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f7fe fdbe 	bl	8001830 <HAL_RCC_OscConfig>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d001      	beq.n	8002cbe <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8002cba:	f000 f9b5 	bl	8003028 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002cbe:	230f      	movs	r3, #15
 8002cc0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002cc2:	2302      	movs	r3, #2
 8002cc4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002cca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002cce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002cd4:	f107 0308 	add.w	r3, r7, #8
 8002cd8:	2102      	movs	r1, #2
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f7fe faf2 	bl	80012c4 <HAL_RCC_ClockConfig>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d001      	beq.n	8002cea <SystemClock_Config+0xca>
  {
    Error_Handler();
 8002ce6:	f000 f99f 	bl	8003028 <Error_Handler>
  }
}
 8002cea:	bf00      	nop
 8002cec:	3750      	adds	r7, #80	; 0x50
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	40023800 	.word	0x40023800
 8002cf8:	40007000 	.word	0x40007000

08002cfc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002d00:	4b17      	ldr	r3, [pc, #92]	; (8002d60 <MX_SPI2_Init+0x64>)
 8002d02:	4a18      	ldr	r2, [pc, #96]	; (8002d64 <MX_SPI2_Init+0x68>)
 8002d04:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002d06:	4b16      	ldr	r3, [pc, #88]	; (8002d60 <MX_SPI2_Init+0x64>)
 8002d08:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002d0c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002d0e:	4b14      	ldr	r3, [pc, #80]	; (8002d60 <MX_SPI2_Init+0x64>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002d14:	4b12      	ldr	r3, [pc, #72]	; (8002d60 <MX_SPI2_Init+0x64>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d1a:	4b11      	ldr	r3, [pc, #68]	; (8002d60 <MX_SPI2_Init+0x64>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002d20:	4b0f      	ldr	r3, [pc, #60]	; (8002d60 <MX_SPI2_Init+0x64>)
 8002d22:	2201      	movs	r2, #1
 8002d24:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002d26:	4b0e      	ldr	r3, [pc, #56]	; (8002d60 <MX_SPI2_Init+0x64>)
 8002d28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d2c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002d2e:	4b0c      	ldr	r3, [pc, #48]	; (8002d60 <MX_SPI2_Init+0x64>)
 8002d30:	2218      	movs	r2, #24
 8002d32:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002d34:	4b0a      	ldr	r3, [pc, #40]	; (8002d60 <MX_SPI2_Init+0x64>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002d3a:	4b09      	ldr	r3, [pc, #36]	; (8002d60 <MX_SPI2_Init+0x64>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d40:	4b07      	ldr	r3, [pc, #28]	; (8002d60 <MX_SPI2_Init+0x64>)
 8002d42:	2200      	movs	r2, #0
 8002d44:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002d46:	4b06      	ldr	r3, [pc, #24]	; (8002d60 <MX_SPI2_Init+0x64>)
 8002d48:	220a      	movs	r2, #10
 8002d4a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002d4c:	4804      	ldr	r0, [pc, #16]	; (8002d60 <MX_SPI2_Init+0x64>)
 8002d4e:	f7fe ffc9 	bl	8001ce4 <HAL_SPI_Init>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d001      	beq.n	8002d5c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002d58:	f000 f966 	bl	8003028 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002d5c:	bf00      	nop
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	20000cf8 	.word	0x20000cf8
 8002d64:	40003800 	.word	0x40003800

08002d68 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8002d6c:	4b17      	ldr	r3, [pc, #92]	; (8002dcc <MX_SPI3_Init+0x64>)
 8002d6e:	4a18      	ldr	r2, [pc, #96]	; (8002dd0 <MX_SPI3_Init+0x68>)
 8002d70:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002d72:	4b16      	ldr	r3, [pc, #88]	; (8002dcc <MX_SPI3_Init+0x64>)
 8002d74:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002d78:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002d7a:	4b14      	ldr	r3, [pc, #80]	; (8002dcc <MX_SPI3_Init+0x64>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002d80:	4b12      	ldr	r3, [pc, #72]	; (8002dcc <MX_SPI3_Init+0x64>)
 8002d82:	2200      	movs	r2, #0
 8002d84:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d86:	4b11      	ldr	r3, [pc, #68]	; (8002dcc <MX_SPI3_Init+0x64>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002d8c:	4b0f      	ldr	r3, [pc, #60]	; (8002dcc <MX_SPI3_Init+0x64>)
 8002d8e:	2201      	movs	r2, #1
 8002d90:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002d92:	4b0e      	ldr	r3, [pc, #56]	; (8002dcc <MX_SPI3_Init+0x64>)
 8002d94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d98:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002d9a:	4b0c      	ldr	r3, [pc, #48]	; (8002dcc <MX_SPI3_Init+0x64>)
 8002d9c:	2218      	movs	r2, #24
 8002d9e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002da0:	4b0a      	ldr	r3, [pc, #40]	; (8002dcc <MX_SPI3_Init+0x64>)
 8002da2:	2200      	movs	r2, #0
 8002da4:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002da6:	4b09      	ldr	r3, [pc, #36]	; (8002dcc <MX_SPI3_Init+0x64>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002dac:	4b07      	ldr	r3, [pc, #28]	; (8002dcc <MX_SPI3_Init+0x64>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8002db2:	4b06      	ldr	r3, [pc, #24]	; (8002dcc <MX_SPI3_Init+0x64>)
 8002db4:	220a      	movs	r2, #10
 8002db6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002db8:	4804      	ldr	r0, [pc, #16]	; (8002dcc <MX_SPI3_Init+0x64>)
 8002dba:	f7fe ff93 	bl	8001ce4 <HAL_SPI_Init>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d001      	beq.n	8002dc8 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8002dc4:	f000 f930 	bl	8003028 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002dc8:	bf00      	nop
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	20000d50 	.word	0x20000d50
 8002dd0:	40003c00 	.word	0x40003c00

08002dd4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b082      	sub	sp, #8
 8002dd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002dda:	463b      	mov	r3, r7
 8002ddc:	2200      	movs	r2, #0
 8002dde:	601a      	str	r2, [r3, #0]
 8002de0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002de2:	4b15      	ldr	r3, [pc, #84]	; (8002e38 <MX_TIM6_Init+0x64>)
 8002de4:	4a15      	ldr	r2, [pc, #84]	; (8002e3c <MX_TIM6_Init+0x68>)
 8002de6:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8399;
 8002de8:	4b13      	ldr	r3, [pc, #76]	; (8002e38 <MX_TIM6_Init+0x64>)
 8002dea:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8002dee:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002df0:	4b11      	ldr	r3, [pc, #68]	; (8002e38 <MX_TIM6_Init+0x64>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8002df6:	4b10      	ldr	r3, [pc, #64]	; (8002e38 <MX_TIM6_Init+0x64>)
 8002df8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002dfc:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002dfe:	4b0e      	ldr	r3, [pc, #56]	; (8002e38 <MX_TIM6_Init+0x64>)
 8002e00:	2200      	movs	r2, #0
 8002e02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002e04:	480c      	ldr	r0, [pc, #48]	; (8002e38 <MX_TIM6_Init+0x64>)
 8002e06:	f7ff f9cb 	bl	80021a0 <HAL_TIM_Base_Init>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d001      	beq.n	8002e14 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002e10:	f000 f90a 	bl	8003028 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e14:	2300      	movs	r3, #0
 8002e16:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002e1c:	463b      	mov	r3, r7
 8002e1e:	4619      	mov	r1, r3
 8002e20:	4805      	ldr	r0, [pc, #20]	; (8002e38 <MX_TIM6_Init+0x64>)
 8002e22:	f7ff fa89 	bl	8002338 <HAL_TIMEx_MasterConfigSynchronization>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d001      	beq.n	8002e30 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002e2c:	f000 f8fc 	bl	8003028 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002e30:	bf00      	nop
 8002e32:	3708      	adds	r7, #8
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	20000e08 	.word	0x20000e08
 8002e3c:	40001000 	.word	0x40001000

08002e40 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002e44:	4b11      	ldr	r3, [pc, #68]	; (8002e8c <MX_USART2_UART_Init+0x4c>)
 8002e46:	4a12      	ldr	r2, [pc, #72]	; (8002e90 <MX_USART2_UART_Init+0x50>)
 8002e48:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002e4a:	4b10      	ldr	r3, [pc, #64]	; (8002e8c <MX_USART2_UART_Init+0x4c>)
 8002e4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002e50:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002e52:	4b0e      	ldr	r3, [pc, #56]	; (8002e8c <MX_USART2_UART_Init+0x4c>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002e58:	4b0c      	ldr	r3, [pc, #48]	; (8002e8c <MX_USART2_UART_Init+0x4c>)
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002e5e:	4b0b      	ldr	r3, [pc, #44]	; (8002e8c <MX_USART2_UART_Init+0x4c>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002e64:	4b09      	ldr	r3, [pc, #36]	; (8002e8c <MX_USART2_UART_Init+0x4c>)
 8002e66:	220c      	movs	r2, #12
 8002e68:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e6a:	4b08      	ldr	r3, [pc, #32]	; (8002e8c <MX_USART2_UART_Init+0x4c>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e70:	4b06      	ldr	r3, [pc, #24]	; (8002e8c <MX_USART2_UART_Init+0x4c>)
 8002e72:	2200      	movs	r2, #0
 8002e74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002e76:	4805      	ldr	r0, [pc, #20]	; (8002e8c <MX_USART2_UART_Init+0x4c>)
 8002e78:	f7ff faa3 	bl	80023c2 <HAL_UART_Init>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d001      	beq.n	8002e86 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002e82:	f000 f8d1 	bl	8003028 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002e86:	bf00      	nop
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	20000e48 	.word	0x20000e48
 8002e90:	40004400 	.word	0x40004400

08002e94 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b082      	sub	sp, #8
 8002e98:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	607b      	str	r3, [r7, #4]
 8002e9e:	4b10      	ldr	r3, [pc, #64]	; (8002ee0 <MX_DMA_Init+0x4c>)
 8002ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea2:	4a0f      	ldr	r2, [pc, #60]	; (8002ee0 <MX_DMA_Init+0x4c>)
 8002ea4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8002eaa:	4b0d      	ldr	r3, [pc, #52]	; (8002ee0 <MX_DMA_Init+0x4c>)
 8002eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002eb2:	607b      	str	r3, [r7, #4]
 8002eb4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	2100      	movs	r1, #0
 8002eba:	200f      	movs	r0, #15
 8002ebc:	f7fd fc91 	bl	80007e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002ec0:	200f      	movs	r0, #15
 8002ec2:	f7fd fcaa 	bl	800081a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	2100      	movs	r1, #0
 8002eca:	2010      	movs	r0, #16
 8002ecc:	f7fd fc89 	bl	80007e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002ed0:	2010      	movs	r0, #16
 8002ed2:	f7fd fca2 	bl	800081a <HAL_NVIC_EnableIRQ>

}
 8002ed6:	bf00      	nop
 8002ed8:	3708      	adds	r7, #8
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	40023800 	.word	0x40023800

08002ee4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b08a      	sub	sp, #40	; 0x28
 8002ee8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eea:	f107 0314 	add.w	r3, r7, #20
 8002eee:	2200      	movs	r2, #0
 8002ef0:	601a      	str	r2, [r3, #0]
 8002ef2:	605a      	str	r2, [r3, #4]
 8002ef4:	609a      	str	r2, [r3, #8]
 8002ef6:	60da      	str	r2, [r3, #12]
 8002ef8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002efa:	2300      	movs	r3, #0
 8002efc:	613b      	str	r3, [r7, #16]
 8002efe:	4b45      	ldr	r3, [pc, #276]	; (8003014 <MX_GPIO_Init+0x130>)
 8002f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f02:	4a44      	ldr	r2, [pc, #272]	; (8003014 <MX_GPIO_Init+0x130>)
 8002f04:	f043 0304 	orr.w	r3, r3, #4
 8002f08:	6313      	str	r3, [r2, #48]	; 0x30
 8002f0a:	4b42      	ldr	r3, [pc, #264]	; (8003014 <MX_GPIO_Init+0x130>)
 8002f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0e:	f003 0304 	and.w	r3, r3, #4
 8002f12:	613b      	str	r3, [r7, #16]
 8002f14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002f16:	2300      	movs	r3, #0
 8002f18:	60fb      	str	r3, [r7, #12]
 8002f1a:	4b3e      	ldr	r3, [pc, #248]	; (8003014 <MX_GPIO_Init+0x130>)
 8002f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1e:	4a3d      	ldr	r2, [pc, #244]	; (8003014 <MX_GPIO_Init+0x130>)
 8002f20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f24:	6313      	str	r3, [r2, #48]	; 0x30
 8002f26:	4b3b      	ldr	r3, [pc, #236]	; (8003014 <MX_GPIO_Init+0x130>)
 8002f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f2e:	60fb      	str	r3, [r7, #12]
 8002f30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f32:	2300      	movs	r3, #0
 8002f34:	60bb      	str	r3, [r7, #8]
 8002f36:	4b37      	ldr	r3, [pc, #220]	; (8003014 <MX_GPIO_Init+0x130>)
 8002f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3a:	4a36      	ldr	r2, [pc, #216]	; (8003014 <MX_GPIO_Init+0x130>)
 8002f3c:	f043 0301 	orr.w	r3, r3, #1
 8002f40:	6313      	str	r3, [r2, #48]	; 0x30
 8002f42:	4b34      	ldr	r3, [pc, #208]	; (8003014 <MX_GPIO_Init+0x130>)
 8002f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f46:	f003 0301 	and.w	r3, r3, #1
 8002f4a:	60bb      	str	r3, [r7, #8]
 8002f4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f4e:	2300      	movs	r3, #0
 8002f50:	607b      	str	r3, [r7, #4]
 8002f52:	4b30      	ldr	r3, [pc, #192]	; (8003014 <MX_GPIO_Init+0x130>)
 8002f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f56:	4a2f      	ldr	r2, [pc, #188]	; (8003014 <MX_GPIO_Init+0x130>)
 8002f58:	f043 0302 	orr.w	r3, r3, #2
 8002f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f5e:	4b2d      	ldr	r3, [pc, #180]	; (8003014 <MX_GPIO_Init+0x130>)
 8002f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f62:	f003 0302 	and.w	r3, r3, #2
 8002f66:	607b      	str	r3, [r7, #4]
 8002f68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	2120      	movs	r1, #32
 8002f6e:	482a      	ldr	r0, [pc, #168]	; (8003018 <MX_GPIO_Init+0x134>)
 8002f70:	f7fe f98e 	bl	8001290 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002f74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002f7a:	4b28      	ldr	r3, [pc, #160]	; (800301c <MX_GPIO_Init+0x138>)
 8002f7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002f82:	f107 0314 	add.w	r3, r7, #20
 8002f86:	4619      	mov	r1, r3
 8002f88:	4825      	ldr	r0, [pc, #148]	; (8003020 <MX_GPIO_Init+0x13c>)
 8002f8a:	f7fd ffd7 	bl	8000f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : LEFT_Pin RIGHT_Pin */
  GPIO_InitStruct.Pin = LEFT_Pin|RIGHT_Pin;
 8002f8e:	2309      	movs	r3, #9
 8002f90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f92:	2300      	movs	r3, #0
 8002f94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f96:	2300      	movs	r3, #0
 8002f98:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f9a:	f107 0314 	add.w	r3, r7, #20
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	481f      	ldr	r0, [pc, #124]	; (8003020 <MX_GPIO_Init+0x13c>)
 8002fa2:	f7fd ffcb 	bl	8000f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : OPTION_Pin */
  GPIO_InitStruct.Pin = OPTION_Pin;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002faa:	2300      	movs	r3, #0
 8002fac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002fae:	2302      	movs	r3, #2
 8002fb0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(OPTION_GPIO_Port, &GPIO_InitStruct);
 8002fb2:	f107 0314 	add.w	r3, r7, #20
 8002fb6:	4619      	mov	r1, r3
 8002fb8:	4817      	ldr	r0, [pc, #92]	; (8003018 <MX_GPIO_Init+0x134>)
 8002fba:	f7fd ffbf 	bl	8000f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : UP_Pin */
  GPIO_InitStruct.Pin = UP_Pin;
 8002fbe:	2302      	movs	r3, #2
 8002fc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UP_GPIO_Port, &GPIO_InitStruct);
 8002fca:	f107 0314 	add.w	r3, r7, #20
 8002fce:	4619      	mov	r1, r3
 8002fd0:	4811      	ldr	r0, [pc, #68]	; (8003018 <MX_GPIO_Init+0x134>)
 8002fd2:	f7fd ffb3 	bl	8000f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002fd6:	2320      	movs	r3, #32
 8002fd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002fe6:	f107 0314 	add.w	r3, r7, #20
 8002fea:	4619      	mov	r1, r3
 8002fec:	480a      	ldr	r0, [pc, #40]	; (8003018 <MX_GPIO_Init+0x134>)
 8002fee:	f7fd ffa5 	bl	8000f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : DOWN_Pin */
  GPIO_InitStruct.Pin = DOWN_Pin;
 8002ff2:	2380      	movs	r3, #128	; 0x80
 8002ff4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DOWN_GPIO_Port, &GPIO_InitStruct);
 8002ffe:	f107 0314 	add.w	r3, r7, #20
 8003002:	4619      	mov	r1, r3
 8003004:	4807      	ldr	r0, [pc, #28]	; (8003024 <MX_GPIO_Init+0x140>)
 8003006:	f7fd ff99 	bl	8000f3c <HAL_GPIO_Init>

}
 800300a:	bf00      	nop
 800300c:	3728      	adds	r7, #40	; 0x28
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	40023800 	.word	0x40023800
 8003018:	40020000 	.word	0x40020000
 800301c:	10210000 	.word	0x10210000
 8003020:	40020800 	.word	0x40020800
 8003024:	40020400 	.word	0x40020400

08003028 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003028:	b480      	push	{r7}
 800302a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800302c:	bf00      	nop
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr
	...

08003038 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b082      	sub	sp, #8
 800303c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800303e:	2300      	movs	r3, #0
 8003040:	607b      	str	r3, [r7, #4]
 8003042:	4b10      	ldr	r3, [pc, #64]	; (8003084 <HAL_MspInit+0x4c>)
 8003044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003046:	4a0f      	ldr	r2, [pc, #60]	; (8003084 <HAL_MspInit+0x4c>)
 8003048:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800304c:	6453      	str	r3, [r2, #68]	; 0x44
 800304e:	4b0d      	ldr	r3, [pc, #52]	; (8003084 <HAL_MspInit+0x4c>)
 8003050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003052:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003056:	607b      	str	r3, [r7, #4]
 8003058:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800305a:	2300      	movs	r3, #0
 800305c:	603b      	str	r3, [r7, #0]
 800305e:	4b09      	ldr	r3, [pc, #36]	; (8003084 <HAL_MspInit+0x4c>)
 8003060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003062:	4a08      	ldr	r2, [pc, #32]	; (8003084 <HAL_MspInit+0x4c>)
 8003064:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003068:	6413      	str	r3, [r2, #64]	; 0x40
 800306a:	4b06      	ldr	r3, [pc, #24]	; (8003084 <HAL_MspInit+0x4c>)
 800306c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003072:	603b      	str	r3, [r7, #0]
 8003074:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003076:	2007      	movs	r0, #7
 8003078:	f7fd fba8 	bl	80007cc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800307c:	bf00      	nop
 800307e:	3708      	adds	r7, #8
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}
 8003084:	40023800 	.word	0x40023800

08003088 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b08e      	sub	sp, #56	; 0x38
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003090:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003094:	2200      	movs	r2, #0
 8003096:	601a      	str	r2, [r3, #0]
 8003098:	605a      	str	r2, [r3, #4]
 800309a:	609a      	str	r2, [r3, #8]
 800309c:	60da      	str	r2, [r3, #12]
 800309e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a86      	ldr	r2, [pc, #536]	; (80032c0 <HAL_SPI_MspInit+0x238>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	f040 8089 	bne.w	80031be <HAL_SPI_MspInit+0x136>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80030ac:	2300      	movs	r3, #0
 80030ae:	623b      	str	r3, [r7, #32]
 80030b0:	4b84      	ldr	r3, [pc, #528]	; (80032c4 <HAL_SPI_MspInit+0x23c>)
 80030b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b4:	4a83      	ldr	r2, [pc, #524]	; (80032c4 <HAL_SPI_MspInit+0x23c>)
 80030b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030ba:	6413      	str	r3, [r2, #64]	; 0x40
 80030bc:	4b81      	ldr	r3, [pc, #516]	; (80032c4 <HAL_SPI_MspInit+0x23c>)
 80030be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030c4:	623b      	str	r3, [r7, #32]
 80030c6:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80030c8:	2300      	movs	r3, #0
 80030ca:	61fb      	str	r3, [r7, #28]
 80030cc:	4b7d      	ldr	r3, [pc, #500]	; (80032c4 <HAL_SPI_MspInit+0x23c>)
 80030ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d0:	4a7c      	ldr	r2, [pc, #496]	; (80032c4 <HAL_SPI_MspInit+0x23c>)
 80030d2:	f043 0304 	orr.w	r3, r3, #4
 80030d6:	6313      	str	r3, [r2, #48]	; 0x30
 80030d8:	4b7a      	ldr	r3, [pc, #488]	; (80032c4 <HAL_SPI_MspInit+0x23c>)
 80030da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030dc:	f003 0304 	and.w	r3, r3, #4
 80030e0:	61fb      	str	r3, [r7, #28]
 80030e2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030e4:	2300      	movs	r3, #0
 80030e6:	61bb      	str	r3, [r7, #24]
 80030e8:	4b76      	ldr	r3, [pc, #472]	; (80032c4 <HAL_SPI_MspInit+0x23c>)
 80030ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ec:	4a75      	ldr	r2, [pc, #468]	; (80032c4 <HAL_SPI_MspInit+0x23c>)
 80030ee:	f043 0302 	orr.w	r3, r3, #2
 80030f2:	6313      	str	r3, [r2, #48]	; 0x30
 80030f4:	4b73      	ldr	r3, [pc, #460]	; (80032c4 <HAL_SPI_MspInit+0x23c>)
 80030f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f8:	f003 0302 	and.w	r3, r3, #2
 80030fc:	61bb      	str	r3, [r7, #24]
 80030fe:	69bb      	ldr	r3, [r7, #24]
    /**SPI2 GPIO Configuration    
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PB10     ------> SPI2_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003100:	2302      	movs	r3, #2
 8003102:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003104:	2302      	movs	r3, #2
 8003106:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003108:	2302      	movs	r3, #2
 800310a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800310c:	2303      	movs	r3, #3
 800310e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8003110:	2307      	movs	r3, #7
 8003112:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003114:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003118:	4619      	mov	r1, r3
 800311a:	486b      	ldr	r0, [pc, #428]	; (80032c8 <HAL_SPI_MspInit+0x240>)
 800311c:	f7fd ff0e 	bl	8000f3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003120:	2304      	movs	r3, #4
 8003122:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003124:	2302      	movs	r3, #2
 8003126:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003128:	2300      	movs	r3, #0
 800312a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800312c:	2303      	movs	r3, #3
 800312e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003130:	2305      	movs	r3, #5
 8003132:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003134:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003138:	4619      	mov	r1, r3
 800313a:	4863      	ldr	r0, [pc, #396]	; (80032c8 <HAL_SPI_MspInit+0x240>)
 800313c:	f7fd fefe 	bl	8000f3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003140:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003144:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003146:	2302      	movs	r3, #2
 8003148:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800314a:	2300      	movs	r3, #0
 800314c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800314e:	2303      	movs	r3, #3
 8003150:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003152:	2305      	movs	r3, #5
 8003154:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003156:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800315a:	4619      	mov	r1, r3
 800315c:	485b      	ldr	r0, [pc, #364]	; (80032cc <HAL_SPI_MspInit+0x244>)
 800315e:	f7fd feed 	bl	8000f3c <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8003162:	4b5b      	ldr	r3, [pc, #364]	; (80032d0 <HAL_SPI_MspInit+0x248>)
 8003164:	4a5b      	ldr	r2, [pc, #364]	; (80032d4 <HAL_SPI_MspInit+0x24c>)
 8003166:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8003168:	4b59      	ldr	r3, [pc, #356]	; (80032d0 <HAL_SPI_MspInit+0x248>)
 800316a:	2200      	movs	r2, #0
 800316c:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800316e:	4b58      	ldr	r3, [pc, #352]	; (80032d0 <HAL_SPI_MspInit+0x248>)
 8003170:	2240      	movs	r2, #64	; 0x40
 8003172:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003174:	4b56      	ldr	r3, [pc, #344]	; (80032d0 <HAL_SPI_MspInit+0x248>)
 8003176:	2200      	movs	r2, #0
 8003178:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800317a:	4b55      	ldr	r3, [pc, #340]	; (80032d0 <HAL_SPI_MspInit+0x248>)
 800317c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003180:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003182:	4b53      	ldr	r3, [pc, #332]	; (80032d0 <HAL_SPI_MspInit+0x248>)
 8003184:	2200      	movs	r2, #0
 8003186:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003188:	4b51      	ldr	r3, [pc, #324]	; (80032d0 <HAL_SPI_MspInit+0x248>)
 800318a:	2200      	movs	r2, #0
 800318c:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 800318e:	4b50      	ldr	r3, [pc, #320]	; (80032d0 <HAL_SPI_MspInit+0x248>)
 8003190:	2200      	movs	r2, #0
 8003192:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003194:	4b4e      	ldr	r3, [pc, #312]	; (80032d0 <HAL_SPI_MspInit+0x248>)
 8003196:	2200      	movs	r2, #0
 8003198:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800319a:	4b4d      	ldr	r3, [pc, #308]	; (80032d0 <HAL_SPI_MspInit+0x248>)
 800319c:	2200      	movs	r2, #0
 800319e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80031a0:	484b      	ldr	r0, [pc, #300]	; (80032d0 <HAL_SPI_MspInit+0x248>)
 80031a2:	f7fd fb55 	bl	8000850 <HAL_DMA_Init>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d001      	beq.n	80031b0 <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 80031ac:	f7ff ff3c 	bl	8003028 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	4a47      	ldr	r2, [pc, #284]	; (80032d0 <HAL_SPI_MspInit+0x248>)
 80031b4:	649a      	str	r2, [r3, #72]	; 0x48
 80031b6:	4a46      	ldr	r2, [pc, #280]	; (80032d0 <HAL_SPI_MspInit+0x248>)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80031bc:	e07c      	b.n	80032b8 <HAL_SPI_MspInit+0x230>
  else if(hspi->Instance==SPI3)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a45      	ldr	r2, [pc, #276]	; (80032d8 <HAL_SPI_MspInit+0x250>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d177      	bne.n	80032b8 <HAL_SPI_MspInit+0x230>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80031c8:	2300      	movs	r3, #0
 80031ca:	617b      	str	r3, [r7, #20]
 80031cc:	4b3d      	ldr	r3, [pc, #244]	; (80032c4 <HAL_SPI_MspInit+0x23c>)
 80031ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d0:	4a3c      	ldr	r2, [pc, #240]	; (80032c4 <HAL_SPI_MspInit+0x23c>)
 80031d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031d6:	6413      	str	r3, [r2, #64]	; 0x40
 80031d8:	4b3a      	ldr	r3, [pc, #232]	; (80032c4 <HAL_SPI_MspInit+0x23c>)
 80031da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031e0:	617b      	str	r3, [r7, #20]
 80031e2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031e4:	2300      	movs	r3, #0
 80031e6:	613b      	str	r3, [r7, #16]
 80031e8:	4b36      	ldr	r3, [pc, #216]	; (80032c4 <HAL_SPI_MspInit+0x23c>)
 80031ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ec:	4a35      	ldr	r2, [pc, #212]	; (80032c4 <HAL_SPI_MspInit+0x23c>)
 80031ee:	f043 0302 	orr.w	r3, r3, #2
 80031f2:	6313      	str	r3, [r2, #48]	; 0x30
 80031f4:	4b33      	ldr	r3, [pc, #204]	; (80032c4 <HAL_SPI_MspInit+0x23c>)
 80031f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f8:	f003 0302 	and.w	r3, r3, #2
 80031fc:	613b      	str	r3, [r7, #16]
 80031fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003200:	2300      	movs	r3, #0
 8003202:	60fb      	str	r3, [r7, #12]
 8003204:	4b2f      	ldr	r3, [pc, #188]	; (80032c4 <HAL_SPI_MspInit+0x23c>)
 8003206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003208:	4a2e      	ldr	r2, [pc, #184]	; (80032c4 <HAL_SPI_MspInit+0x23c>)
 800320a:	f043 0304 	orr.w	r3, r3, #4
 800320e:	6313      	str	r3, [r2, #48]	; 0x30
 8003210:	4b2c      	ldr	r3, [pc, #176]	; (80032c4 <HAL_SPI_MspInit+0x23c>)
 8003212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003214:	f003 0304 	and.w	r3, r3, #4
 8003218:	60fb      	str	r3, [r7, #12]
 800321a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800321c:	2304      	movs	r3, #4
 800321e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003220:	2302      	movs	r3, #2
 8003222:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003224:	2300      	movs	r3, #0
 8003226:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003228:	2303      	movs	r3, #3
 800322a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 800322c:	2307      	movs	r3, #7
 800322e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003230:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003234:	4619      	mov	r1, r3
 8003236:	4825      	ldr	r0, [pc, #148]	; (80032cc <HAL_SPI_MspInit+0x244>)
 8003238:	f7fd fe80 	bl	8000f3c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800323c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003240:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003242:	2302      	movs	r3, #2
 8003244:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003246:	2300      	movs	r3, #0
 8003248:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800324a:	2303      	movs	r3, #3
 800324c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800324e:	2306      	movs	r3, #6
 8003250:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003252:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003256:	4619      	mov	r1, r3
 8003258:	481b      	ldr	r0, [pc, #108]	; (80032c8 <HAL_SPI_MspInit+0x240>)
 800325a:	f7fd fe6f 	bl	8000f3c <HAL_GPIO_Init>
    hdma_spi3_tx.Instance = DMA1_Stream5;
 800325e:	4b1f      	ldr	r3, [pc, #124]	; (80032dc <HAL_SPI_MspInit+0x254>)
 8003260:	4a1f      	ldr	r2, [pc, #124]	; (80032e0 <HAL_SPI_MspInit+0x258>)
 8003262:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8003264:	4b1d      	ldr	r3, [pc, #116]	; (80032dc <HAL_SPI_MspInit+0x254>)
 8003266:	2200      	movs	r2, #0
 8003268:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800326a:	4b1c      	ldr	r3, [pc, #112]	; (80032dc <HAL_SPI_MspInit+0x254>)
 800326c:	2240      	movs	r2, #64	; 0x40
 800326e:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003270:	4b1a      	ldr	r3, [pc, #104]	; (80032dc <HAL_SPI_MspInit+0x254>)
 8003272:	2200      	movs	r2, #0
 8003274:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003276:	4b19      	ldr	r3, [pc, #100]	; (80032dc <HAL_SPI_MspInit+0x254>)
 8003278:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800327c:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800327e:	4b17      	ldr	r3, [pc, #92]	; (80032dc <HAL_SPI_MspInit+0x254>)
 8003280:	2200      	movs	r2, #0
 8003282:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003284:	4b15      	ldr	r3, [pc, #84]	; (80032dc <HAL_SPI_MspInit+0x254>)
 8003286:	2200      	movs	r2, #0
 8003288:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 800328a:	4b14      	ldr	r3, [pc, #80]	; (80032dc <HAL_SPI_MspInit+0x254>)
 800328c:	2200      	movs	r2, #0
 800328e:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003290:	4b12      	ldr	r3, [pc, #72]	; (80032dc <HAL_SPI_MspInit+0x254>)
 8003292:	2200      	movs	r2, #0
 8003294:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003296:	4b11      	ldr	r3, [pc, #68]	; (80032dc <HAL_SPI_MspInit+0x254>)
 8003298:	2200      	movs	r2, #0
 800329a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 800329c:	480f      	ldr	r0, [pc, #60]	; (80032dc <HAL_SPI_MspInit+0x254>)
 800329e:	f7fd fad7 	bl	8000850 <HAL_DMA_Init>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d001      	beq.n	80032ac <HAL_SPI_MspInit+0x224>
      Error_Handler();
 80032a8:	f7ff febe 	bl	8003028 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi3_tx);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	4a0b      	ldr	r2, [pc, #44]	; (80032dc <HAL_SPI_MspInit+0x254>)
 80032b0:	649a      	str	r2, [r3, #72]	; 0x48
 80032b2:	4a0a      	ldr	r2, [pc, #40]	; (80032dc <HAL_SPI_MspInit+0x254>)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6393      	str	r3, [r2, #56]	; 0x38
}
 80032b8:	bf00      	nop
 80032ba:	3738      	adds	r7, #56	; 0x38
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	40003800 	.word	0x40003800
 80032c4:	40023800 	.word	0x40023800
 80032c8:	40020800 	.word	0x40020800
 80032cc:	40020400 	.word	0x40020400
 80032d0:	20000e88 	.word	0x20000e88
 80032d4:	40026070 	.word	0x40026070
 80032d8:	40003c00 	.word	0x40003c00
 80032dc:	20000da8 	.word	0x20000da8
 80032e0:	40026088 	.word	0x40026088

080032e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b085      	sub	sp, #20
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a0b      	ldr	r2, [pc, #44]	; (8003320 <HAL_TIM_Base_MspInit+0x3c>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d10d      	bne.n	8003312 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80032f6:	2300      	movs	r3, #0
 80032f8:	60fb      	str	r3, [r7, #12]
 80032fa:	4b0a      	ldr	r3, [pc, #40]	; (8003324 <HAL_TIM_Base_MspInit+0x40>)
 80032fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fe:	4a09      	ldr	r2, [pc, #36]	; (8003324 <HAL_TIM_Base_MspInit+0x40>)
 8003300:	f043 0310 	orr.w	r3, r3, #16
 8003304:	6413      	str	r3, [r2, #64]	; 0x40
 8003306:	4b07      	ldr	r3, [pc, #28]	; (8003324 <HAL_TIM_Base_MspInit+0x40>)
 8003308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330a:	f003 0310 	and.w	r3, r3, #16
 800330e:	60fb      	str	r3, [r7, #12]
 8003310:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8003312:	bf00      	nop
 8003314:	3714      	adds	r7, #20
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr
 800331e:	bf00      	nop
 8003320:	40001000 	.word	0x40001000
 8003324:	40023800 	.word	0x40023800

08003328 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b08a      	sub	sp, #40	; 0x28
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003330:	f107 0314 	add.w	r3, r7, #20
 8003334:	2200      	movs	r2, #0
 8003336:	601a      	str	r2, [r3, #0]
 8003338:	605a      	str	r2, [r3, #4]
 800333a:	609a      	str	r2, [r3, #8]
 800333c:	60da      	str	r2, [r3, #12]
 800333e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a19      	ldr	r2, [pc, #100]	; (80033ac <HAL_UART_MspInit+0x84>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d12b      	bne.n	80033a2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800334a:	2300      	movs	r3, #0
 800334c:	613b      	str	r3, [r7, #16]
 800334e:	4b18      	ldr	r3, [pc, #96]	; (80033b0 <HAL_UART_MspInit+0x88>)
 8003350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003352:	4a17      	ldr	r2, [pc, #92]	; (80033b0 <HAL_UART_MspInit+0x88>)
 8003354:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003358:	6413      	str	r3, [r2, #64]	; 0x40
 800335a:	4b15      	ldr	r3, [pc, #84]	; (80033b0 <HAL_UART_MspInit+0x88>)
 800335c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003362:	613b      	str	r3, [r7, #16]
 8003364:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003366:	2300      	movs	r3, #0
 8003368:	60fb      	str	r3, [r7, #12]
 800336a:	4b11      	ldr	r3, [pc, #68]	; (80033b0 <HAL_UART_MspInit+0x88>)
 800336c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800336e:	4a10      	ldr	r2, [pc, #64]	; (80033b0 <HAL_UART_MspInit+0x88>)
 8003370:	f043 0301 	orr.w	r3, r3, #1
 8003374:	6313      	str	r3, [r2, #48]	; 0x30
 8003376:	4b0e      	ldr	r3, [pc, #56]	; (80033b0 <HAL_UART_MspInit+0x88>)
 8003378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800337a:	f003 0301 	and.w	r3, r3, #1
 800337e:	60fb      	str	r3, [r7, #12]
 8003380:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003382:	230c      	movs	r3, #12
 8003384:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003386:	2302      	movs	r3, #2
 8003388:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800338a:	2301      	movs	r3, #1
 800338c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800338e:	2303      	movs	r3, #3
 8003390:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003392:	2307      	movs	r3, #7
 8003394:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003396:	f107 0314 	add.w	r3, r7, #20
 800339a:	4619      	mov	r1, r3
 800339c:	4805      	ldr	r0, [pc, #20]	; (80033b4 <HAL_UART_MspInit+0x8c>)
 800339e:	f7fd fdcd 	bl	8000f3c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80033a2:	bf00      	nop
 80033a4:	3728      	adds	r7, #40	; 0x28
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	40004400 	.word	0x40004400
 80033b0:	40023800 	.word	0x40023800
 80033b4:	40020000 	.word	0x40020000

080033b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80033b8:	b480      	push	{r7}
 80033ba:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80033bc:	bf00      	nop
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr

080033c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80033c6:	b480      	push	{r7}
 80033c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80033ca:	e7fe      	b.n	80033ca <HardFault_Handler+0x4>

080033cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80033cc:	b480      	push	{r7}
 80033ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80033d0:	e7fe      	b.n	80033d0 <MemManage_Handler+0x4>

080033d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80033d2:	b480      	push	{r7}
 80033d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80033d6:	e7fe      	b.n	80033d6 <BusFault_Handler+0x4>

080033d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80033d8:	b480      	push	{r7}
 80033da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80033dc:	e7fe      	b.n	80033dc <UsageFault_Handler+0x4>

080033de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80033de:	b480      	push	{r7}
 80033e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80033e2:	bf00      	nop
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr

080033ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80033ec:	b480      	push	{r7}
 80033ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80033f0:	bf00      	nop
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr

080033fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80033fa:	b480      	push	{r7}
 80033fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80033fe:	bf00      	nop
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr

08003408 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800340c:	f7fd f8cc 	bl	80005a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003410:	bf00      	nop
 8003412:	bd80      	pop	{r7, pc}

08003414 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8003418:	4802      	ldr	r0, [pc, #8]	; (8003424 <DMA1_Stream4_IRQHandler+0x10>)
 800341a:	f7fd fb27 	bl	8000a6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800341e:	bf00      	nop
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	20000e88 	.word	0x20000e88

08003428 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 800342c:	4802      	ldr	r0, [pc, #8]	; (8003438 <DMA1_Stream5_IRQHandler+0x10>)
 800342e:	f7fd fb1d 	bl	8000a6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003432:	bf00      	nop
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	20000da8 	.word	0x20000da8

0800343c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b084      	sub	sp, #16
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003444:	4b11      	ldr	r3, [pc, #68]	; (800348c <_sbrk+0x50>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d102      	bne.n	8003452 <_sbrk+0x16>
		heap_end = &end;
 800344c:	4b0f      	ldr	r3, [pc, #60]	; (800348c <_sbrk+0x50>)
 800344e:	4a10      	ldr	r2, [pc, #64]	; (8003490 <_sbrk+0x54>)
 8003450:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003452:	4b0e      	ldr	r3, [pc, #56]	; (800348c <_sbrk+0x50>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003458:	4b0c      	ldr	r3, [pc, #48]	; (800348c <_sbrk+0x50>)
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	4413      	add	r3, r2
 8003460:	466a      	mov	r2, sp
 8003462:	4293      	cmp	r3, r2
 8003464:	d907      	bls.n	8003476 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003466:	f001 f895 	bl	8004594 <__errno>
 800346a:	4602      	mov	r2, r0
 800346c:	230c      	movs	r3, #12
 800346e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8003470:	f04f 33ff 	mov.w	r3, #4294967295
 8003474:	e006      	b.n	8003484 <_sbrk+0x48>
	}

	heap_end += incr;
 8003476:	4b05      	ldr	r3, [pc, #20]	; (800348c <_sbrk+0x50>)
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4413      	add	r3, r2
 800347e:	4a03      	ldr	r2, [pc, #12]	; (800348c <_sbrk+0x50>)
 8003480:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003482:	68fb      	ldr	r3, [r7, #12]
}
 8003484:	4618      	mov	r0, r3
 8003486:	3710      	adds	r7, #16
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}
 800348c:	20000bdc 	.word	0x20000bdc
 8003490:	20000ef0 	.word	0x20000ef0

08003494 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003494:	b480      	push	{r7}
 8003496:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003498:	4b16      	ldr	r3, [pc, #88]	; (80034f4 <SystemInit+0x60>)
 800349a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800349e:	4a15      	ldr	r2, [pc, #84]	; (80034f4 <SystemInit+0x60>)
 80034a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80034a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80034a8:	4b13      	ldr	r3, [pc, #76]	; (80034f8 <SystemInit+0x64>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a12      	ldr	r2, [pc, #72]	; (80034f8 <SystemInit+0x64>)
 80034ae:	f043 0301 	orr.w	r3, r3, #1
 80034b2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80034b4:	4b10      	ldr	r3, [pc, #64]	; (80034f8 <SystemInit+0x64>)
 80034b6:	2200      	movs	r2, #0
 80034b8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80034ba:	4b0f      	ldr	r3, [pc, #60]	; (80034f8 <SystemInit+0x64>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a0e      	ldr	r2, [pc, #56]	; (80034f8 <SystemInit+0x64>)
 80034c0:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80034c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034c8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80034ca:	4b0b      	ldr	r3, [pc, #44]	; (80034f8 <SystemInit+0x64>)
 80034cc:	4a0b      	ldr	r2, [pc, #44]	; (80034fc <SystemInit+0x68>)
 80034ce:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80034d0:	4b09      	ldr	r3, [pc, #36]	; (80034f8 <SystemInit+0x64>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a08      	ldr	r2, [pc, #32]	; (80034f8 <SystemInit+0x64>)
 80034d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034da:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80034dc:	4b06      	ldr	r3, [pc, #24]	; (80034f8 <SystemInit+0x64>)
 80034de:	2200      	movs	r2, #0
 80034e0:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80034e2:	4b04      	ldr	r3, [pc, #16]	; (80034f4 <SystemInit+0x60>)
 80034e4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80034e8:	609a      	str	r2, [r3, #8]
#endif
}
 80034ea:	bf00      	nop
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr
 80034f4:	e000ed00 	.word	0xe000ed00
 80034f8:	40023800 	.word	0x40023800
 80034fc:	24003010 	.word	0x24003010

08003500 <playTetris>:
		0x86,0x86,0x00,
		0x86,0x00,0x00,
	}
};

void playTetris(){
 8003500:	b580      	push	{r7, lr}
 8003502:	b082      	sub	sp, #8
 8003504:	af00      	add	r7, sp, #0
	static int tetrisState = 0;
	static int cnt = 0;

	if(tetrisState == 0){
 8003506:	4b49      	ldr	r3, [pc, #292]	; (800362c <playTetris+0x12c>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d107      	bne.n	800351e <playTetris+0x1e>
		newBlock();
 800350e:	f000 f975 	bl	80037fc <newBlock>
		tetrisState++;
 8003512:	4b46      	ldr	r3, [pc, #280]	; (800362c <playTetris+0x12c>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	3301      	adds	r3, #1
 8003518:	4a44      	ldr	r2, [pc, #272]	; (800362c <playTetris+0x12c>)
 800351a:	6013      	str	r3, [r2, #0]
 800351c:	e04b      	b.n	80035b6 <playTetris+0xb6>
	}else if(tetrisState <= 10){
 800351e:	4b43      	ldr	r3, [pc, #268]	; (800362c <playTetris+0x12c>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	2b0a      	cmp	r3, #10
 8003524:	dc42      	bgt.n	80035ac <playTetris+0xac>
		if(downButton()){
 8003526:	f7ff fb31 	bl	8002b8c <downButton>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d00d      	beq.n	800354c <playTetris+0x4c>
			if(fallBlock()) tetrisState++;
 8003530:	f000 fa34 	bl	800399c <fallBlock>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	d005      	beq.n	8003546 <playTetris+0x46>
 800353a:	4b3c      	ldr	r3, [pc, #240]	; (800362c <playTetris+0x12c>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	3301      	adds	r3, #1
 8003540:	4a3a      	ldr	r2, [pc, #232]	; (800362c <playTetris+0x12c>)
 8003542:	6013      	str	r3, [r2, #0]
 8003544:	e002      	b.n	800354c <playTetris+0x4c>
			else tetrisState = 1;
 8003546:	4b39      	ldr	r3, [pc, #228]	; (800362c <playTetris+0x12c>)
 8003548:	2201      	movs	r2, #1
 800354a:	601a      	str	r2, [r3, #0]
		}

		cnt++;
 800354c:	4b38      	ldr	r3, [pc, #224]	; (8003630 <playTetris+0x130>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	3301      	adds	r3, #1
 8003552:	4a37      	ldr	r2, [pc, #220]	; (8003630 <playTetris+0x130>)
 8003554:	6013      	str	r3, [r2, #0]
		if(cnt >= 10){
 8003556:	4b36      	ldr	r3, [pc, #216]	; (8003630 <playTetris+0x130>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	2b09      	cmp	r3, #9
 800355c:	dd10      	ble.n	8003580 <playTetris+0x80>
			if(fallBlock()) tetrisState++;
 800355e:	f000 fa1d 	bl	800399c <fallBlock>
 8003562:	4603      	mov	r3, r0
 8003564:	2b00      	cmp	r3, #0
 8003566:	d005      	beq.n	8003574 <playTetris+0x74>
 8003568:	4b30      	ldr	r3, [pc, #192]	; (800362c <playTetris+0x12c>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	3301      	adds	r3, #1
 800356e:	4a2f      	ldr	r2, [pc, #188]	; (800362c <playTetris+0x12c>)
 8003570:	6013      	str	r3, [r2, #0]
 8003572:	e002      	b.n	800357a <playTetris+0x7a>
			else tetrisState = 1;
 8003574:	4b2d      	ldr	r3, [pc, #180]	; (800362c <playTetris+0x12c>)
 8003576:	2201      	movs	r2, #1
 8003578:	601a      	str	r2, [r3, #0]
			cnt = 0;
 800357a:	4b2d      	ldr	r3, [pc, #180]	; (8003630 <playTetris+0x130>)
 800357c:	2200      	movs	r2, #0
 800357e:	601a      	str	r2, [r3, #0]
		}

		if(leftButton()) leftBlock();
 8003580:	f7ff fa8c 	bl	8002a9c <leftButton>
 8003584:	4603      	mov	r3, r0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d001      	beq.n	800358e <playTetris+0x8e>
 800358a:	f000 fa9b 	bl	8003ac4 <leftBlock>
		if(rightButton()) rightBlock();
 800358e:	f7ff faad 	bl	8002aec <rightButton>
 8003592:	4603      	mov	r3, r0
 8003594:	2b00      	cmp	r3, #0
 8003596:	d001      	beq.n	800359c <playTetris+0x9c>
 8003598:	f000 fb28 	bl	8003bec <rightBlock>
		if(upButton()) turnBlock();
 800359c:	f7ff face 	bl	8002b3c <upButton>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d007      	beq.n	80035b6 <playTetris+0xb6>
 80035a6:	f000 fbf9 	bl	8003d9c <turnBlock>
 80035aa:	e004      	b.n	80035b6 <playTetris+0xb6>

	}else {
		fixedBlock();
 80035ac:	f000 fbb4 	bl	8003d18 <fixedBlock>
		tetrisState = 0;
 80035b0:	4b1e      	ldr	r3, [pc, #120]	; (800362c <playTetris+0x12c>)
 80035b2:	2200      	movs	r2, #0
 80035b4:	601a      	str	r2, [r3, #0]
	}
	if(deleteLine()) tetrisState = 10;
 80035b6:	f000 fe5b 	bl	8004270 <deleteLine>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d003      	beq.n	80035c8 <playTetris+0xc8>
 80035c0:	4b1a      	ldr	r3, [pc, #104]	; (800362c <playTetris+0x12c>)
 80035c2:	220a      	movs	r2, #10
 80035c4:	601a      	str	r2, [r3, #0]
 80035c6:	e006      	b.n	80035d6 <playTetris+0xd6>
	else if(tetrisState == 10) tetrisState = 11;
 80035c8:	4b18      	ldr	r3, [pc, #96]	; (800362c <playTetris+0x12c>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	2b0a      	cmp	r3, #10
 80035ce:	d102      	bne.n	80035d6 <playTetris+0xd6>
 80035d0:	4b16      	ldr	r3, [pc, #88]	; (800362c <playTetris+0x12c>)
 80035d2:	220b      	movs	r2, #11
 80035d4:	601a      	str	r2, [r3, #0]
	if(gameOver()){
 80035d6:	f000 ff77 	bl	80044c8 <gameOver>
 80035da:	4603      	mov	r3, r0
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d01c      	beq.n	800361a <playTetris+0x11a>
		for(int j = 0;j < 10;j++){
 80035e0:	2300      	movs	r3, #0
 80035e2:	607b      	str	r3, [r7, #4]
 80035e4:	e016      	b.n	8003614 <playTetris+0x114>
			for(int i = 0;i < 24;i++){
 80035e6:	2300      	movs	r3, #0
 80035e8:	603b      	str	r3, [r7, #0]
 80035ea:	e00d      	b.n	8003608 <playTetris+0x108>
				bord[i][j] = 0x00;
 80035ec:	4911      	ldr	r1, [pc, #68]	; (8003634 <playTetris+0x134>)
 80035ee:	683a      	ldr	r2, [r7, #0]
 80035f0:	4613      	mov	r3, r2
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	4413      	add	r3, r2
 80035f6:	005b      	lsls	r3, r3, #1
 80035f8:	18ca      	adds	r2, r1, r3
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4413      	add	r3, r2
 80035fe:	2200      	movs	r2, #0
 8003600:	701a      	strb	r2, [r3, #0]
			for(int i = 0;i < 24;i++){
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	3301      	adds	r3, #1
 8003606:	603b      	str	r3, [r7, #0]
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	2b17      	cmp	r3, #23
 800360c:	ddee      	ble.n	80035ec <playTetris+0xec>
		for(int j = 0;j < 10;j++){
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	3301      	adds	r3, #1
 8003612:	607b      	str	r3, [r7, #4]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2b09      	cmp	r3, #9
 8003618:	dde5      	ble.n	80035e6 <playTetris+0xe6>

			}
		}
	}
	displayBoard();
 800361a:	f000 f80d 	bl	8003638 <displayBoard>
	HAL_Delay(50);
 800361e:	2032      	movs	r0, #50	; 0x32
 8003620:	f7fc ffe2 	bl	80005e8 <HAL_Delay>
}
 8003624:	bf00      	nop
 8003626:	3708      	adds	r7, #8
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}
 800362c:	20000cd0 	.word	0x20000cd0
 8003630:	20000cd4 	.word	0x20000cd4
 8003634:	20000be0 	.word	0x20000be0

08003638 <displayBoard>:

void displayBoard(){
 8003638:	b480      	push	{r7}
 800363a:	b083      	sub	sp, #12
 800363c:	af00      	add	r7, sp, #0
	for(int i = 0;i < 20;i++){
 800363e:	2300      	movs	r3, #0
 8003640:	607b      	str	r3, [r7, #4]
 8003642:	e0cd      	b.n	80037e0 <displayBoard+0x1a8>
		for(int j = 0;j < 10;j++){
 8003644:	2300      	movs	r3, #0
 8003646:	603b      	str	r3, [r7, #0]
 8003648:	e0c3      	b.n	80037d2 <displayBoard+0x19a>
			if((bord[i][j] & 0x7F) == 0x01) monitor[i][j] = 0x02;
 800364a:	496a      	ldr	r1, [pc, #424]	; (80037f4 <displayBoard+0x1bc>)
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	4613      	mov	r3, r2
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	4413      	add	r3, r2
 8003654:	005b      	lsls	r3, r3, #1
 8003656:	18ca      	adds	r2, r1, r3
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	4413      	add	r3, r2
 800365c:	781b      	ldrb	r3, [r3, #0]
 800365e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003662:	2b01      	cmp	r3, #1
 8003664:	d10b      	bne.n	800367e <displayBoard+0x46>
 8003666:	4964      	ldr	r1, [pc, #400]	; (80037f8 <displayBoard+0x1c0>)
 8003668:	687a      	ldr	r2, [r7, #4]
 800366a:	4613      	mov	r3, r2
 800366c:	009b      	lsls	r3, r3, #2
 800366e:	4413      	add	r3, r2
 8003670:	005b      	lsls	r3, r3, #1
 8003672:	18ca      	adds	r2, r1, r3
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	4413      	add	r3, r2
 8003678:	2202      	movs	r2, #2
 800367a:	701a      	strb	r2, [r3, #0]
 800367c:	e0a6      	b.n	80037cc <displayBoard+0x194>
			else if((bord[i][j] & 0x7F) == 0x02) monitor[i][j] = 0x0C;
 800367e:	495d      	ldr	r1, [pc, #372]	; (80037f4 <displayBoard+0x1bc>)
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	4613      	mov	r3, r2
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	4413      	add	r3, r2
 8003688:	005b      	lsls	r3, r3, #1
 800368a:	18ca      	adds	r2, r1, r3
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	4413      	add	r3, r2
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003696:	2b02      	cmp	r3, #2
 8003698:	d10b      	bne.n	80036b2 <displayBoard+0x7a>
 800369a:	4957      	ldr	r1, [pc, #348]	; (80037f8 <displayBoard+0x1c0>)
 800369c:	687a      	ldr	r2, [r7, #4]
 800369e:	4613      	mov	r3, r2
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	4413      	add	r3, r2
 80036a4:	005b      	lsls	r3, r3, #1
 80036a6:	18ca      	adds	r2, r1, r3
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	4413      	add	r3, r2
 80036ac:	220c      	movs	r2, #12
 80036ae:	701a      	strb	r2, [r3, #0]
 80036b0:	e08c      	b.n	80037cc <displayBoard+0x194>
			else if((bord[i][j] & 0x7F) == 0x03) monitor[i][j] = 0x20;
 80036b2:	4950      	ldr	r1, [pc, #320]	; (80037f4 <displayBoard+0x1bc>)
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	4613      	mov	r3, r2
 80036b8:	009b      	lsls	r3, r3, #2
 80036ba:	4413      	add	r3, r2
 80036bc:	005b      	lsls	r3, r3, #1
 80036be:	18ca      	adds	r2, r1, r3
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	4413      	add	r3, r2
 80036c4:	781b      	ldrb	r3, [r3, #0]
 80036c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036ca:	2b03      	cmp	r3, #3
 80036cc:	d10b      	bne.n	80036e6 <displayBoard+0xae>
 80036ce:	494a      	ldr	r1, [pc, #296]	; (80037f8 <displayBoard+0x1c0>)
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	4613      	mov	r3, r2
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	4413      	add	r3, r2
 80036d8:	005b      	lsls	r3, r3, #1
 80036da:	18ca      	adds	r2, r1, r3
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	4413      	add	r3, r2
 80036e0:	2220      	movs	r2, #32
 80036e2:	701a      	strb	r2, [r3, #0]
 80036e4:	e072      	b.n	80037cc <displayBoard+0x194>
			else if((bord[i][j] & 0x7F) == 0x04) monitor[i][j] = 0x05;
 80036e6:	4943      	ldr	r1, [pc, #268]	; (80037f4 <displayBoard+0x1bc>)
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	4613      	mov	r3, r2
 80036ec:	009b      	lsls	r3, r3, #2
 80036ee:	4413      	add	r3, r2
 80036f0:	005b      	lsls	r3, r3, #1
 80036f2:	18ca      	adds	r2, r1, r3
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	4413      	add	r3, r2
 80036f8:	781b      	ldrb	r3, [r3, #0]
 80036fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036fe:	2b04      	cmp	r3, #4
 8003700:	d10b      	bne.n	800371a <displayBoard+0xe2>
 8003702:	493d      	ldr	r1, [pc, #244]	; (80037f8 <displayBoard+0x1c0>)
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	4613      	mov	r3, r2
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	4413      	add	r3, r2
 800370c:	005b      	lsls	r3, r3, #1
 800370e:	18ca      	adds	r2, r1, r3
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	4413      	add	r3, r2
 8003714:	2205      	movs	r2, #5
 8003716:	701a      	strb	r2, [r3, #0]
 8003718:	e058      	b.n	80037cc <displayBoard+0x194>
			else if((bord[i][j] & 0x7F) == 0x05) monitor[i][j] = 0x11;
 800371a:	4936      	ldr	r1, [pc, #216]	; (80037f4 <displayBoard+0x1bc>)
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	4613      	mov	r3, r2
 8003720:	009b      	lsls	r3, r3, #2
 8003722:	4413      	add	r3, r2
 8003724:	005b      	lsls	r3, r3, #1
 8003726:	18ca      	adds	r2, r1, r3
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	4413      	add	r3, r2
 800372c:	781b      	ldrb	r3, [r3, #0]
 800372e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003732:	2b05      	cmp	r3, #5
 8003734:	d10b      	bne.n	800374e <displayBoard+0x116>
 8003736:	4930      	ldr	r1, [pc, #192]	; (80037f8 <displayBoard+0x1c0>)
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	4613      	mov	r3, r2
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	4413      	add	r3, r2
 8003740:	005b      	lsls	r3, r3, #1
 8003742:	18ca      	adds	r2, r1, r3
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	4413      	add	r3, r2
 8003748:	2211      	movs	r2, #17
 800374a:	701a      	strb	r2, [r3, #0]
 800374c:	e03e      	b.n	80037cc <displayBoard+0x194>
			else if((bord[i][j] & 0x7F) == 0x06) monitor[i][j] = 0x14;
 800374e:	4929      	ldr	r1, [pc, #164]	; (80037f4 <displayBoard+0x1bc>)
 8003750:	687a      	ldr	r2, [r7, #4]
 8003752:	4613      	mov	r3, r2
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	4413      	add	r3, r2
 8003758:	005b      	lsls	r3, r3, #1
 800375a:	18ca      	adds	r2, r1, r3
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	4413      	add	r3, r2
 8003760:	781b      	ldrb	r3, [r3, #0]
 8003762:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003766:	2b06      	cmp	r3, #6
 8003768:	d10b      	bne.n	8003782 <displayBoard+0x14a>
 800376a:	4923      	ldr	r1, [pc, #140]	; (80037f8 <displayBoard+0x1c0>)
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	4613      	mov	r3, r2
 8003770:	009b      	lsls	r3, r3, #2
 8003772:	4413      	add	r3, r2
 8003774:	005b      	lsls	r3, r3, #1
 8003776:	18ca      	adds	r2, r1, r3
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	4413      	add	r3, r2
 800377c:	2214      	movs	r2, #20
 800377e:	701a      	strb	r2, [r3, #0]
 8003780:	e024      	b.n	80037cc <displayBoard+0x194>
			else if((bord[i][j] & 0x7F)) monitor[i][j] = 0x15;
 8003782:	491c      	ldr	r1, [pc, #112]	; (80037f4 <displayBoard+0x1bc>)
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	4613      	mov	r3, r2
 8003788:	009b      	lsls	r3, r3, #2
 800378a:	4413      	add	r3, r2
 800378c:	005b      	lsls	r3, r3, #1
 800378e:	18ca      	adds	r2, r1, r3
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	4413      	add	r3, r2
 8003794:	781b      	ldrb	r3, [r3, #0]
 8003796:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800379a:	2b00      	cmp	r3, #0
 800379c:	d00b      	beq.n	80037b6 <displayBoard+0x17e>
 800379e:	4916      	ldr	r1, [pc, #88]	; (80037f8 <displayBoard+0x1c0>)
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	4613      	mov	r3, r2
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	4413      	add	r3, r2
 80037a8:	005b      	lsls	r3, r3, #1
 80037aa:	18ca      	adds	r2, r1, r3
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	4413      	add	r3, r2
 80037b0:	2215      	movs	r2, #21
 80037b2:	701a      	strb	r2, [r3, #0]
 80037b4:	e00a      	b.n	80037cc <displayBoard+0x194>
			else monitor[i][j] = 0x00;
 80037b6:	4910      	ldr	r1, [pc, #64]	; (80037f8 <displayBoard+0x1c0>)
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	4613      	mov	r3, r2
 80037bc:	009b      	lsls	r3, r3, #2
 80037be:	4413      	add	r3, r2
 80037c0:	005b      	lsls	r3, r3, #1
 80037c2:	18ca      	adds	r2, r1, r3
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	4413      	add	r3, r2
 80037c8:	2200      	movs	r2, #0
 80037ca:	701a      	strb	r2, [r3, #0]
		for(int j = 0;j < 10;j++){
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	3301      	adds	r3, #1
 80037d0:	603b      	str	r3, [r7, #0]
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	2b09      	cmp	r3, #9
 80037d6:	f77f af38 	ble.w	800364a <displayBoard+0x12>
	for(int i = 0;i < 20;i++){
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	3301      	adds	r3, #1
 80037de:	607b      	str	r3, [r7, #4]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2b13      	cmp	r3, #19
 80037e4:	f77f af2e 	ble.w	8003644 <displayBoard+0xc>
		}
	}
}
 80037e8:	bf00      	nop
 80037ea:	370c      	adds	r7, #12
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr
 80037f4:	20000be0 	.word	0x20000be0
 80037f8:	200001b4 	.word	0x200001b4

080037fc <newBlock>:

void newBlock(){
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
	int blockNum = rand() % 7;
 8003802:	f000 fef9 	bl	80045f8 <rand>
 8003806:	4602      	mov	r2, r0
 8003808:	4b1c      	ldr	r3, [pc, #112]	; (800387c <newBlock+0x80>)
 800380a:	fb83 1302 	smull	r1, r3, r3, r2
 800380e:	4413      	add	r3, r2
 8003810:	1099      	asrs	r1, r3, #2
 8003812:	17d3      	asrs	r3, r2, #31
 8003814:	1ac9      	subs	r1, r1, r3
 8003816:	460b      	mov	r3, r1
 8003818:	00db      	lsls	r3, r3, #3
 800381a:	1a5b      	subs	r3, r3, r1
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	603b      	str	r3, [r7, #0]
	int cnt = 0;
 8003820:	2300      	movs	r3, #0
 8003822:	60fb      	str	r3, [r7, #12]
	for(int i = 23;i >= 20;i--){
 8003824:	2317      	movs	r3, #23
 8003826:	60bb      	str	r3, [r7, #8]
 8003828:	e020      	b.n	800386c <newBlock+0x70>

		for(int j = 2;j < 6;j++){
 800382a:	2302      	movs	r3, #2
 800382c:	607b      	str	r3, [r7, #4]
 800382e:	e017      	b.n	8003860 <newBlock+0x64>
			bord[i][j] = block[blockNum][cnt];
 8003830:	4a13      	ldr	r2, [pc, #76]	; (8003880 <newBlock+0x84>)
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	011b      	lsls	r3, r3, #4
 8003836:	441a      	add	r2, r3
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	4413      	add	r3, r2
 800383c:	7818      	ldrb	r0, [r3, #0]
 800383e:	4911      	ldr	r1, [pc, #68]	; (8003884 <newBlock+0x88>)
 8003840:	68ba      	ldr	r2, [r7, #8]
 8003842:	4613      	mov	r3, r2
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	4413      	add	r3, r2
 8003848:	005b      	lsls	r3, r3, #1
 800384a:	18ca      	adds	r2, r1, r3
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	4413      	add	r3, r2
 8003850:	4602      	mov	r2, r0
 8003852:	701a      	strb	r2, [r3, #0]
			cnt++;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	3301      	adds	r3, #1
 8003858:	60fb      	str	r3, [r7, #12]
		for(int j = 2;j < 6;j++){
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	3301      	adds	r3, #1
 800385e:	607b      	str	r3, [r7, #4]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2b05      	cmp	r3, #5
 8003864:	dde4      	ble.n	8003830 <newBlock+0x34>
	for(int i = 23;i >= 20;i--){
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	3b01      	subs	r3, #1
 800386a:	60bb      	str	r3, [r7, #8]
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	2b13      	cmp	r3, #19
 8003870:	dcdb      	bgt.n	800382a <newBlock+0x2e>
		}
	}
}
 8003872:	bf00      	nop
 8003874:	3710      	adds	r7, #16
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
 800387a:	bf00      	nop
 800387c:	92492493 	.word	0x92492493
 8003880:	2000000c 	.word	0x2000000c
 8003884:	20000be0 	.word	0x20000be0

08003888 <getBottom>:

int getBottom(){
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
	for(int i = 0;i < 24;i++){
 800388e:	2300      	movs	r3, #0
 8003890:	607b      	str	r3, [r7, #4]
 8003892:	e01a      	b.n	80038ca <getBottom+0x42>
		for(int j = 0;j < 10;j++){
 8003894:	2300      	movs	r3, #0
 8003896:	603b      	str	r3, [r7, #0]
 8003898:	e011      	b.n	80038be <getBottom+0x36>
			if(bord[i][j] & 0x80){//移動中のブロック
 800389a:	4911      	ldr	r1, [pc, #68]	; (80038e0 <getBottom+0x58>)
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	4613      	mov	r3, r2
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	4413      	add	r3, r2
 80038a4:	005b      	lsls	r3, r3, #1
 80038a6:	18ca      	adds	r2, r1, r3
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	4413      	add	r3, r2
 80038ac:	781b      	ldrb	r3, [r3, #0]
 80038ae:	b25b      	sxtb	r3, r3
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	da01      	bge.n	80038b8 <getBottom+0x30>
				return i;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	e00c      	b.n	80038d2 <getBottom+0x4a>
		for(int j = 0;j < 10;j++){
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	3301      	adds	r3, #1
 80038bc:	603b      	str	r3, [r7, #0]
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	2b09      	cmp	r3, #9
 80038c2:	ddea      	ble.n	800389a <getBottom+0x12>
	for(int i = 0;i < 24;i++){
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	3301      	adds	r3, #1
 80038c8:	607b      	str	r3, [r7, #4]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2b17      	cmp	r3, #23
 80038ce:	dde1      	ble.n	8003894 <getBottom+0xc>
			}
		}
	}
	return 0;
 80038d0:	2300      	movs	r3, #0
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	370c      	adds	r7, #12
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr
 80038de:	bf00      	nop
 80038e0:	20000be0 	.word	0x20000be0

080038e4 <getLeft>:

int getLeft(){
 80038e4:	b480      	push	{r7}
 80038e6:	b083      	sub	sp, #12
 80038e8:	af00      	add	r7, sp, #0
	for(int j = 0;j < 10;j++){
 80038ea:	2300      	movs	r3, #0
 80038ec:	607b      	str	r3, [r7, #4]
 80038ee:	e01a      	b.n	8003926 <getLeft+0x42>
		for(int i = 0;i < 24;i++){
 80038f0:	2300      	movs	r3, #0
 80038f2:	603b      	str	r3, [r7, #0]
 80038f4:	e011      	b.n	800391a <getLeft+0x36>
			if(bord[i][j] & 0x80){//移動中のブロック
 80038f6:	4911      	ldr	r1, [pc, #68]	; (800393c <getLeft+0x58>)
 80038f8:	683a      	ldr	r2, [r7, #0]
 80038fa:	4613      	mov	r3, r2
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	4413      	add	r3, r2
 8003900:	005b      	lsls	r3, r3, #1
 8003902:	18ca      	adds	r2, r1, r3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	4413      	add	r3, r2
 8003908:	781b      	ldrb	r3, [r3, #0]
 800390a:	b25b      	sxtb	r3, r3
 800390c:	2b00      	cmp	r3, #0
 800390e:	da01      	bge.n	8003914 <getLeft+0x30>
				return j;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	e00c      	b.n	800392e <getLeft+0x4a>
		for(int i = 0;i < 24;i++){
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	3301      	adds	r3, #1
 8003918:	603b      	str	r3, [r7, #0]
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	2b17      	cmp	r3, #23
 800391e:	ddea      	ble.n	80038f6 <getLeft+0x12>
	for(int j = 0;j < 10;j++){
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	3301      	adds	r3, #1
 8003924:	607b      	str	r3, [r7, #4]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2b09      	cmp	r3, #9
 800392a:	dde1      	ble.n	80038f0 <getLeft+0xc>
			}
		}
	}
	return 0;
 800392c:	2300      	movs	r3, #0
}
 800392e:	4618      	mov	r0, r3
 8003930:	370c      	adds	r7, #12
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr
 800393a:	bf00      	nop
 800393c:	20000be0 	.word	0x20000be0

08003940 <getRight>:

int getRight(){
 8003940:	b480      	push	{r7}
 8003942:	b083      	sub	sp, #12
 8003944:	af00      	add	r7, sp, #0
	for(int j = 9;j >= 0;j--){
 8003946:	2309      	movs	r3, #9
 8003948:	607b      	str	r3, [r7, #4]
 800394a:	e01a      	b.n	8003982 <getRight+0x42>
		for(int i = 0;i < 24;i++){
 800394c:	2300      	movs	r3, #0
 800394e:	603b      	str	r3, [r7, #0]
 8003950:	e011      	b.n	8003976 <getRight+0x36>
			if(bord[i][j] & 0x80){//移動中のブロック
 8003952:	4911      	ldr	r1, [pc, #68]	; (8003998 <getRight+0x58>)
 8003954:	683a      	ldr	r2, [r7, #0]
 8003956:	4613      	mov	r3, r2
 8003958:	009b      	lsls	r3, r3, #2
 800395a:	4413      	add	r3, r2
 800395c:	005b      	lsls	r3, r3, #1
 800395e:	18ca      	adds	r2, r1, r3
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	4413      	add	r3, r2
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	b25b      	sxtb	r3, r3
 8003968:	2b00      	cmp	r3, #0
 800396a:	da01      	bge.n	8003970 <getRight+0x30>
				return j;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	e00c      	b.n	800398a <getRight+0x4a>
		for(int i = 0;i < 24;i++){
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	3301      	adds	r3, #1
 8003974:	603b      	str	r3, [r7, #0]
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	2b17      	cmp	r3, #23
 800397a:	ddea      	ble.n	8003952 <getRight+0x12>
	for(int j = 9;j >= 0;j--){
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	3b01      	subs	r3, #1
 8003980:	607b      	str	r3, [r7, #4]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2b00      	cmp	r3, #0
 8003986:	dae1      	bge.n	800394c <getRight+0xc>
			}
		}
	}
	return 0;
 8003988:	2300      	movs	r3, #0
}
 800398a:	4618      	mov	r0, r3
 800398c:	370c      	adds	r7, #12
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr
 8003996:	bf00      	nop
 8003998:	20000be0 	.word	0x20000be0

0800399c <fallBlock>:

int fallBlock(){
 800399c:	b580      	push	{r7, lr}
 800399e:	b088      	sub	sp, #32
 80039a0:	af00      	add	r7, sp, #0
	int bottom = getBottom();
 80039a2:	f7ff ff71 	bl	8003888 <getBottom>
 80039a6:	60f8      	str	r0, [r7, #12]
	int left = getLeft();
 80039a8:	f7ff ff9c 	bl	80038e4 <getLeft>
 80039ac:	60b8      	str	r0, [r7, #8]

	for(int i = 0;i < 4;i++){
 80039ae:	2300      	movs	r3, #0
 80039b0:	61fb      	str	r3, [r7, #28]
 80039b2:	e03c      	b.n	8003a2e <fallBlock+0x92>
		for(int j = 0;j < 4;j++){
 80039b4:	2300      	movs	r3, #0
 80039b6:	61bb      	str	r3, [r7, #24]
 80039b8:	e033      	b.n	8003a22 <fallBlock+0x86>
			if(bottom > 0){//一番下に来ていないとき
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	dd2b      	ble.n	8003a18 <fallBlock+0x7c>
				if(bord[bottom + i][left + j] & 0x80){//移動中のピースであるとき
 80039c0:	68fa      	ldr	r2, [r7, #12]
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	441a      	add	r2, r3
 80039c6:	68b9      	ldr	r1, [r7, #8]
 80039c8:	69bb      	ldr	r3, [r7, #24]
 80039ca:	4419      	add	r1, r3
 80039cc:	483c      	ldr	r0, [pc, #240]	; (8003ac0 <fallBlock+0x124>)
 80039ce:	4613      	mov	r3, r2
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	4413      	add	r3, r2
 80039d4:	005b      	lsls	r3, r3, #1
 80039d6:	4403      	add	r3, r0
 80039d8:	440b      	add	r3, r1
 80039da:	781b      	ldrb	r3, [r3, #0]
 80039dc:	b25b      	sxtb	r3, r3
 80039de:	2b00      	cmp	r3, #0
 80039e0:	da1c      	bge.n	8003a1c <fallBlock+0x80>
					uint8_t pieceState = bord[bottom - 1 + i][left + j];
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	1e5a      	subs	r2, r3, #1
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	441a      	add	r2, r3
 80039ea:	68b9      	ldr	r1, [r7, #8]
 80039ec:	69bb      	ldr	r3, [r7, #24]
 80039ee:	4419      	add	r1, r3
 80039f0:	4833      	ldr	r0, [pc, #204]	; (8003ac0 <fallBlock+0x124>)
 80039f2:	4613      	mov	r3, r2
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	4413      	add	r3, r2
 80039f8:	005b      	lsls	r3, r3, #1
 80039fa:	4403      	add	r3, r0
 80039fc:	440b      	add	r3, r1
 80039fe:	781b      	ldrb	r3, [r3, #0]
 8003a00:	71fb      	strb	r3, [r7, #7]
					if(((pieceState & 0x80) == 0) && (pieceState & 0x7F)){//ピースの下に移動中で無いピースが存在した場合
 8003a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	db08      	blt.n	8003a1c <fallBlock+0x80>
 8003a0a:	79fb      	ldrb	r3, [r7, #7]
 8003a0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d003      	beq.n	8003a1c <fallBlock+0x80>
						return 1;//移動できない
 8003a14:	2301      	movs	r3, #1
 8003a16:	e04e      	b.n	8003ab6 <fallBlock+0x11a>
					}
				}
			}else return 1;//一番下だから移動不可
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e04c      	b.n	8003ab6 <fallBlock+0x11a>
		for(int j = 0;j < 4;j++){
 8003a1c:	69bb      	ldr	r3, [r7, #24]
 8003a1e:	3301      	adds	r3, #1
 8003a20:	61bb      	str	r3, [r7, #24]
 8003a22:	69bb      	ldr	r3, [r7, #24]
 8003a24:	2b03      	cmp	r3, #3
 8003a26:	ddc8      	ble.n	80039ba <fallBlock+0x1e>
	for(int i = 0;i < 4;i++){
 8003a28:	69fb      	ldr	r3, [r7, #28]
 8003a2a:	3301      	adds	r3, #1
 8003a2c:	61fb      	str	r3, [r7, #28]
 8003a2e:	69fb      	ldr	r3, [r7, #28]
 8003a30:	2b03      	cmp	r3, #3
 8003a32:	ddbf      	ble.n	80039b4 <fallBlock+0x18>
		}
	}
	//障害物が無い時
	for(int i = 0;i < 24;i++){
 8003a34:	2300      	movs	r3, #0
 8003a36:	617b      	str	r3, [r7, #20]
 8003a38:	e039      	b.n	8003aae <fallBlock+0x112>
		for(int j = 0;j < 10;j++){
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	613b      	str	r3, [r7, #16]
 8003a3e:	e030      	b.n	8003aa2 <fallBlock+0x106>
			if(bord[i][j] & 0x80){//移動中のピース
 8003a40:	491f      	ldr	r1, [pc, #124]	; (8003ac0 <fallBlock+0x124>)
 8003a42:	697a      	ldr	r2, [r7, #20]
 8003a44:	4613      	mov	r3, r2
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	4413      	add	r3, r2
 8003a4a:	005b      	lsls	r3, r3, #1
 8003a4c:	18ca      	adds	r2, r1, r3
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	4413      	add	r3, r2
 8003a52:	781b      	ldrb	r3, [r3, #0]
 8003a54:	b25b      	sxtb	r3, r3
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	da20      	bge.n	8003a9c <fallBlock+0x100>
				bord[i - 1][j] = bord[i][j];//1つ下に移動
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	1e5a      	subs	r2, r3, #1
 8003a5e:	4818      	ldr	r0, [pc, #96]	; (8003ac0 <fallBlock+0x124>)
 8003a60:	6979      	ldr	r1, [r7, #20]
 8003a62:	460b      	mov	r3, r1
 8003a64:	009b      	lsls	r3, r3, #2
 8003a66:	440b      	add	r3, r1
 8003a68:	005b      	lsls	r3, r3, #1
 8003a6a:	18c1      	adds	r1, r0, r3
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	440b      	add	r3, r1
 8003a70:	7818      	ldrb	r0, [r3, #0]
 8003a72:	4913      	ldr	r1, [pc, #76]	; (8003ac0 <fallBlock+0x124>)
 8003a74:	4613      	mov	r3, r2
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	4413      	add	r3, r2
 8003a7a:	005b      	lsls	r3, r3, #1
 8003a7c:	18ca      	adds	r2, r1, r3
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	4413      	add	r3, r2
 8003a82:	4602      	mov	r2, r0
 8003a84:	701a      	strb	r2, [r3, #0]
				bord[i][j] = 0x00;
 8003a86:	490e      	ldr	r1, [pc, #56]	; (8003ac0 <fallBlock+0x124>)
 8003a88:	697a      	ldr	r2, [r7, #20]
 8003a8a:	4613      	mov	r3, r2
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	4413      	add	r3, r2
 8003a90:	005b      	lsls	r3, r3, #1
 8003a92:	18ca      	adds	r2, r1, r3
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	4413      	add	r3, r2
 8003a98:	2200      	movs	r2, #0
 8003a9a:	701a      	strb	r2, [r3, #0]
		for(int j = 0;j < 10;j++){
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	3301      	adds	r3, #1
 8003aa0:	613b      	str	r3, [r7, #16]
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	2b09      	cmp	r3, #9
 8003aa6:	ddcb      	ble.n	8003a40 <fallBlock+0xa4>
	for(int i = 0;i < 24;i++){
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	3301      	adds	r3, #1
 8003aac:	617b      	str	r3, [r7, #20]
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	2b17      	cmp	r3, #23
 8003ab2:	ddc2      	ble.n	8003a3a <fallBlock+0x9e>
			}
		}
	}
	return 0;
 8003ab4:	2300      	movs	r3, #0
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3720      	adds	r7, #32
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	20000be0 	.word	0x20000be0

08003ac4 <leftBlock>:

int leftBlock(){
 8003ac4:	b590      	push	{r4, r7, lr}
 8003ac6:	b089      	sub	sp, #36	; 0x24
 8003ac8:	af00      	add	r7, sp, #0
	int bottom = getBottom();
 8003aca:	f7ff fedd 	bl	8003888 <getBottom>
 8003ace:	60f8      	str	r0, [r7, #12]
	int left = getLeft();
 8003ad0:	f7ff ff08 	bl	80038e4 <getLeft>
 8003ad4:	60b8      	str	r0, [r7, #8]

	for(int i = 0;i < 4;i++){
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	61fb      	str	r3, [r7, #28]
 8003ada:	e03c      	b.n	8003b56 <leftBlock+0x92>
		for(int j = 0;j < 4;j++){
 8003adc:	2300      	movs	r3, #0
 8003ade:	61bb      	str	r3, [r7, #24]
 8003ae0:	e033      	b.n	8003b4a <leftBlock+0x86>
			if(left > 0){//一番左に来ていないとき
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	dd2b      	ble.n	8003b40 <leftBlock+0x7c>
				if(bord[bottom + i][left + j] & 0x80){//移動中のピースであるとき
 8003ae8:	68fa      	ldr	r2, [r7, #12]
 8003aea:	69fb      	ldr	r3, [r7, #28]
 8003aec:	441a      	add	r2, r3
 8003aee:	68b9      	ldr	r1, [r7, #8]
 8003af0:	69bb      	ldr	r3, [r7, #24]
 8003af2:	4419      	add	r1, r3
 8003af4:	483c      	ldr	r0, [pc, #240]	; (8003be8 <leftBlock+0x124>)
 8003af6:	4613      	mov	r3, r2
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	4413      	add	r3, r2
 8003afc:	005b      	lsls	r3, r3, #1
 8003afe:	4403      	add	r3, r0
 8003b00:	440b      	add	r3, r1
 8003b02:	781b      	ldrb	r3, [r3, #0]
 8003b04:	b25b      	sxtb	r3, r3
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	da1c      	bge.n	8003b44 <leftBlock+0x80>
					uint8_t pieceState = bord[bottom + i][left - 1 + j];
 8003b0a:	68fa      	ldr	r2, [r7, #12]
 8003b0c:	69fb      	ldr	r3, [r7, #28]
 8003b0e:	441a      	add	r2, r3
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	1e59      	subs	r1, r3, #1
 8003b14:	69bb      	ldr	r3, [r7, #24]
 8003b16:	4419      	add	r1, r3
 8003b18:	4833      	ldr	r0, [pc, #204]	; (8003be8 <leftBlock+0x124>)
 8003b1a:	4613      	mov	r3, r2
 8003b1c:	009b      	lsls	r3, r3, #2
 8003b1e:	4413      	add	r3, r2
 8003b20:	005b      	lsls	r3, r3, #1
 8003b22:	4403      	add	r3, r0
 8003b24:	440b      	add	r3, r1
 8003b26:	781b      	ldrb	r3, [r3, #0]
 8003b28:	71fb      	strb	r3, [r7, #7]
					if(((pieceState & 0x80) == 0) && (pieceState & 0x7F)){//ピースの下に移動中で無いピースが存在した場合
 8003b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	db08      	blt.n	8003b44 <leftBlock+0x80>
 8003b32:	79fb      	ldrb	r3, [r7, #7]
 8003b34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d003      	beq.n	8003b44 <leftBlock+0x80>
						return 1;//移動できない
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e04e      	b.n	8003bde <leftBlock+0x11a>
					}
				}
			}else return 1;//一番下だから移動不可
 8003b40:	2301      	movs	r3, #1
 8003b42:	e04c      	b.n	8003bde <leftBlock+0x11a>
		for(int j = 0;j < 4;j++){
 8003b44:	69bb      	ldr	r3, [r7, #24]
 8003b46:	3301      	adds	r3, #1
 8003b48:	61bb      	str	r3, [r7, #24]
 8003b4a:	69bb      	ldr	r3, [r7, #24]
 8003b4c:	2b03      	cmp	r3, #3
 8003b4e:	ddc8      	ble.n	8003ae2 <leftBlock+0x1e>
	for(int i = 0;i < 4;i++){
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	3301      	adds	r3, #1
 8003b54:	61fb      	str	r3, [r7, #28]
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	2b03      	cmp	r3, #3
 8003b5a:	ddbf      	ble.n	8003adc <leftBlock+0x18>
		}
	}
	//障害物が無い時
	for(int i = 0;i < 24;i++){
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	617b      	str	r3, [r7, #20]
 8003b60:	e039      	b.n	8003bd6 <leftBlock+0x112>
		for(int j = 0;j < 10;j++){
 8003b62:	2300      	movs	r3, #0
 8003b64:	613b      	str	r3, [r7, #16]
 8003b66:	e030      	b.n	8003bca <leftBlock+0x106>
			if(bord[i][j] & 0x80){//移動中のピース
 8003b68:	491f      	ldr	r1, [pc, #124]	; (8003be8 <leftBlock+0x124>)
 8003b6a:	697a      	ldr	r2, [r7, #20]
 8003b6c:	4613      	mov	r3, r2
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	4413      	add	r3, r2
 8003b72:	005b      	lsls	r3, r3, #1
 8003b74:	18ca      	adds	r2, r1, r3
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	4413      	add	r3, r2
 8003b7a:	781b      	ldrb	r3, [r3, #0]
 8003b7c:	b25b      	sxtb	r3, r3
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	da20      	bge.n	8003bc4 <leftBlock+0x100>
				bord[i][j - 1] = bord[i][j];//1つ下に移動
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	1e59      	subs	r1, r3, #1
 8003b86:	4818      	ldr	r0, [pc, #96]	; (8003be8 <leftBlock+0x124>)
 8003b88:	697a      	ldr	r2, [r7, #20]
 8003b8a:	4613      	mov	r3, r2
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	4413      	add	r3, r2
 8003b90:	005b      	lsls	r3, r3, #1
 8003b92:	18c2      	adds	r2, r0, r3
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	4413      	add	r3, r2
 8003b98:	781c      	ldrb	r4, [r3, #0]
 8003b9a:	4813      	ldr	r0, [pc, #76]	; (8003be8 <leftBlock+0x124>)
 8003b9c:	697a      	ldr	r2, [r7, #20]
 8003b9e:	4613      	mov	r3, r2
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	4413      	add	r3, r2
 8003ba4:	005b      	lsls	r3, r3, #1
 8003ba6:	4403      	add	r3, r0
 8003ba8:	440b      	add	r3, r1
 8003baa:	4622      	mov	r2, r4
 8003bac:	701a      	strb	r2, [r3, #0]
				bord[i][j] = 0x00;
 8003bae:	490e      	ldr	r1, [pc, #56]	; (8003be8 <leftBlock+0x124>)
 8003bb0:	697a      	ldr	r2, [r7, #20]
 8003bb2:	4613      	mov	r3, r2
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	4413      	add	r3, r2
 8003bb8:	005b      	lsls	r3, r3, #1
 8003bba:	18ca      	adds	r2, r1, r3
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	4413      	add	r3, r2
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	701a      	strb	r2, [r3, #0]
		for(int j = 0;j < 10;j++){
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	3301      	adds	r3, #1
 8003bc8:	613b      	str	r3, [r7, #16]
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	2b09      	cmp	r3, #9
 8003bce:	ddcb      	ble.n	8003b68 <leftBlock+0xa4>
	for(int i = 0;i < 24;i++){
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	3301      	adds	r3, #1
 8003bd4:	617b      	str	r3, [r7, #20]
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	2b17      	cmp	r3, #23
 8003bda:	ddc2      	ble.n	8003b62 <leftBlock+0x9e>
			}
		}
	}
	return 0;
 8003bdc:	2300      	movs	r3, #0
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3724      	adds	r7, #36	; 0x24
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd90      	pop	{r4, r7, pc}
 8003be6:	bf00      	nop
 8003be8:	20000be0 	.word	0x20000be0

08003bec <rightBlock>:

int rightBlock(){
 8003bec:	b590      	push	{r4, r7, lr}
 8003bee:	b089      	sub	sp, #36	; 0x24
 8003bf0:	af00      	add	r7, sp, #0
	int bottom = getBottom();
 8003bf2:	f7ff fe49 	bl	8003888 <getBottom>
 8003bf6:	60f8      	str	r0, [r7, #12]
	int left = getLeft();
 8003bf8:	f7ff fe74 	bl	80038e4 <getLeft>
 8003bfc:	60b8      	str	r0, [r7, #8]
	int right = getRight();
 8003bfe:	f7ff fe9f 	bl	8003940 <getRight>
 8003c02:	6078      	str	r0, [r7, #4]

	for(int i = 0;i < 4;i++){
 8003c04:	2300      	movs	r3, #0
 8003c06:	61fb      	str	r3, [r7, #28]
 8003c08:	e03c      	b.n	8003c84 <rightBlock+0x98>
		for(int j = 0;j < 4;j++){
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	61bb      	str	r3, [r7, #24]
 8003c0e:	e033      	b.n	8003c78 <rightBlock+0x8c>
			if(right < 9){//一番左に来ていないとき
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2b08      	cmp	r3, #8
 8003c14:	dc2b      	bgt.n	8003c6e <rightBlock+0x82>
				if(bord[bottom + i][right - j] & 0x80){//移動中のピースであるとき
 8003c16:	68fa      	ldr	r2, [r7, #12]
 8003c18:	69fb      	ldr	r3, [r7, #28]
 8003c1a:	441a      	add	r2, r3
 8003c1c:	6879      	ldr	r1, [r7, #4]
 8003c1e:	69bb      	ldr	r3, [r7, #24]
 8003c20:	1ac9      	subs	r1, r1, r3
 8003c22:	483c      	ldr	r0, [pc, #240]	; (8003d14 <rightBlock+0x128>)
 8003c24:	4613      	mov	r3, r2
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	4413      	add	r3, r2
 8003c2a:	005b      	lsls	r3, r3, #1
 8003c2c:	4403      	add	r3, r0
 8003c2e:	440b      	add	r3, r1
 8003c30:	781b      	ldrb	r3, [r3, #0]
 8003c32:	b25b      	sxtb	r3, r3
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	da1c      	bge.n	8003c72 <rightBlock+0x86>
					uint8_t pieceState = bord[bottom + i][right + 1 - j];
 8003c38:	68fa      	ldr	r2, [r7, #12]
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	441a      	add	r2, r3
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	1c59      	adds	r1, r3, #1
 8003c42:	69bb      	ldr	r3, [r7, #24]
 8003c44:	1ac9      	subs	r1, r1, r3
 8003c46:	4833      	ldr	r0, [pc, #204]	; (8003d14 <rightBlock+0x128>)
 8003c48:	4613      	mov	r3, r2
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	4413      	add	r3, r2
 8003c4e:	005b      	lsls	r3, r3, #1
 8003c50:	4403      	add	r3, r0
 8003c52:	440b      	add	r3, r1
 8003c54:	781b      	ldrb	r3, [r3, #0]
 8003c56:	70fb      	strb	r3, [r7, #3]
					if(((pieceState & 0x80) == 0) && (pieceState & 0x7F)){//ピースの下に移動中で無いピースが存在した場合
 8003c58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	db08      	blt.n	8003c72 <rightBlock+0x86>
 8003c60:	78fb      	ldrb	r3, [r7, #3]
 8003c62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d003      	beq.n	8003c72 <rightBlock+0x86>
						return 1;//移動できない
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e04e      	b.n	8003d0c <rightBlock+0x120>
					}
				}
			}else return 1;//一番下だから移動不可
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e04c      	b.n	8003d0c <rightBlock+0x120>
		for(int j = 0;j < 4;j++){
 8003c72:	69bb      	ldr	r3, [r7, #24]
 8003c74:	3301      	adds	r3, #1
 8003c76:	61bb      	str	r3, [r7, #24]
 8003c78:	69bb      	ldr	r3, [r7, #24]
 8003c7a:	2b03      	cmp	r3, #3
 8003c7c:	ddc8      	ble.n	8003c10 <rightBlock+0x24>
	for(int i = 0;i < 4;i++){
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	3301      	adds	r3, #1
 8003c82:	61fb      	str	r3, [r7, #28]
 8003c84:	69fb      	ldr	r3, [r7, #28]
 8003c86:	2b03      	cmp	r3, #3
 8003c88:	ddbf      	ble.n	8003c0a <rightBlock+0x1e>
		}
	}
	//障害物が無い時
	for(int i = 0;i < 24;i++){
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	617b      	str	r3, [r7, #20]
 8003c8e:	e039      	b.n	8003d04 <rightBlock+0x118>
		for(int j = 9;j >= 0;j--){
 8003c90:	2309      	movs	r3, #9
 8003c92:	613b      	str	r3, [r7, #16]
 8003c94:	e030      	b.n	8003cf8 <rightBlock+0x10c>
			if(bord[i][j] & 0x80){//移動中のピース
 8003c96:	491f      	ldr	r1, [pc, #124]	; (8003d14 <rightBlock+0x128>)
 8003c98:	697a      	ldr	r2, [r7, #20]
 8003c9a:	4613      	mov	r3, r2
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	4413      	add	r3, r2
 8003ca0:	005b      	lsls	r3, r3, #1
 8003ca2:	18ca      	adds	r2, r1, r3
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	4413      	add	r3, r2
 8003ca8:	781b      	ldrb	r3, [r3, #0]
 8003caa:	b25b      	sxtb	r3, r3
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	da20      	bge.n	8003cf2 <rightBlock+0x106>
				bord[i][j + 1] = bord[i][j];//1つ下に移動
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	1c59      	adds	r1, r3, #1
 8003cb4:	4817      	ldr	r0, [pc, #92]	; (8003d14 <rightBlock+0x128>)
 8003cb6:	697a      	ldr	r2, [r7, #20]
 8003cb8:	4613      	mov	r3, r2
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	4413      	add	r3, r2
 8003cbe:	005b      	lsls	r3, r3, #1
 8003cc0:	18c2      	adds	r2, r0, r3
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	4413      	add	r3, r2
 8003cc6:	781c      	ldrb	r4, [r3, #0]
 8003cc8:	4812      	ldr	r0, [pc, #72]	; (8003d14 <rightBlock+0x128>)
 8003cca:	697a      	ldr	r2, [r7, #20]
 8003ccc:	4613      	mov	r3, r2
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	4413      	add	r3, r2
 8003cd2:	005b      	lsls	r3, r3, #1
 8003cd4:	4403      	add	r3, r0
 8003cd6:	440b      	add	r3, r1
 8003cd8:	4622      	mov	r2, r4
 8003cda:	701a      	strb	r2, [r3, #0]
				bord[i][j] = 0x00;
 8003cdc:	490d      	ldr	r1, [pc, #52]	; (8003d14 <rightBlock+0x128>)
 8003cde:	697a      	ldr	r2, [r7, #20]
 8003ce0:	4613      	mov	r3, r2
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	4413      	add	r3, r2
 8003ce6:	005b      	lsls	r3, r3, #1
 8003ce8:	18ca      	adds	r2, r1, r3
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	4413      	add	r3, r2
 8003cee:	2200      	movs	r2, #0
 8003cf0:	701a      	strb	r2, [r3, #0]
		for(int j = 9;j >= 0;j--){
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	3b01      	subs	r3, #1
 8003cf6:	613b      	str	r3, [r7, #16]
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	dacb      	bge.n	8003c96 <rightBlock+0xaa>
	for(int i = 0;i < 24;i++){
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	3301      	adds	r3, #1
 8003d02:	617b      	str	r3, [r7, #20]
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	2b17      	cmp	r3, #23
 8003d08:	ddc2      	ble.n	8003c90 <rightBlock+0xa4>
			}
		}
	}
	return 0;
 8003d0a:	2300      	movs	r3, #0
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3724      	adds	r7, #36	; 0x24
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd90      	pop	{r4, r7, pc}
 8003d14:	20000be0 	.word	0x20000be0

08003d18 <fixedBlock>:

void fixedBlock(){//ブロックを固定
 8003d18:	b480      	push	{r7}
 8003d1a:	b083      	sub	sp, #12
 8003d1c:	af00      	add	r7, sp, #0
	for(int i = 0;i < 24;i++){
 8003d1e:	2300      	movs	r3, #0
 8003d20:	607b      	str	r3, [r7, #4]
 8003d22:	e030      	b.n	8003d86 <fixedBlock+0x6e>
		for(int j = 0;j < 10;j++){
 8003d24:	2300      	movs	r3, #0
 8003d26:	603b      	str	r3, [r7, #0]
 8003d28:	e027      	b.n	8003d7a <fixedBlock+0x62>
			if(bord[i][j] & 0x80){
 8003d2a:	491b      	ldr	r1, [pc, #108]	; (8003d98 <fixedBlock+0x80>)
 8003d2c:	687a      	ldr	r2, [r7, #4]
 8003d2e:	4613      	mov	r3, r2
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	4413      	add	r3, r2
 8003d34:	005b      	lsls	r3, r3, #1
 8003d36:	18ca      	adds	r2, r1, r3
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	4413      	add	r3, r2
 8003d3c:	781b      	ldrb	r3, [r3, #0]
 8003d3e:	b25b      	sxtb	r3, r3
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	da17      	bge.n	8003d74 <fixedBlock+0x5c>
				bord[i][j] = (bord[i][j] & 0x7F);//最上位bitを消す
 8003d44:	4914      	ldr	r1, [pc, #80]	; (8003d98 <fixedBlock+0x80>)
 8003d46:	687a      	ldr	r2, [r7, #4]
 8003d48:	4613      	mov	r3, r2
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	4413      	add	r3, r2
 8003d4e:	005b      	lsls	r3, r3, #1
 8003d50:	18ca      	adds	r2, r1, r3
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	4413      	add	r3, r2
 8003d56:	781b      	ldrb	r3, [r3, #0]
 8003d58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d5c:	b2d8      	uxtb	r0, r3
 8003d5e:	490e      	ldr	r1, [pc, #56]	; (8003d98 <fixedBlock+0x80>)
 8003d60:	687a      	ldr	r2, [r7, #4]
 8003d62:	4613      	mov	r3, r2
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	4413      	add	r3, r2
 8003d68:	005b      	lsls	r3, r3, #1
 8003d6a:	18ca      	adds	r2, r1, r3
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	4413      	add	r3, r2
 8003d70:	4602      	mov	r2, r0
 8003d72:	701a      	strb	r2, [r3, #0]
		for(int j = 0;j < 10;j++){
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	3301      	adds	r3, #1
 8003d78:	603b      	str	r3, [r7, #0]
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	2b09      	cmp	r3, #9
 8003d7e:	ddd4      	ble.n	8003d2a <fixedBlock+0x12>
	for(int i = 0;i < 24;i++){
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	3301      	adds	r3, #1
 8003d84:	607b      	str	r3, [r7, #4]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2b17      	cmp	r3, #23
 8003d8a:	ddcb      	ble.n	8003d24 <fixedBlock+0xc>
			}
		}
	}
}
 8003d8c:	bf00      	nop
 8003d8e:	370c      	adds	r7, #12
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr
 8003d98:	20000be0 	.word	0x20000be0

08003d9c <turnBlock>:



void turnBlock(){
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b090      	sub	sp, #64	; 0x40
 8003da0:	af00      	add	r7, sp, #0
	int blockId = checkBlock();
 8003da2:	f000 fa19 	bl	80041d8 <checkBlock>
 8003da6:	61f8      	str	r0, [r7, #28]
	int bottom = getBottom();
 8003da8:	f7ff fd6e 	bl	8003888 <getBottom>
 8003dac:	61b8      	str	r0, [r7, #24]
	int left = getLeft();
 8003dae:	f7ff fd99 	bl	80038e4 <getLeft>
 8003db2:	6178      	str	r0, [r7, #20]
	int notFlag = 0;
 8003db4:	2300      	movs	r3, #0
 8003db6:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t max_i = 3,max_j = 3,cnt = 0;
 8003db8:	2303      	movs	r3, #3
 8003dba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003dbe:	2303      	movs	r3, #3
 8003dc0:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	static uint8_t changeBlock[6] = {};

	if(blockId == 1){
 8003dca:	69fb      	ldr	r3, [r7, #28]
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d105      	bne.n	8003ddc <turnBlock+0x40>
		max_i = 4;
 8003dd0:	2304      	movs	r3, #4
 8003dd2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		max_j = 4;
 8003dd6:	2304      	movs	r3, #4
 8003dd8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	}
	if(blockId <= 6 && blockId > 0){
 8003ddc:	69fb      	ldr	r3, [r7, #28]
 8003dde:	2b06      	cmp	r3, #6
 8003de0:	f300 81ef 	bgt.w	80041c2 <turnBlock+0x426>
 8003de4:	69fb      	ldr	r3, [r7, #28]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	f340 81eb 	ble.w	80041c2 <turnBlock+0x426>
		for(int i = max_i - 1;i >= 0;i--){
 8003dec:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8003df0:	3b01      	subs	r3, #1
 8003df2:	637b      	str	r3, [r7, #52]	; 0x34
 8003df4:	e0e2      	b.n	8003fbc <turnBlock+0x220>
			for(int j = 0;j < max_j;j++){
 8003df6:	2300      	movs	r3, #0
 8003df8:	633b      	str	r3, [r7, #48]	; 0x30
 8003dfa:	e0d6      	b.n	8003faa <turnBlock+0x20e>
				int line = bottom + i;
 8003dfc:	69ba      	ldr	r2, [r7, #24]
 8003dfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e00:	4413      	add	r3, r2
 8003e02:	60bb      	str	r3, [r7, #8]
				int row = left + j;
 8003e04:	697a      	ldr	r2, [r7, #20]
 8003e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e08:	4413      	add	r3, r2
 8003e0a:	607b      	str	r3, [r7, #4]
				uint8_t pieceState = bord[line][row];
 8003e0c:	49a6      	ldr	r1, [pc, #664]	; (80040a8 <turnBlock+0x30c>)
 8003e0e:	68ba      	ldr	r2, [r7, #8]
 8003e10:	4613      	mov	r3, r2
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	4413      	add	r3, r2
 8003e16:	005b      	lsls	r3, r3, #1
 8003e18:	18ca      	adds	r2, r1, r3
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4413      	add	r3, r2
 8003e1e:	781b      	ldrb	r3, [r3, #0]
 8003e20:	70fb      	strb	r3, [r7, #3]

				if(line < 24 && row < 10){
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	2b17      	cmp	r3, #23
 8003e26:	f300 80bb 	bgt.w	8003fa0 <turnBlock+0x204>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2b09      	cmp	r3, #9
 8003e2e:	f300 80b7 	bgt.w	8003fa0 <turnBlock+0x204>
					if(blockId == 1){
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d11b      	bne.n	8003e70 <turnBlock+0xd4>
						if(blockVertical[changeBlock[0]][cnt] & 0x80){
 8003e38:	4b9c      	ldr	r3, [pc, #624]	; (80040ac <turnBlock+0x310>)
 8003e3a:	781b      	ldrb	r3, [r3, #0]
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8003e42:	499b      	ldr	r1, [pc, #620]	; (80040b0 <turnBlock+0x314>)
 8003e44:	0112      	lsls	r2, r2, #4
 8003e46:	440a      	add	r2, r1
 8003e48:	4413      	add	r3, r2
 8003e4a:	781b      	ldrb	r3, [r3, #0]
 8003e4c:	b25b      	sxtb	r3, r3
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	f280 80a0 	bge.w	8003f94 <turnBlock+0x1f8>
							if(((pieceState & 0x80) == 0) && (pieceState & 0x7F))notFlag = 1;//回転できない(回転するとそこに固定のブロックがある)
 8003e54:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	f2c0 809b 	blt.w	8003f94 <turnBlock+0x1f8>
 8003e5e:	78fb      	ldrb	r3, [r7, #3]
 8003e60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	f000 8095 	beq.w	8003f94 <turnBlock+0x1f8>
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e6e:	e091      	b.n	8003f94 <turnBlock+0x1f8>
						}
					}else if(blockId == 2){
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	2b02      	cmp	r3, #2
 8003e74:	d11a      	bne.n	8003eac <turnBlock+0x110>
						if(L1[changeBlock[1]][cnt] & 0x80){
 8003e76:	4b8d      	ldr	r3, [pc, #564]	; (80040ac <turnBlock+0x310>)
 8003e78:	785b      	ldrb	r3, [r3, #1]
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 8003e80:	498c      	ldr	r1, [pc, #560]	; (80040b4 <turnBlock+0x318>)
 8003e82:	4603      	mov	r3, r0
 8003e84:	00db      	lsls	r3, r3, #3
 8003e86:	4403      	add	r3, r0
 8003e88:	440b      	add	r3, r1
 8003e8a:	4413      	add	r3, r2
 8003e8c:	781b      	ldrb	r3, [r3, #0]
 8003e8e:	b25b      	sxtb	r3, r3
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	da7f      	bge.n	8003f94 <turnBlock+0x1f8>
							if(((pieceState & 0x80) == 0) && (pieceState & 0x7F))notFlag = 1;//回転できない(回転するとそこに固定のブロックがある)
 8003e94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	db7b      	blt.n	8003f94 <turnBlock+0x1f8>
 8003e9c:	78fb      	ldrb	r3, [r7, #3]
 8003e9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d076      	beq.n	8003f94 <turnBlock+0x1f8>
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003eaa:	e073      	b.n	8003f94 <turnBlock+0x1f8>
						}
					}else if(blockId == 3){
 8003eac:	69fb      	ldr	r3, [r7, #28]
 8003eae:	2b03      	cmp	r3, #3
 8003eb0:	d11a      	bne.n	8003ee8 <turnBlock+0x14c>
						if(L2[changeBlock[2]][cnt] & 0x80){
 8003eb2:	4b7e      	ldr	r3, [pc, #504]	; (80040ac <turnBlock+0x310>)
 8003eb4:	789b      	ldrb	r3, [r3, #2]
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 8003ebc:	497e      	ldr	r1, [pc, #504]	; (80040b8 <turnBlock+0x31c>)
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	00db      	lsls	r3, r3, #3
 8003ec2:	4403      	add	r3, r0
 8003ec4:	440b      	add	r3, r1
 8003ec6:	4413      	add	r3, r2
 8003ec8:	781b      	ldrb	r3, [r3, #0]
 8003eca:	b25b      	sxtb	r3, r3
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	da61      	bge.n	8003f94 <turnBlock+0x1f8>
							if(((pieceState & 0x80) == 0) && (pieceState & 0x7F))notFlag = 1;//回転できない(回転するとそこに固定のブロックがある)
 8003ed0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	db5d      	blt.n	8003f94 <turnBlock+0x1f8>
 8003ed8:	78fb      	ldrb	r3, [r7, #3]
 8003eda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d058      	beq.n	8003f94 <turnBlock+0x1f8>
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ee6:	e055      	b.n	8003f94 <turnBlock+0x1f8>
						}
					}else if(blockId == 4){
 8003ee8:	69fb      	ldr	r3, [r7, #28]
 8003eea:	2b04      	cmp	r3, #4
 8003eec:	d11a      	bne.n	8003f24 <turnBlock+0x188>
						if(slip1[changeBlock[3]][cnt] & 0x80){
 8003eee:	4b6f      	ldr	r3, [pc, #444]	; (80040ac <turnBlock+0x310>)
 8003ef0:	78db      	ldrb	r3, [r3, #3]
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 8003ef8:	4970      	ldr	r1, [pc, #448]	; (80040bc <turnBlock+0x320>)
 8003efa:	4603      	mov	r3, r0
 8003efc:	00db      	lsls	r3, r3, #3
 8003efe:	4403      	add	r3, r0
 8003f00:	440b      	add	r3, r1
 8003f02:	4413      	add	r3, r2
 8003f04:	781b      	ldrb	r3, [r3, #0]
 8003f06:	b25b      	sxtb	r3, r3
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	da43      	bge.n	8003f94 <turnBlock+0x1f8>
							if(((pieceState & 0x80) == 0) && (pieceState & 0x7F))notFlag = 1;//回転できない(回転するとそこに固定のブロックがある)
 8003f0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	db3f      	blt.n	8003f94 <turnBlock+0x1f8>
 8003f14:	78fb      	ldrb	r3, [r7, #3]
 8003f16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d03a      	beq.n	8003f94 <turnBlock+0x1f8>
 8003f1e:	2301      	movs	r3, #1
 8003f20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f22:	e037      	b.n	8003f94 <turnBlock+0x1f8>
						}
					}else if(blockId == 5){
 8003f24:	69fb      	ldr	r3, [r7, #28]
 8003f26:	2b05      	cmp	r3, #5
 8003f28:	d11a      	bne.n	8003f60 <turnBlock+0x1c4>
						if(slip2[changeBlock[4]][cnt] & 0x80){
 8003f2a:	4b60      	ldr	r3, [pc, #384]	; (80040ac <turnBlock+0x310>)
 8003f2c:	791b      	ldrb	r3, [r3, #4]
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 8003f34:	4962      	ldr	r1, [pc, #392]	; (80040c0 <turnBlock+0x324>)
 8003f36:	4603      	mov	r3, r0
 8003f38:	00db      	lsls	r3, r3, #3
 8003f3a:	4403      	add	r3, r0
 8003f3c:	440b      	add	r3, r1
 8003f3e:	4413      	add	r3, r2
 8003f40:	781b      	ldrb	r3, [r3, #0]
 8003f42:	b25b      	sxtb	r3, r3
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	da25      	bge.n	8003f94 <turnBlock+0x1f8>
							if(((pieceState & 0x80) == 0) && (pieceState & 0x7F))notFlag = 1;//回転できない(回転するとそこに固定のブロックがある)
 8003f48:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	db21      	blt.n	8003f94 <turnBlock+0x1f8>
 8003f50:	78fb      	ldrb	r3, [r7, #3]
 8003f52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d01c      	beq.n	8003f94 <turnBlock+0x1f8>
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f5e:	e019      	b.n	8003f94 <turnBlock+0x1f8>
						}
					}else{
						if(convex[changeBlock[5]][cnt] & 0x80){
 8003f60:	4b52      	ldr	r3, [pc, #328]	; (80040ac <turnBlock+0x310>)
 8003f62:	795b      	ldrb	r3, [r3, #5]
 8003f64:	4618      	mov	r0, r3
 8003f66:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 8003f6a:	4956      	ldr	r1, [pc, #344]	; (80040c4 <turnBlock+0x328>)
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	00db      	lsls	r3, r3, #3
 8003f70:	4403      	add	r3, r0
 8003f72:	440b      	add	r3, r1
 8003f74:	4413      	add	r3, r2
 8003f76:	781b      	ldrb	r3, [r3, #0]
 8003f78:	b25b      	sxtb	r3, r3
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	da0a      	bge.n	8003f94 <turnBlock+0x1f8>
							if(((pieceState & 0x80) == 0) && (pieceState & 0x7F))notFlag = 1;//回転できない(回転するとそこに固定のブロックがある)
 8003f7e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	db06      	blt.n	8003f94 <turnBlock+0x1f8>
 8003f86:	78fb      	ldrb	r3, [r7, #3]
 8003f88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d001      	beq.n	8003f94 <turnBlock+0x1f8>
 8003f90:	2301      	movs	r3, #1
 8003f92:	63fb      	str	r3, [r7, #60]	; 0x3c
						}
					}
					cnt++;
 8003f94:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8003f98:	3301      	adds	r3, #1
 8003f9a:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8003f9e:	e001      	b.n	8003fa4 <turnBlock+0x208>
				}else notFlag = 1;//回転できない(回転するとそこに固定のブロックがある)
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
			for(int j = 0;j < max_j;j++){
 8003fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fa6:	3301      	adds	r3, #1
 8003fa8:	633b      	str	r3, [r7, #48]	; 0x30
 8003faa:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8003fae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	f6ff af23 	blt.w	8003dfc <turnBlock+0x60>
		for(int i = max_i - 1;i >= 0;i--){
 8003fb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fb8:	3b01      	subs	r3, #1
 8003fba:	637b      	str	r3, [r7, #52]	; 0x34
 8003fbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	f6bf af19 	bge.w	8003df6 <turnBlock+0x5a>
			}
		}

		cnt = 0;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
		//kaiten Dosa
		if(notFlag == 0){
 8003fca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	f040 80f8 	bne.w	80041c2 <turnBlock+0x426>
			for(int i = max_i - 1;i >= 0;i--){
 8003fd2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8003fd6:	3b01      	subs	r3, #1
 8003fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fda:	e0b1      	b.n	8004140 <turnBlock+0x3a4>
				for(int j = 0;j < max_j;j++){
 8003fdc:	2300      	movs	r3, #0
 8003fde:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fe0:	e0a5      	b.n	800412e <turnBlock+0x392>
					int line = bottom + i;
 8003fe2:	69ba      	ldr	r2, [r7, #24]
 8003fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fe6:	4413      	add	r3, r2
 8003fe8:	613b      	str	r3, [r7, #16]
					int row = left + j;
 8003fea:	697a      	ldr	r2, [r7, #20]
 8003fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fee:	4413      	add	r3, r2
 8003ff0:	60fb      	str	r3, [r7, #12]
					uint8_t temp = 0;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					if(blockId == 1) temp = blockVertical[changeBlock[0]][cnt];
 8003ff8:	69fb      	ldr	r3, [r7, #28]
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d10c      	bne.n	8004018 <turnBlock+0x27c>
 8003ffe:	4b2b      	ldr	r3, [pc, #172]	; (80040ac <turnBlock+0x310>)
 8004000:	781b      	ldrb	r3, [r3, #0]
 8004002:	461a      	mov	r2, r3
 8004004:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8004008:	4929      	ldr	r1, [pc, #164]	; (80040b0 <turnBlock+0x314>)
 800400a:	0112      	lsls	r2, r2, #4
 800400c:	440a      	add	r2, r1
 800400e:	4413      	add	r3, r2
 8004010:	781b      	ldrb	r3, [r3, #0]
 8004012:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004016:	e065      	b.n	80040e4 <turnBlock+0x348>
					else if(blockId == 2) temp = L1[changeBlock[1]][cnt];
 8004018:	69fb      	ldr	r3, [r7, #28]
 800401a:	2b02      	cmp	r3, #2
 800401c:	d10e      	bne.n	800403c <turnBlock+0x2a0>
 800401e:	4b23      	ldr	r3, [pc, #140]	; (80040ac <turnBlock+0x310>)
 8004020:	785b      	ldrb	r3, [r3, #1]
 8004022:	4618      	mov	r0, r3
 8004024:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 8004028:	4922      	ldr	r1, [pc, #136]	; (80040b4 <turnBlock+0x318>)
 800402a:	4603      	mov	r3, r0
 800402c:	00db      	lsls	r3, r3, #3
 800402e:	4403      	add	r3, r0
 8004030:	440b      	add	r3, r1
 8004032:	4413      	add	r3, r2
 8004034:	781b      	ldrb	r3, [r3, #0]
 8004036:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800403a:	e053      	b.n	80040e4 <turnBlock+0x348>
					else if(blockId == 3) temp = L2[changeBlock[2]][cnt];
 800403c:	69fb      	ldr	r3, [r7, #28]
 800403e:	2b03      	cmp	r3, #3
 8004040:	d10e      	bne.n	8004060 <turnBlock+0x2c4>
 8004042:	4b1a      	ldr	r3, [pc, #104]	; (80040ac <turnBlock+0x310>)
 8004044:	789b      	ldrb	r3, [r3, #2]
 8004046:	4618      	mov	r0, r3
 8004048:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 800404c:	491a      	ldr	r1, [pc, #104]	; (80040b8 <turnBlock+0x31c>)
 800404e:	4603      	mov	r3, r0
 8004050:	00db      	lsls	r3, r3, #3
 8004052:	4403      	add	r3, r0
 8004054:	440b      	add	r3, r1
 8004056:	4413      	add	r3, r2
 8004058:	781b      	ldrb	r3, [r3, #0]
 800405a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800405e:	e041      	b.n	80040e4 <turnBlock+0x348>
					else if(blockId == 4) temp = slip1[changeBlock[3]][cnt];
 8004060:	69fb      	ldr	r3, [r7, #28]
 8004062:	2b04      	cmp	r3, #4
 8004064:	d10e      	bne.n	8004084 <turnBlock+0x2e8>
 8004066:	4b11      	ldr	r3, [pc, #68]	; (80040ac <turnBlock+0x310>)
 8004068:	78db      	ldrb	r3, [r3, #3]
 800406a:	4618      	mov	r0, r3
 800406c:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 8004070:	4912      	ldr	r1, [pc, #72]	; (80040bc <turnBlock+0x320>)
 8004072:	4603      	mov	r3, r0
 8004074:	00db      	lsls	r3, r3, #3
 8004076:	4403      	add	r3, r0
 8004078:	440b      	add	r3, r1
 800407a:	4413      	add	r3, r2
 800407c:	781b      	ldrb	r3, [r3, #0]
 800407e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004082:	e02f      	b.n	80040e4 <turnBlock+0x348>
					else if(blockId == 5) temp = slip2[changeBlock[4]][cnt];
 8004084:	69fb      	ldr	r3, [r7, #28]
 8004086:	2b05      	cmp	r3, #5
 8004088:	d11e      	bne.n	80040c8 <turnBlock+0x32c>
 800408a:	4b08      	ldr	r3, [pc, #32]	; (80040ac <turnBlock+0x310>)
 800408c:	791b      	ldrb	r3, [r3, #4]
 800408e:	4618      	mov	r0, r3
 8004090:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 8004094:	490a      	ldr	r1, [pc, #40]	; (80040c0 <turnBlock+0x324>)
 8004096:	4603      	mov	r3, r0
 8004098:	00db      	lsls	r3, r3, #3
 800409a:	4403      	add	r3, r0
 800409c:	440b      	add	r3, r1
 800409e:	4413      	add	r3, r2
 80040a0:	781b      	ldrb	r3, [r3, #0]
 80040a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80040a6:	e01d      	b.n	80040e4 <turnBlock+0x348>
 80040a8:	20000be0 	.word	0x20000be0
 80040ac:	20000cd8 	.word	0x20000cd8
 80040b0:	2000007c 	.word	0x2000007c
 80040b4:	2000009c 	.word	0x2000009c
 80040b8:	200000c0 	.word	0x200000c0
 80040bc:	200000e4 	.word	0x200000e4
 80040c0:	200000f8 	.word	0x200000f8
 80040c4:	2000010c 	.word	0x2000010c
					else temp = convex[changeBlock[5]][cnt];
 80040c8:	4b40      	ldr	r3, [pc, #256]	; (80041cc <turnBlock+0x430>)
 80040ca:	795b      	ldrb	r3, [r3, #5]
 80040cc:	4618      	mov	r0, r3
 80040ce:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 80040d2:	493f      	ldr	r1, [pc, #252]	; (80041d0 <turnBlock+0x434>)
 80040d4:	4603      	mov	r3, r0
 80040d6:	00db      	lsls	r3, r3, #3
 80040d8:	4403      	add	r3, r0
 80040da:	440b      	add	r3, r1
 80040dc:	4413      	add	r3, r2
 80040de:	781b      	ldrb	r3, [r3, #0]
 80040e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

					if(temp || (bord[line][row] & 0x80)) bord[line][row] = temp;
 80040e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d10c      	bne.n	8004106 <turnBlock+0x36a>
 80040ec:	4939      	ldr	r1, [pc, #228]	; (80041d4 <turnBlock+0x438>)
 80040ee:	693a      	ldr	r2, [r7, #16]
 80040f0:	4613      	mov	r3, r2
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	4413      	add	r3, r2
 80040f6:	005b      	lsls	r3, r3, #1
 80040f8:	18ca      	adds	r2, r1, r3
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	4413      	add	r3, r2
 80040fe:	781b      	ldrb	r3, [r3, #0]
 8004100:	b25b      	sxtb	r3, r3
 8004102:	2b00      	cmp	r3, #0
 8004104:	da0b      	bge.n	800411e <turnBlock+0x382>
 8004106:	4933      	ldr	r1, [pc, #204]	; (80041d4 <turnBlock+0x438>)
 8004108:	693a      	ldr	r2, [r7, #16]
 800410a:	4613      	mov	r3, r2
 800410c:	009b      	lsls	r3, r3, #2
 800410e:	4413      	add	r3, r2
 8004110:	005b      	lsls	r3, r3, #1
 8004112:	18ca      	adds	r2, r1, r3
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	4413      	add	r3, r2
 8004118:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800411c:	701a      	strb	r2, [r3, #0]
					cnt++;
 800411e:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8004122:	3301      	adds	r3, #1
 8004124:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
				for(int j = 0;j < max_j;j++){
 8004128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800412a:	3301      	adds	r3, #1
 800412c:	62bb      	str	r3, [r7, #40]	; 0x28
 800412e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8004132:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004134:	429a      	cmp	r2, r3
 8004136:	f6ff af54 	blt.w	8003fe2 <turnBlock+0x246>
			for(int i = max_i - 1;i >= 0;i--){
 800413a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800413c:	3b01      	subs	r3, #1
 800413e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004142:	2b00      	cmp	r3, #0
 8004144:	f6bf af4a 	bge.w	8003fdc <turnBlock+0x240>
				}
			}

			for(int i = 0;i < 6;i++){//現在状態
 8004148:	2300      	movs	r3, #0
 800414a:	623b      	str	r3, [r7, #32]
 800414c:	e036      	b.n	80041bc <turnBlock+0x420>
				changeBlock[i] += 1;
 800414e:	4a1f      	ldr	r2, [pc, #124]	; (80041cc <turnBlock+0x430>)
 8004150:	6a3b      	ldr	r3, [r7, #32]
 8004152:	4413      	add	r3, r2
 8004154:	781b      	ldrb	r3, [r3, #0]
 8004156:	3301      	adds	r3, #1
 8004158:	b2d9      	uxtb	r1, r3
 800415a:	4a1c      	ldr	r2, [pc, #112]	; (80041cc <turnBlock+0x430>)
 800415c:	6a3b      	ldr	r3, [r7, #32]
 800415e:	4413      	add	r3, r2
 8004160:	460a      	mov	r2, r1
 8004162:	701a      	strb	r2, [r3, #0]
				if((i == 1 || i == 2 || i == 5) && changeBlock[i] == 4) changeBlock[i] = 0;
 8004164:	6a3b      	ldr	r3, [r7, #32]
 8004166:	2b01      	cmp	r3, #1
 8004168:	d005      	beq.n	8004176 <turnBlock+0x3da>
 800416a:	6a3b      	ldr	r3, [r7, #32]
 800416c:	2b02      	cmp	r3, #2
 800416e:	d002      	beq.n	8004176 <turnBlock+0x3da>
 8004170:	6a3b      	ldr	r3, [r7, #32]
 8004172:	2b05      	cmp	r3, #5
 8004174:	d10b      	bne.n	800418e <turnBlock+0x3f2>
 8004176:	4a15      	ldr	r2, [pc, #84]	; (80041cc <turnBlock+0x430>)
 8004178:	6a3b      	ldr	r3, [r7, #32]
 800417a:	4413      	add	r3, r2
 800417c:	781b      	ldrb	r3, [r3, #0]
 800417e:	2b04      	cmp	r3, #4
 8004180:	d105      	bne.n	800418e <turnBlock+0x3f2>
 8004182:	4a12      	ldr	r2, [pc, #72]	; (80041cc <turnBlock+0x430>)
 8004184:	6a3b      	ldr	r3, [r7, #32]
 8004186:	4413      	add	r3, r2
 8004188:	2200      	movs	r2, #0
 800418a:	701a      	strb	r2, [r3, #0]
 800418c:	e013      	b.n	80041b6 <turnBlock+0x41a>
				else if((i == 0 || i == 3 || i == 4) && changeBlock[i] == 2)changeBlock[i] = 0;
 800418e:	6a3b      	ldr	r3, [r7, #32]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d005      	beq.n	80041a0 <turnBlock+0x404>
 8004194:	6a3b      	ldr	r3, [r7, #32]
 8004196:	2b03      	cmp	r3, #3
 8004198:	d002      	beq.n	80041a0 <turnBlock+0x404>
 800419a:	6a3b      	ldr	r3, [r7, #32]
 800419c:	2b04      	cmp	r3, #4
 800419e:	d10a      	bne.n	80041b6 <turnBlock+0x41a>
 80041a0:	4a0a      	ldr	r2, [pc, #40]	; (80041cc <turnBlock+0x430>)
 80041a2:	6a3b      	ldr	r3, [r7, #32]
 80041a4:	4413      	add	r3, r2
 80041a6:	781b      	ldrb	r3, [r3, #0]
 80041a8:	2b02      	cmp	r3, #2
 80041aa:	d104      	bne.n	80041b6 <turnBlock+0x41a>
 80041ac:	4a07      	ldr	r2, [pc, #28]	; (80041cc <turnBlock+0x430>)
 80041ae:	6a3b      	ldr	r3, [r7, #32]
 80041b0:	4413      	add	r3, r2
 80041b2:	2200      	movs	r2, #0
 80041b4:	701a      	strb	r2, [r3, #0]
			for(int i = 0;i < 6;i++){//現在状態
 80041b6:	6a3b      	ldr	r3, [r7, #32]
 80041b8:	3301      	adds	r3, #1
 80041ba:	623b      	str	r3, [r7, #32]
 80041bc:	6a3b      	ldr	r3, [r7, #32]
 80041be:	2b05      	cmp	r3, #5
 80041c0:	ddc5      	ble.n	800414e <turnBlock+0x3b2>
			}
		}

	}
}
 80041c2:	bf00      	nop
 80041c4:	3740      	adds	r7, #64	; 0x40
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}
 80041ca:	bf00      	nop
 80041cc:	20000cd8 	.word	0x20000cd8
 80041d0:	2000010c 	.word	0x2000010c
 80041d4:	20000be0 	.word	0x20000be0

080041d8 <checkBlock>:

int checkBlock(){
 80041d8:	b580      	push	{r7, lr}
 80041da:	b088      	sub	sp, #32
 80041dc:	af00      	add	r7, sp, #0
	int bottom = getBottom();
 80041de:	f7ff fb53 	bl	8003888 <getBottom>
 80041e2:	6178      	str	r0, [r7, #20]
	int left = getLeft();
 80041e4:	f7ff fb7e 	bl	80038e4 <getLeft>
 80041e8:	6138      	str	r0, [r7, #16]
	for(int i = 0;i < 4;i++){
 80041ea:	2300      	movs	r3, #0
 80041ec:	61fb      	str	r3, [r7, #28]
 80041ee:	e035      	b.n	800425c <checkBlock+0x84>
		for(int j = 0;j < 4;j++){
 80041f0:	2300      	movs	r3, #0
 80041f2:	61bb      	str	r3, [r7, #24]
 80041f4:	e02c      	b.n	8004250 <checkBlock+0x78>
			int line = bottom + i;
 80041f6:	697a      	ldr	r2, [r7, #20]
 80041f8:	69fb      	ldr	r3, [r7, #28]
 80041fa:	4413      	add	r3, r2
 80041fc:	60fb      	str	r3, [r7, #12]
			int row = left + j;
 80041fe:	693a      	ldr	r2, [r7, #16]
 8004200:	69bb      	ldr	r3, [r7, #24]
 8004202:	4413      	add	r3, r2
 8004204:	60bb      	str	r3, [r7, #8]
			if(line < 24 && row < 10){
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2b17      	cmp	r3, #23
 800420a:	dc1e      	bgt.n	800424a <checkBlock+0x72>
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	2b09      	cmp	r3, #9
 8004210:	dc1b      	bgt.n	800424a <checkBlock+0x72>
				if(bord[line][row] & 0x80){
 8004212:	4916      	ldr	r1, [pc, #88]	; (800426c <checkBlock+0x94>)
 8004214:	68fa      	ldr	r2, [r7, #12]
 8004216:	4613      	mov	r3, r2
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	4413      	add	r3, r2
 800421c:	005b      	lsls	r3, r3, #1
 800421e:	18ca      	adds	r2, r1, r3
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	4413      	add	r3, r2
 8004224:	781b      	ldrb	r3, [r3, #0]
 8004226:	b25b      	sxtb	r3, r3
 8004228:	2b00      	cmp	r3, #0
 800422a:	da0e      	bge.n	800424a <checkBlock+0x72>
					int blockNum = bord[line][row] & 0x7F;
 800422c:	490f      	ldr	r1, [pc, #60]	; (800426c <checkBlock+0x94>)
 800422e:	68fa      	ldr	r2, [r7, #12]
 8004230:	4613      	mov	r3, r2
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	4413      	add	r3, r2
 8004236:	005b      	lsls	r3, r3, #1
 8004238:	18ca      	adds	r2, r1, r3
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	4413      	add	r3, r2
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004244:	607b      	str	r3, [r7, #4]
					return blockNum;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	e00c      	b.n	8004264 <checkBlock+0x8c>
		for(int j = 0;j < 4;j++){
 800424a:	69bb      	ldr	r3, [r7, #24]
 800424c:	3301      	adds	r3, #1
 800424e:	61bb      	str	r3, [r7, #24]
 8004250:	69bb      	ldr	r3, [r7, #24]
 8004252:	2b03      	cmp	r3, #3
 8004254:	ddcf      	ble.n	80041f6 <checkBlock+0x1e>
	for(int i = 0;i < 4;i++){
 8004256:	69fb      	ldr	r3, [r7, #28]
 8004258:	3301      	adds	r3, #1
 800425a:	61fb      	str	r3, [r7, #28]
 800425c:	69fb      	ldr	r3, [r7, #28]
 800425e:	2b03      	cmp	r3, #3
 8004260:	ddc6      	ble.n	80041f0 <checkBlock+0x18>
				}
			}
		}
	}
	return 0;
 8004262:	2300      	movs	r3, #0
}
 8004264:	4618      	mov	r0, r3
 8004266:	3720      	adds	r7, #32
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}
 800426c:	20000be0 	.word	0x20000be0

08004270 <deleteLine>:

int deleteLine(){
 8004270:	b480      	push	{r7}
 8004272:	b08d      	sub	sp, #52	; 0x34
 8004274:	af00      	add	r7, sp, #0
	static uint8_t deleteNumber = 0;
	static uint8_t cache[10] = {};
	static uint8_t deleteCount = 0;
	if(deleteNumber){
 8004276:	4b90      	ldr	r3, [pc, #576]	; (80044b8 <deleteLine+0x248>)
 8004278:	781b      	ldrb	r3, [r3, #0]
 800427a:	2b00      	cmp	r3, #0
 800427c:	f000 80bf 	beq.w	80043fe <deleteLine+0x18e>
		deleteCount++;
 8004280:	4b8e      	ldr	r3, [pc, #568]	; (80044bc <deleteLine+0x24c>)
 8004282:	781b      	ldrb	r3, [r3, #0]
 8004284:	3301      	adds	r3, #1
 8004286:	b2da      	uxtb	r2, r3
 8004288:	4b8c      	ldr	r3, [pc, #560]	; (80044bc <deleteLine+0x24c>)
 800428a:	701a      	strb	r2, [r3, #0]
		if(deleteCount < 5) {
 800428c:	4b8b      	ldr	r3, [pc, #556]	; (80044bc <deleteLine+0x24c>)
 800428e:	781b      	ldrb	r3, [r3, #0]
 8004290:	2b04      	cmp	r3, #4
 8004292:	d816      	bhi.n	80042c2 <deleteLine+0x52>
			for(int j = 0;j < 10;j++) bord[deleteNumber - 1][j] = 0;
 8004294:	2300      	movs	r3, #0
 8004296:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004298:	e00f      	b.n	80042ba <deleteLine+0x4a>
 800429a:	4b87      	ldr	r3, [pc, #540]	; (80044b8 <deleteLine+0x248>)
 800429c:	781b      	ldrb	r3, [r3, #0]
 800429e:	1e5a      	subs	r2, r3, #1
 80042a0:	4987      	ldr	r1, [pc, #540]	; (80044c0 <deleteLine+0x250>)
 80042a2:	4613      	mov	r3, r2
 80042a4:	009b      	lsls	r3, r3, #2
 80042a6:	4413      	add	r3, r2
 80042a8:	005b      	lsls	r3, r3, #1
 80042aa:	18ca      	adds	r2, r1, r3
 80042ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ae:	4413      	add	r3, r2
 80042b0:	2200      	movs	r2, #0
 80042b2:	701a      	strb	r2, [r3, #0]
 80042b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042b6:	3301      	adds	r3, #1
 80042b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042bc:	2b09      	cmp	r3, #9
 80042be:	ddec      	ble.n	800429a <deleteLine+0x2a>
 80042c0:	e09b      	b.n	80043fa <deleteLine+0x18a>
		}else if(deleteCount < 10){
 80042c2:	4b7e      	ldr	r3, [pc, #504]	; (80044bc <deleteLine+0x24c>)
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	2b09      	cmp	r3, #9
 80042c8:	d81a      	bhi.n	8004300 <deleteLine+0x90>
			for(int j = 0;j < 10;j++) bord[deleteNumber - 1][j] = cache[j];
 80042ca:	2300      	movs	r3, #0
 80042cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80042ce:	e013      	b.n	80042f8 <deleteLine+0x88>
 80042d0:	4b79      	ldr	r3, [pc, #484]	; (80044b8 <deleteLine+0x248>)
 80042d2:	781b      	ldrb	r3, [r3, #0]
 80042d4:	1e5a      	subs	r2, r3, #1
 80042d6:	497b      	ldr	r1, [pc, #492]	; (80044c4 <deleteLine+0x254>)
 80042d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042da:	440b      	add	r3, r1
 80042dc:	7818      	ldrb	r0, [r3, #0]
 80042de:	4978      	ldr	r1, [pc, #480]	; (80044c0 <deleteLine+0x250>)
 80042e0:	4613      	mov	r3, r2
 80042e2:	009b      	lsls	r3, r3, #2
 80042e4:	4413      	add	r3, r2
 80042e6:	005b      	lsls	r3, r3, #1
 80042e8:	18ca      	adds	r2, r1, r3
 80042ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ec:	4413      	add	r3, r2
 80042ee:	4602      	mov	r2, r0
 80042f0:	701a      	strb	r2, [r3, #0]
 80042f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042f4:	3301      	adds	r3, #1
 80042f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80042f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042fa:	2b09      	cmp	r3, #9
 80042fc:	dde8      	ble.n	80042d0 <deleteLine+0x60>
 80042fe:	e07c      	b.n	80043fa <deleteLine+0x18a>
		}else if(deleteCount < 15) {
 8004300:	4b6e      	ldr	r3, [pc, #440]	; (80044bc <deleteLine+0x24c>)
 8004302:	781b      	ldrb	r3, [r3, #0]
 8004304:	2b0e      	cmp	r3, #14
 8004306:	d816      	bhi.n	8004336 <deleteLine+0xc6>
			for(int j = 0;j < 10;j++) bord[deleteNumber - 1][j] = 0;
 8004308:	2300      	movs	r3, #0
 800430a:	627b      	str	r3, [r7, #36]	; 0x24
 800430c:	e00f      	b.n	800432e <deleteLine+0xbe>
 800430e:	4b6a      	ldr	r3, [pc, #424]	; (80044b8 <deleteLine+0x248>)
 8004310:	781b      	ldrb	r3, [r3, #0]
 8004312:	1e5a      	subs	r2, r3, #1
 8004314:	496a      	ldr	r1, [pc, #424]	; (80044c0 <deleteLine+0x250>)
 8004316:	4613      	mov	r3, r2
 8004318:	009b      	lsls	r3, r3, #2
 800431a:	4413      	add	r3, r2
 800431c:	005b      	lsls	r3, r3, #1
 800431e:	18ca      	adds	r2, r1, r3
 8004320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004322:	4413      	add	r3, r2
 8004324:	2200      	movs	r2, #0
 8004326:	701a      	strb	r2, [r3, #0]
 8004328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432a:	3301      	adds	r3, #1
 800432c:	627b      	str	r3, [r7, #36]	; 0x24
 800432e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004330:	2b09      	cmp	r3, #9
 8004332:	ddec      	ble.n	800430e <deleteLine+0x9e>
 8004334:	e061      	b.n	80043fa <deleteLine+0x18a>
		}else if(deleteCount < 20){
 8004336:	4b61      	ldr	r3, [pc, #388]	; (80044bc <deleteLine+0x24c>)
 8004338:	781b      	ldrb	r3, [r3, #0]
 800433a:	2b13      	cmp	r3, #19
 800433c:	d81a      	bhi.n	8004374 <deleteLine+0x104>
			for(int j = 0;j < 10;j++) bord[deleteNumber - 1][j] = cache[j];
 800433e:	2300      	movs	r3, #0
 8004340:	623b      	str	r3, [r7, #32]
 8004342:	e013      	b.n	800436c <deleteLine+0xfc>
 8004344:	4b5c      	ldr	r3, [pc, #368]	; (80044b8 <deleteLine+0x248>)
 8004346:	781b      	ldrb	r3, [r3, #0]
 8004348:	1e5a      	subs	r2, r3, #1
 800434a:	495e      	ldr	r1, [pc, #376]	; (80044c4 <deleteLine+0x254>)
 800434c:	6a3b      	ldr	r3, [r7, #32]
 800434e:	440b      	add	r3, r1
 8004350:	7818      	ldrb	r0, [r3, #0]
 8004352:	495b      	ldr	r1, [pc, #364]	; (80044c0 <deleteLine+0x250>)
 8004354:	4613      	mov	r3, r2
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	4413      	add	r3, r2
 800435a:	005b      	lsls	r3, r3, #1
 800435c:	18ca      	adds	r2, r1, r3
 800435e:	6a3b      	ldr	r3, [r7, #32]
 8004360:	4413      	add	r3, r2
 8004362:	4602      	mov	r2, r0
 8004364:	701a      	strb	r2, [r3, #0]
 8004366:	6a3b      	ldr	r3, [r7, #32]
 8004368:	3301      	adds	r3, #1
 800436a:	623b      	str	r3, [r7, #32]
 800436c:	6a3b      	ldr	r3, [r7, #32]
 800436e:	2b09      	cmp	r3, #9
 8004370:	dde8      	ble.n	8004344 <deleteLine+0xd4>
 8004372:	e042      	b.n	80043fa <deleteLine+0x18a>
		}else if(deleteCount < 25) {
 8004374:	4b51      	ldr	r3, [pc, #324]	; (80044bc <deleteLine+0x24c>)
 8004376:	781b      	ldrb	r3, [r3, #0]
 8004378:	2b18      	cmp	r3, #24
 800437a:	d83e      	bhi.n	80043fa <deleteLine+0x18a>
			for(int k= deleteNumber - 1;k < 22;k++){
 800437c:	4b4e      	ldr	r3, [pc, #312]	; (80044b8 <deleteLine+0x248>)
 800437e:	781b      	ldrb	r3, [r3, #0]
 8004380:	3b01      	subs	r3, #1
 8004382:	61fb      	str	r3, [r7, #28]
 8004384:	e021      	b.n	80043ca <deleteLine+0x15a>
				for(int j = 0;j < 10;j++) {
 8004386:	2300      	movs	r3, #0
 8004388:	61bb      	str	r3, [r7, #24]
 800438a:	e018      	b.n	80043be <deleteLine+0x14e>
					bord[k][j] = bord[k + 1][j];//上の行を下ろしてくる
 800438c:	69fb      	ldr	r3, [r7, #28]
 800438e:	1c5a      	adds	r2, r3, #1
 8004390:	494b      	ldr	r1, [pc, #300]	; (80044c0 <deleteLine+0x250>)
 8004392:	4613      	mov	r3, r2
 8004394:	009b      	lsls	r3, r3, #2
 8004396:	4413      	add	r3, r2
 8004398:	005b      	lsls	r3, r3, #1
 800439a:	18ca      	adds	r2, r1, r3
 800439c:	69bb      	ldr	r3, [r7, #24]
 800439e:	4413      	add	r3, r2
 80043a0:	7818      	ldrb	r0, [r3, #0]
 80043a2:	4947      	ldr	r1, [pc, #284]	; (80044c0 <deleteLine+0x250>)
 80043a4:	69fa      	ldr	r2, [r7, #28]
 80043a6:	4613      	mov	r3, r2
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	4413      	add	r3, r2
 80043ac:	005b      	lsls	r3, r3, #1
 80043ae:	18ca      	adds	r2, r1, r3
 80043b0:	69bb      	ldr	r3, [r7, #24]
 80043b2:	4413      	add	r3, r2
 80043b4:	4602      	mov	r2, r0
 80043b6:	701a      	strb	r2, [r3, #0]
				for(int j = 0;j < 10;j++) {
 80043b8:	69bb      	ldr	r3, [r7, #24]
 80043ba:	3301      	adds	r3, #1
 80043bc:	61bb      	str	r3, [r7, #24]
 80043be:	69bb      	ldr	r3, [r7, #24]
 80043c0:	2b09      	cmp	r3, #9
 80043c2:	dde3      	ble.n	800438c <deleteLine+0x11c>
			for(int k= deleteNumber - 1;k < 22;k++){
 80043c4:	69fb      	ldr	r3, [r7, #28]
 80043c6:	3301      	adds	r3, #1
 80043c8:	61fb      	str	r3, [r7, #28]
 80043ca:	69fb      	ldr	r3, [r7, #28]
 80043cc:	2b15      	cmp	r3, #21
 80043ce:	ddda      	ble.n	8004386 <deleteLine+0x116>
				}
			}
			for(int j = 0;j < 10;j++)bord[22][j] = 0;
 80043d0:	2300      	movs	r3, #0
 80043d2:	617b      	str	r3, [r7, #20]
 80043d4:	e008      	b.n	80043e8 <deleteLine+0x178>
 80043d6:	4a3a      	ldr	r2, [pc, #232]	; (80044c0 <deleteLine+0x250>)
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	4413      	add	r3, r2
 80043dc:	33dc      	adds	r3, #220	; 0xdc
 80043de:	2200      	movs	r2, #0
 80043e0:	701a      	strb	r2, [r3, #0]
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	3301      	adds	r3, #1
 80043e6:	617b      	str	r3, [r7, #20]
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	2b09      	cmp	r3, #9
 80043ec:	ddf3      	ble.n	80043d6 <deleteLine+0x166>
			deleteCount = 0;
 80043ee:	4b33      	ldr	r3, [pc, #204]	; (80044bc <deleteLine+0x24c>)
 80043f0:	2200      	movs	r2, #0
 80043f2:	701a      	strb	r2, [r3, #0]
			deleteNumber = 0;
 80043f4:	4b30      	ldr	r3, [pc, #192]	; (80044b8 <deleteLine+0x248>)
 80043f6:	2200      	movs	r2, #0
 80043f8:	701a      	strb	r2, [r3, #0]
		}
		return 1;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e055      	b.n	80044aa <deleteLine+0x23a>
	}else{
		for(int i = 0;i < 24;i++){
 80043fe:	2300      	movs	r3, #0
 8004400:	613b      	str	r3, [r7, #16]
 8004402:	e04e      	b.n	80044a2 <deleteLine+0x232>
			int deleatBord = 0;
 8004404:	2300      	movs	r3, #0
 8004406:	60fb      	str	r3, [r7, #12]
			for(int j = 0;j < 10;j++){
 8004408:	2300      	movs	r3, #0
 800440a:	60bb      	str	r3, [r7, #8]
 800440c:	e020      	b.n	8004450 <deleteLine+0x1e0>
				if(((bord[i][j] & 0x80) == 0) && (bord[i][j] & 0x7F)){
 800440e:	492c      	ldr	r1, [pc, #176]	; (80044c0 <deleteLine+0x250>)
 8004410:	693a      	ldr	r2, [r7, #16]
 8004412:	4613      	mov	r3, r2
 8004414:	009b      	lsls	r3, r3, #2
 8004416:	4413      	add	r3, r2
 8004418:	005b      	lsls	r3, r3, #1
 800441a:	18ca      	adds	r2, r1, r3
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	4413      	add	r3, r2
 8004420:	781b      	ldrb	r3, [r3, #0]
 8004422:	b25b      	sxtb	r3, r3
 8004424:	2b00      	cmp	r3, #0
 8004426:	db10      	blt.n	800444a <deleteLine+0x1da>
 8004428:	4925      	ldr	r1, [pc, #148]	; (80044c0 <deleteLine+0x250>)
 800442a:	693a      	ldr	r2, [r7, #16]
 800442c:	4613      	mov	r3, r2
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	4413      	add	r3, r2
 8004432:	005b      	lsls	r3, r3, #1
 8004434:	18ca      	adds	r2, r1, r3
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	4413      	add	r3, r2
 800443a:	781b      	ldrb	r3, [r3, #0]
 800443c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004440:	2b00      	cmp	r3, #0
 8004442:	d002      	beq.n	800444a <deleteLine+0x1da>
					deleatBord++;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	3301      	adds	r3, #1
 8004448:	60fb      	str	r3, [r7, #12]
			for(int j = 0;j < 10;j++){
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	3301      	adds	r3, #1
 800444e:	60bb      	str	r3, [r7, #8]
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	2b09      	cmp	r3, #9
 8004454:	dddb      	ble.n	800440e <deleteLine+0x19e>
				}
			}
			if(deleatBord >= 10){// 消すとき
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2b09      	cmp	r3, #9
 800445a:	dd1f      	ble.n	800449c <deleteLine+0x22c>
				for(int j = 0;j < 10;j++){
 800445c:	2300      	movs	r3, #0
 800445e:	607b      	str	r3, [r7, #4]
 8004460:	e011      	b.n	8004486 <deleteLine+0x216>
					cache[j] = bord[i][j];
 8004462:	4917      	ldr	r1, [pc, #92]	; (80044c0 <deleteLine+0x250>)
 8004464:	693a      	ldr	r2, [r7, #16]
 8004466:	4613      	mov	r3, r2
 8004468:	009b      	lsls	r3, r3, #2
 800446a:	4413      	add	r3, r2
 800446c:	005b      	lsls	r3, r3, #1
 800446e:	18ca      	adds	r2, r1, r3
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	4413      	add	r3, r2
 8004474:	7819      	ldrb	r1, [r3, #0]
 8004476:	4a13      	ldr	r2, [pc, #76]	; (80044c4 <deleteLine+0x254>)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	4413      	add	r3, r2
 800447c:	460a      	mov	r2, r1
 800447e:	701a      	strb	r2, [r3, #0]
				for(int j = 0;j < 10;j++){
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	3301      	adds	r3, #1
 8004484:	607b      	str	r3, [r7, #4]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2b09      	cmp	r3, #9
 800448a:	ddea      	ble.n	8004462 <deleteLine+0x1f2>
				}
				deleteNumber = i + 1;
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	b2db      	uxtb	r3, r3
 8004490:	3301      	adds	r3, #1
 8004492:	b2da      	uxtb	r2, r3
 8004494:	4b08      	ldr	r3, [pc, #32]	; (80044b8 <deleteLine+0x248>)
 8004496:	701a      	strb	r2, [r3, #0]
				return 1;
 8004498:	2301      	movs	r3, #1
 800449a:	e006      	b.n	80044aa <deleteLine+0x23a>
		for(int i = 0;i < 24;i++){
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	3301      	adds	r3, #1
 80044a0:	613b      	str	r3, [r7, #16]
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	2b17      	cmp	r3, #23
 80044a6:	ddad      	ble.n	8004404 <deleteLine+0x194>
			}
		}
	}
	return 0;
 80044a8:	2300      	movs	r3, #0
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3734      	adds	r7, #52	; 0x34
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr
 80044b6:	bf00      	nop
 80044b8:	20000cde 	.word	0x20000cde
 80044bc:	20000cdf 	.word	0x20000cdf
 80044c0:	20000be0 	.word	0x20000be0
 80044c4:	20000ce0 	.word	0x20000ce0

080044c8 <gameOver>:

int gameOver(){
 80044c8:	b480      	push	{r7}
 80044ca:	b083      	sub	sp, #12
 80044cc:	af00      	add	r7, sp, #0
	for(int i = 21;i < 24;i++){
 80044ce:	2315      	movs	r3, #21
 80044d0:	607b      	str	r3, [r7, #4]
 80044d2:	e028      	b.n	8004526 <gameOver+0x5e>
		for(int j = 0;j < 10;j++){
 80044d4:	2300      	movs	r3, #0
 80044d6:	603b      	str	r3, [r7, #0]
 80044d8:	e01f      	b.n	800451a <gameOver+0x52>
			if(((bord[i][j] & 0x80) == 0) && (bord[i][j] & 0x7F)){
 80044da:	4918      	ldr	r1, [pc, #96]	; (800453c <gameOver+0x74>)
 80044dc:	687a      	ldr	r2, [r7, #4]
 80044de:	4613      	mov	r3, r2
 80044e0:	009b      	lsls	r3, r3, #2
 80044e2:	4413      	add	r3, r2
 80044e4:	005b      	lsls	r3, r3, #1
 80044e6:	18ca      	adds	r2, r1, r3
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	4413      	add	r3, r2
 80044ec:	781b      	ldrb	r3, [r3, #0]
 80044ee:	b25b      	sxtb	r3, r3
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	db0f      	blt.n	8004514 <gameOver+0x4c>
 80044f4:	4911      	ldr	r1, [pc, #68]	; (800453c <gameOver+0x74>)
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	4613      	mov	r3, r2
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	4413      	add	r3, r2
 80044fe:	005b      	lsls	r3, r3, #1
 8004500:	18ca      	adds	r2, r1, r3
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	4413      	add	r3, r2
 8004506:	781b      	ldrb	r3, [r3, #0]
 8004508:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800450c:	2b00      	cmp	r3, #0
 800450e:	d001      	beq.n	8004514 <gameOver+0x4c>
				return 1;
 8004510:	2301      	movs	r3, #1
 8004512:	e00c      	b.n	800452e <gameOver+0x66>
		for(int j = 0;j < 10;j++){
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	3301      	adds	r3, #1
 8004518:	603b      	str	r3, [r7, #0]
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	2b09      	cmp	r3, #9
 800451e:	dddc      	ble.n	80044da <gameOver+0x12>
	for(int i = 21;i < 24;i++){
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	3301      	adds	r3, #1
 8004524:	607b      	str	r3, [r7, #4]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2b17      	cmp	r3, #23
 800452a:	ddd3      	ble.n	80044d4 <gameOver+0xc>
			}
		}
	}
	return 0;
 800452c:	2300      	movs	r3, #0
}
 800452e:	4618      	mov	r0, r3
 8004530:	370c      	adds	r7, #12
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr
 800453a:	bf00      	nop
 800453c:	20000be0 	.word	0x20000be0

08004540 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004540:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004578 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004544:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004546:	e003      	b.n	8004550 <LoopCopyDataInit>

08004548 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004548:	4b0c      	ldr	r3, [pc, #48]	; (800457c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800454a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800454c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800454e:	3104      	adds	r1, #4

08004550 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004550:	480b      	ldr	r0, [pc, #44]	; (8004580 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004552:	4b0c      	ldr	r3, [pc, #48]	; (8004584 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004554:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004556:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004558:	d3f6      	bcc.n	8004548 <CopyDataInit>
  ldr  r2, =_sbss
 800455a:	4a0b      	ldr	r2, [pc, #44]	; (8004588 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800455c:	e002      	b.n	8004564 <LoopFillZerobss>

0800455e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800455e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004560:	f842 3b04 	str.w	r3, [r2], #4

08004564 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004564:	4b09      	ldr	r3, [pc, #36]	; (800458c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004566:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004568:	d3f9      	bcc.n	800455e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800456a:	f7fe ff93 	bl	8003494 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800456e:	f000 f817 	bl	80045a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004572:	f7fe fb33 	bl	8002bdc <main>
  bx  lr    
 8004576:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004578:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800457c:	08004790 	.word	0x08004790
  ldr  r0, =_sdata
 8004580:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004584:	20000194 	.word	0x20000194
  ldr  r2, =_sbss
 8004588:	20000194 	.word	0x20000194
  ldr  r3, = _ebss
 800458c:	20000eec 	.word	0x20000eec

08004590 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004590:	e7fe      	b.n	8004590 <ADC_IRQHandler>
	...

08004594 <__errno>:
 8004594:	4b01      	ldr	r3, [pc, #4]	; (800459c <__errno+0x8>)
 8004596:	6818      	ldr	r0, [r3, #0]
 8004598:	4770      	bx	lr
 800459a:	bf00      	nop
 800459c:	20000130 	.word	0x20000130

080045a0 <__libc_init_array>:
 80045a0:	b570      	push	{r4, r5, r6, lr}
 80045a2:	4e0d      	ldr	r6, [pc, #52]	; (80045d8 <__libc_init_array+0x38>)
 80045a4:	4c0d      	ldr	r4, [pc, #52]	; (80045dc <__libc_init_array+0x3c>)
 80045a6:	1ba4      	subs	r4, r4, r6
 80045a8:	10a4      	asrs	r4, r4, #2
 80045aa:	2500      	movs	r5, #0
 80045ac:	42a5      	cmp	r5, r4
 80045ae:	d109      	bne.n	80045c4 <__libc_init_array+0x24>
 80045b0:	4e0b      	ldr	r6, [pc, #44]	; (80045e0 <__libc_init_array+0x40>)
 80045b2:	4c0c      	ldr	r4, [pc, #48]	; (80045e4 <__libc_init_array+0x44>)
 80045b4:	f000 f8c8 	bl	8004748 <_init>
 80045b8:	1ba4      	subs	r4, r4, r6
 80045ba:	10a4      	asrs	r4, r4, #2
 80045bc:	2500      	movs	r5, #0
 80045be:	42a5      	cmp	r5, r4
 80045c0:	d105      	bne.n	80045ce <__libc_init_array+0x2e>
 80045c2:	bd70      	pop	{r4, r5, r6, pc}
 80045c4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80045c8:	4798      	blx	r3
 80045ca:	3501      	adds	r5, #1
 80045cc:	e7ee      	b.n	80045ac <__libc_init_array+0xc>
 80045ce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80045d2:	4798      	blx	r3
 80045d4:	3501      	adds	r5, #1
 80045d6:	e7f2      	b.n	80045be <__libc_init_array+0x1e>
 80045d8:	08004788 	.word	0x08004788
 80045dc:	08004788 	.word	0x08004788
 80045e0:	08004788 	.word	0x08004788
 80045e4:	0800478c 	.word	0x0800478c

080045e8 <memset>:
 80045e8:	4402      	add	r2, r0
 80045ea:	4603      	mov	r3, r0
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d100      	bne.n	80045f2 <memset+0xa>
 80045f0:	4770      	bx	lr
 80045f2:	f803 1b01 	strb.w	r1, [r3], #1
 80045f6:	e7f9      	b.n	80045ec <memset+0x4>

080045f8 <rand>:
 80045f8:	b538      	push	{r3, r4, r5, lr}
 80045fa:	4b13      	ldr	r3, [pc, #76]	; (8004648 <rand+0x50>)
 80045fc:	681c      	ldr	r4, [r3, #0]
 80045fe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004600:	b97b      	cbnz	r3, 8004622 <rand+0x2a>
 8004602:	2018      	movs	r0, #24
 8004604:	f000 f82c 	bl	8004660 <malloc>
 8004608:	4a10      	ldr	r2, [pc, #64]	; (800464c <rand+0x54>)
 800460a:	4b11      	ldr	r3, [pc, #68]	; (8004650 <rand+0x58>)
 800460c:	63a0      	str	r0, [r4, #56]	; 0x38
 800460e:	e9c0 2300 	strd	r2, r3, [r0]
 8004612:	4b10      	ldr	r3, [pc, #64]	; (8004654 <rand+0x5c>)
 8004614:	6083      	str	r3, [r0, #8]
 8004616:	230b      	movs	r3, #11
 8004618:	8183      	strh	r3, [r0, #12]
 800461a:	2201      	movs	r2, #1
 800461c:	2300      	movs	r3, #0
 800461e:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8004622:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004624:	480c      	ldr	r0, [pc, #48]	; (8004658 <rand+0x60>)
 8004626:	690a      	ldr	r2, [r1, #16]
 8004628:	694b      	ldr	r3, [r1, #20]
 800462a:	4c0c      	ldr	r4, [pc, #48]	; (800465c <rand+0x64>)
 800462c:	4350      	muls	r0, r2
 800462e:	fb04 0003 	mla	r0, r4, r3, r0
 8004632:	fba2 2304 	umull	r2, r3, r2, r4
 8004636:	4403      	add	r3, r0
 8004638:	1c54      	adds	r4, r2, #1
 800463a:	f143 0500 	adc.w	r5, r3, #0
 800463e:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8004642:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8004646:	bd38      	pop	{r3, r4, r5, pc}
 8004648:	20000130 	.word	0x20000130
 800464c:	abcd330e 	.word	0xabcd330e
 8004650:	e66d1234 	.word	0xe66d1234
 8004654:	0005deec 	.word	0x0005deec
 8004658:	5851f42d 	.word	0x5851f42d
 800465c:	4c957f2d 	.word	0x4c957f2d

08004660 <malloc>:
 8004660:	4b02      	ldr	r3, [pc, #8]	; (800466c <malloc+0xc>)
 8004662:	4601      	mov	r1, r0
 8004664:	6818      	ldr	r0, [r3, #0]
 8004666:	f000 b803 	b.w	8004670 <_malloc_r>
 800466a:	bf00      	nop
 800466c:	20000130 	.word	0x20000130

08004670 <_malloc_r>:
 8004670:	b570      	push	{r4, r5, r6, lr}
 8004672:	1ccd      	adds	r5, r1, #3
 8004674:	f025 0503 	bic.w	r5, r5, #3
 8004678:	3508      	adds	r5, #8
 800467a:	2d0c      	cmp	r5, #12
 800467c:	bf38      	it	cc
 800467e:	250c      	movcc	r5, #12
 8004680:	2d00      	cmp	r5, #0
 8004682:	4606      	mov	r6, r0
 8004684:	db01      	blt.n	800468a <_malloc_r+0x1a>
 8004686:	42a9      	cmp	r1, r5
 8004688:	d903      	bls.n	8004692 <_malloc_r+0x22>
 800468a:	230c      	movs	r3, #12
 800468c:	6033      	str	r3, [r6, #0]
 800468e:	2000      	movs	r0, #0
 8004690:	bd70      	pop	{r4, r5, r6, pc}
 8004692:	f000 f857 	bl	8004744 <__malloc_lock>
 8004696:	4a21      	ldr	r2, [pc, #132]	; (800471c <_malloc_r+0xac>)
 8004698:	6814      	ldr	r4, [r2, #0]
 800469a:	4621      	mov	r1, r4
 800469c:	b991      	cbnz	r1, 80046c4 <_malloc_r+0x54>
 800469e:	4c20      	ldr	r4, [pc, #128]	; (8004720 <_malloc_r+0xb0>)
 80046a0:	6823      	ldr	r3, [r4, #0]
 80046a2:	b91b      	cbnz	r3, 80046ac <_malloc_r+0x3c>
 80046a4:	4630      	mov	r0, r6
 80046a6:	f000 f83d 	bl	8004724 <_sbrk_r>
 80046aa:	6020      	str	r0, [r4, #0]
 80046ac:	4629      	mov	r1, r5
 80046ae:	4630      	mov	r0, r6
 80046b0:	f000 f838 	bl	8004724 <_sbrk_r>
 80046b4:	1c43      	adds	r3, r0, #1
 80046b6:	d124      	bne.n	8004702 <_malloc_r+0x92>
 80046b8:	230c      	movs	r3, #12
 80046ba:	6033      	str	r3, [r6, #0]
 80046bc:	4630      	mov	r0, r6
 80046be:	f000 f842 	bl	8004746 <__malloc_unlock>
 80046c2:	e7e4      	b.n	800468e <_malloc_r+0x1e>
 80046c4:	680b      	ldr	r3, [r1, #0]
 80046c6:	1b5b      	subs	r3, r3, r5
 80046c8:	d418      	bmi.n	80046fc <_malloc_r+0x8c>
 80046ca:	2b0b      	cmp	r3, #11
 80046cc:	d90f      	bls.n	80046ee <_malloc_r+0x7e>
 80046ce:	600b      	str	r3, [r1, #0]
 80046d0:	50cd      	str	r5, [r1, r3]
 80046d2:	18cc      	adds	r4, r1, r3
 80046d4:	4630      	mov	r0, r6
 80046d6:	f000 f836 	bl	8004746 <__malloc_unlock>
 80046da:	f104 000b 	add.w	r0, r4, #11
 80046de:	1d23      	adds	r3, r4, #4
 80046e0:	f020 0007 	bic.w	r0, r0, #7
 80046e4:	1ac3      	subs	r3, r0, r3
 80046e6:	d0d3      	beq.n	8004690 <_malloc_r+0x20>
 80046e8:	425a      	negs	r2, r3
 80046ea:	50e2      	str	r2, [r4, r3]
 80046ec:	e7d0      	b.n	8004690 <_malloc_r+0x20>
 80046ee:	428c      	cmp	r4, r1
 80046f0:	684b      	ldr	r3, [r1, #4]
 80046f2:	bf16      	itet	ne
 80046f4:	6063      	strne	r3, [r4, #4]
 80046f6:	6013      	streq	r3, [r2, #0]
 80046f8:	460c      	movne	r4, r1
 80046fa:	e7eb      	b.n	80046d4 <_malloc_r+0x64>
 80046fc:	460c      	mov	r4, r1
 80046fe:	6849      	ldr	r1, [r1, #4]
 8004700:	e7cc      	b.n	800469c <_malloc_r+0x2c>
 8004702:	1cc4      	adds	r4, r0, #3
 8004704:	f024 0403 	bic.w	r4, r4, #3
 8004708:	42a0      	cmp	r0, r4
 800470a:	d005      	beq.n	8004718 <_malloc_r+0xa8>
 800470c:	1a21      	subs	r1, r4, r0
 800470e:	4630      	mov	r0, r6
 8004710:	f000 f808 	bl	8004724 <_sbrk_r>
 8004714:	3001      	adds	r0, #1
 8004716:	d0cf      	beq.n	80046b8 <_malloc_r+0x48>
 8004718:	6025      	str	r5, [r4, #0]
 800471a:	e7db      	b.n	80046d4 <_malloc_r+0x64>
 800471c:	20000cec 	.word	0x20000cec
 8004720:	20000cf0 	.word	0x20000cf0

08004724 <_sbrk_r>:
 8004724:	b538      	push	{r3, r4, r5, lr}
 8004726:	4c06      	ldr	r4, [pc, #24]	; (8004740 <_sbrk_r+0x1c>)
 8004728:	2300      	movs	r3, #0
 800472a:	4605      	mov	r5, r0
 800472c:	4608      	mov	r0, r1
 800472e:	6023      	str	r3, [r4, #0]
 8004730:	f7fe fe84 	bl	800343c <_sbrk>
 8004734:	1c43      	adds	r3, r0, #1
 8004736:	d102      	bne.n	800473e <_sbrk_r+0x1a>
 8004738:	6823      	ldr	r3, [r4, #0]
 800473a:	b103      	cbz	r3, 800473e <_sbrk_r+0x1a>
 800473c:	602b      	str	r3, [r5, #0]
 800473e:	bd38      	pop	{r3, r4, r5, pc}
 8004740:	20000ee8 	.word	0x20000ee8

08004744 <__malloc_lock>:
 8004744:	4770      	bx	lr

08004746 <__malloc_unlock>:
 8004746:	4770      	bx	lr

08004748 <_init>:
 8004748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800474a:	bf00      	nop
 800474c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800474e:	bc08      	pop	{r3}
 8004750:	469e      	mov	lr, r3
 8004752:	4770      	bx	lr

08004754 <_fini>:
 8004754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004756:	bf00      	nop
 8004758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800475a:	bc08      	pop	{r3}
 800475c:	469e      	mov	lr, r3
 800475e:	4770      	bx	lr
